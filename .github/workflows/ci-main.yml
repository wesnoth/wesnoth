name: CI

on:
  push:
    branches: [ 1.16 ]
  pull_request:
    branches: [ 1.16 ]
  workflow_dispatch:

jobs:
# run after all other jobs have completed to check overall build status
  discord-notification:
    runs-on: ubuntu-20.04

    name: Discord Notification

    needs: [ubuntu-2004-scons-gcc-release-lto, ubuntu-2004-cmake-clang-debug, steam-runtime, mingw, flatpak, translations, macos-intel]
    if: always()

    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - uses: rjstone/discord-webhook-notify@v1
        if: env.WORKFLOW_CONCLUSION == 'failure' && github.event_name == 'push'
        with:
          severity: error
          webhookUrl: ${{ secrets.DISCORD_CI_WEBHOOK }}
          description: |-
            pusher: ${{ github.actor }}
            commit: ${{ github.event.head_commit.message }}
            commit url: ${{ github.event.head_commit.url }}

  ubuntu-2004-scons-gcc-release-lto:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Ubuntu 20.04
        run: |
          export BRANCH=master
          export IMAGE=2004
          export NLS=false
          export TOOL=scons
          export CC=gcc
          export CXX=g++
          export CXX_STD=17
          export CFG=release
          export LTO=true
          export CACHE_DIR=/home/wesnoth-CI/build
          ./.github/workflows/ci-scripts/ubuntu.sh

  ubuntu-2004-cmake-clang-debug:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Ubuntu 20.04
        run: |
          export BRANCH=master
          export IMAGE=2004
          export NLS=false
          export TOOL=cmake
          export CC=clang
          export CXX=clang++
          export CXX_STD=17
          export CFG=debug
          export LTO=false
          export CACHE_DIR=/home/wesnoth-CI/build
          ./.github/workflows/ci-scripts/ubuntu.sh

  steam-runtime:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Steam Runtime
        run: |
          export BRANCH=master
          export IMAGE=steamrt
          export NLS=false
          export TOOL=scons
          export CC=gcc-9
          export CXX=g++-9
          export CXX_STD=17
          export CFG=release
          export LTO=false
          export CACHE_DIR=/home/wesnoth-CI/build
          ./.github/workflows/ci-scripts/ubuntu.sh

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: Steam-Linux
          path: |
            ~/steambuild-*.tar

  mingw:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: MinGW Crosscompile
        run: |
          export BRANCH=master
          export IMAGE=mingw
          export NLS=false
          export TOOL=scons
          export CC=gcc
          export CXX=g++
          export CXX_STD=17
          export CFG=release
          export LTO=false
          export CACHE_DIR=/home/wesnoth-CI/build
          ./.github/workflows/ci-scripts/ubuntu.sh

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: Source-And-Windows-Installer
          path: |
            ~/wesnoth-*.tar.bz2
            ~/wesnoth-*-win64.exe

  flatpak:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Flatpak
        run: |
          export BRANCH=master
          export IMAGE=flatpak
          export NLS=false
          export TOOL=scons
          export CC=gcc
          export CXX=g++
          export CXX_STD=17
          export CFG=release
          export LTO=false
          export CACHE_DIR=/home/wesnoth-CI/build
          ./.github/workflows/ci-scripts/ubuntu.sh

  translations:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Translations
        run: |
          export BRANCH=master
          export IMAGE=2004
          export NLS=only
          export TOOL=scons
          export CC=gcc
          export CXX=g++
          export CXX_STD=17
          export CFG=release
          export LTO=false
          export CACHE_DIR=/home/wesnoth-CI/build
          ./.github/workflows/ci-scripts/ubuntu.sh

  macos-intel:
    strategy:
      fail-fast: false
      matrix:
        cfg: [ Debug ]
    runs-on: macos-12
    env:
      CFG: ${{ matrix.cfg }}
      DEVELOPER_DIR: /Applications/Xcode_13.1.app/Contents/Developer

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Get dependencies
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install scons
          ./projectfiles/Xcode/Fix_Xcode_Dependencies
      - name: Build translations
        run: scons translations build=release --debug=time nls=true jobs=2
      - name: Build wesnoth and unit tests
        working-directory: projectfiles/Xcode
        run: |
          xcodebuild ARCHS=x86_64 -project "The Battle for Wesnoth.xcodeproj" -target "The Battle for Wesnoth" -target "unit_tests" -configuration "$CFG"
          # xcodebuild or maybe clang do not appear to fail properly when input files cannot be found; double check executables were produced
          [ -x "build/$CFG/The Battle for Wesnoth.app" ] || { printf 'Failed to build wesnoth executable!\n' >&2; exit 1; }
          [ -x "build/$CFG/unit_tests" ] || { printf 'Failed to build unit test executable!\n' >&2; exit 1; }
      - name: Create disk image
        working-directory: projectfiles/Xcode
        run: hdiutil create -volname "Wesnoth_$CFG" -fs 'HFS+' -srcfolder "build/$CFG" -ov -format UDBZ "Wesnoth_${CFG}.dmg"
      - name: Upload disk image
        uses: actions/upload-artifact@v4
        with:
          name: MacOS ${{ matrix.cfg }} disk image
          path: projectfiles/Xcode/Wesnoth_${{ matrix.cfg }}.dmg
      - name: Run WML tests
        if: matrix.cfg == 'Release'
        run: ./run_wml_tests -g -c -t 30 -p "projectfiles/Xcode/build/$CFG/The Battle for Wesnoth.app/Contents/MacOS/The Battle for Wesnoth"
