name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  checks: # checks that don't need a wesnoth binary
    runs-on: ubuntu-latest
    container:
      image: wesnoth/wesnoth:2404-master
      options: --tty # docker create options
      env:
        CLICOLOR_FORCE: 1

    steps:
      - uses: actions/checkout@v4

      - name: Set git safe directory
        if: success() || failure()
        run: |
          git config --global --add safe.directory '*'

  ubuntu:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { tool: scons, cc: gcc,   cxx: g++,     cfg: debug,   lto: false, sys_lua: false }
    runs-on: ubuntu-latest
    container:
      image: wesnoth/wesnoth:2404-master
      options: --tty # docker create options
      env:
        TOOL: ${{ matrix.tool }}
        CFG: ${{ matrix.cfg }}
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        CXX_STD: 17
        LTO: ${{ matrix.lto }}
        SYS_LUA: ${{ matrix.sys_lua }}
        CLICOLOR_FORCE: 1
        SDL_VIDEODRIVER: dummy

    steps:
      - { uses: actions/checkout@v4, with: { submodules: "recursive" } }

# 1) wesnothd and campaignd should be buildable without SDL2 being present
# 2) boost is installed via apt as well as built and installed into /usr/local (for _GLIBCXX_DEBUG support in boost program options)
# 3) mariadbpp currently has a deprecation warning that causes strict builds to fail
#    scons doesn't build it for the wesnoth client and the boost tests, but cmake apparently does
      - name: Build wesnoth, wesnothd, campaignd and unit tests
        id: build # needed to check step outcome
        run: |
          case $TOOL in
            scons)
              build() {
                ldconfig
                scons "$@" build="$CFG" ctool="$CC" cxxtool="$CXX" cxx_std="$CXX_STD" \
                  extra_flags_config="-pipe" forum_user_handler=true \
                  nls=false enable_lto="$LTO" system_lua="$SYS_LUA" force_color=true \
                  jobs=2 --debug=time glibcxx_debug=true glibcxx_assertions=true
              }
              build strict=true wesnoth boost_unit_tests

              apt remove -y -qq libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev

              build strict=false wesnothd campaignd
              ;;
            cmake)
              build() {
                ldconfig
                cmake "$@" -DCMAKE_BUILD_TYPE="$CFG" -DCXX_STD="$CXX_STD" \
                  -DEXTRA_FLAGS_CONFIG="-pipe" -DENABLE_MYSQL=true \
                  -DENABLE_NLS=false -DENABLE_LTO="$LTO" -DFORCE_COLOR_OUTPUT=true -DLTO_JOBS=2 \
                  -DENABLE_SYSTEM_LUA="$SYS_LUA" .
              }
              rm -R /usr/local/lib/cmake
              rm /usr/local/lib/libboost*
              rm -R /usr/local/include/boost
              build -DENABLE_GAME=true -DENABLE_SERVER=false -DENABLE_CAMPAIGN_SERVER=false -DENABLE_TESTS=true -DENABLE_STRICT_COMPILATION=false
              make conftests
              make VERBOSE=1 -j2

              apt remove -y -qq libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev

              build -DENABLE_GAME=false -DENABLE_SERVER=true -DENABLE_CAMPAIGN_SERVER=true -DENABLE_TESTS=false -DENABLE_STRICT_COMPILATION=false
              make VERBOSE=1 -j2
              ;;
          esac
      - name: Check path options
        if: success() || steps.build.outcome == 'success'
        run: |
          ./wesnoth --version
          for opt in data userdata
          do
            output=$(./wesnoth --nobanner --"$opt"-path)
            if [ "$output" = "" ]; then printf 'option --%s-path prints nothing to stdout!\n' "$opt" >&2; exit 1; fi
            printf '%s-path: %s\n' "$opt" "$output"
          done
      - name: WML validation
        # only run on release builds (takes ~10 times as long on debug)
        if: matrix.cfg == 'release' && (success() || steps.build.outcome == 'success')
        run: ./utils/CI/schema_validation.sh
      - name: Run WML tests
        # only run on release builds (takes ~6 times as long on debug)
        if: matrix.cfg == 'release' && (success() || steps.build.outcome == 'success')
        run: ./run_wml_tests -g -c -t 20 -bt 1000
      - name: Run play tests
        if: success() || steps.build.outcome == 'success'
        run: ./utils/CI/play_test_executor.sh
      - name: Run MP tests
        if: success() || steps.build.outcome == 'success'
        run: ./utils/CI/mp_test_executor.sh
      - name: Run unit tests
        if: success() || steps.build.outcome == 'success'
        run: ./run_boost_tests


# run after all other jobs have completed to check overall build status
  notification:
    runs-on: ubuntu-latest
    needs: [checks, copyright, ubuntu, steam-runtime, mingw, flatpak, translations, macos-intel, windows]
    if: failure() && github.event_name == 'push'

    steps:
      - name: Discord Notification
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: error
          webhookUrl: ${{ secrets.DISCORD_CI_WEBHOOK }}
          description: |-
            pusher: ${{ github.actor }}
            commit: ${{ github.event.head_commit.message }}
            commit url: ${{ github.event.head_commit.url }}
      - name: Prepare message
        if: github.event_name == 'push'
        env:
          MSG: ${{ github.event.head_commit.message }}
        run: |
          printf COMMIT_SUBJECT=%s "${MSG}" | head -n 1 >> "$GITHUB_ENV"
      - name: IRC Notification
        uses: rectalogic/notify-irc@v1
        with:
          channel: ${{ vars.IRC_CHANNEL }}
          server: ${{ vars.IRC_SERVER }}
          nickname: ${{ vars.IRC_NICK }} # is also used for sasl username
          sasl_password: ${{ secrets.IRC_SASL_PASSWORD }}
          message: "‚ùå ${{ github.workflow }} workflow run ${{ github.run_number }} failed on \x0306${{ github.ref_name }}\x0F: ${{ env.COMMIT_SUBJECT }} by \x0315${{ github.actor }}\x0F: \x0302${{ github.event.head_commit.url }}\x0F"
