# vi: syntax=python:et:ts=4
Import("env")
lua_sources = Split("""
../lua_jailbreak_exception.cpp
lapi.cpp
lbitlib.cpp
lcode.cpp
lcorolib.cpp
lctype.cpp
ldebug.cpp
ldo.cpp
ldump.cpp
lfunc.cpp
lgc.cpp
llex.cpp
lmem.cpp
lobject.cpp
lopcodes.cpp
lparser.cpp
lstate.cpp
lstring.cpp
ltable.cpp
ltm.cpp
lundump.cpp
lvm.cpp
lzio.cpp
lauxlib.cpp
lbaselib.cpp
ldblib.cpp
liolib.cpp
lmathlib.cpp
loslib.cpp
ltablib.cpp
lstrlib.cpp
loadlib.cpp
linit.cpp
lutf8lib.cpp
""")
env_lua = env.Clone(
    # Silence some Clang-specific warnings due to extra parentheses in if statements when comparing.
    CCFLAGS = ["$CCFLAGS", "clang" in env["CXX"] and Split("-Wno-parentheses-equality -Wno-pointer-bool-conversion") or [], "strict" in env and Split("-Wno-old-style-cast -Wno-useless-cast") or []],
    CCCOM = env["CXXCOM"],
    CPPPATH = ["$CPPPATH", Dir(".").srcnode()],
    CPPDEFINES = ["$CPPDEFINES", env["PLATFORM"] != "win32" and "LUA_USE_POSIX" or []])

#if env['strict']:
#    env.AppendUnique(CCFLAGS = Split("-Wno-old-style-cast -Wno-useless-cast"))

env_lua.Append(CCFLAGS = Split("-include src/wesnoth_lua_config.h -Wno-deprecated-declarations"))

objs_lua = env_lua.Object(lua_sources)
for obj in objs_lua:
    env_lua.Depends(obj, '../wesnoth_lua_config.h')

liblua = env_lua.Library("lua", objs_lua)

Return("liblua")
