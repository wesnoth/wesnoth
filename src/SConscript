# vi: syntax=python:et:ts=4

import commands, os
from subprocess import Popen, PIPE
from glob import glob

Import("*")

#
# load list of sources from the file in source_lists/
#
def GetSources(filename):
    sources = []
    with open(Dir('#').abspath + "/source_lists/" + filename) as file:
        for line in file.readlines():
            sources.append(line.strip())
    return sources

# 
# setup the FIFODIR, WESNOTH_PATH
# 

# if not windows, append FIFODIR, WESNOTH_PATH everywhere as cmake does
if env["PLATFORM"] != "win32":
    for env in [test_env, client_env, env]:
        env.Append(CPPDEFINES = "FIFODIR='\"$fifodir\"'")
        env.Append(CPPDEFINES = "WESNOTH_PATH='\"$datadir\"'")
else:
    env["fifodir"] = ""

# Inject boost::bind patch everywhere
for env in [test_env, client_env, env]:
    env.Append(CCFLAGS = Split("-include boost-patched/bind/arg.hpp"))

for env in [test_env, client_env, env]:
    env.Append(CPPDEFINES = "$EXTRA_DEFINE")

#---libwesnoth_core---

#color_range.cpp should be removed, but game_config depends on it.
#game_config has very few things that are needed elsewhere, it should be
#removed.  Requires moving path and version at least to other files.

libwesnoth_core_sources = GetSources("libwesnoth_core")

game_config_env = env.Clone()
filesystem_env = env.Clone()
if env["PLATFORM"] != "win32":
    game_config_env.Append(CPPDEFINES = "WESNOTH_PATH='\"$datadir\"'")
    if env['localedirname']:
        filesystem_env.Append(CPPDEFINES = "LOCALEDIR='\"$localedirname\"'")
        if not os.path.isabs(env['localedirname']):
            filesystem_env.Append(CPPDEFINES = "HAS_RELATIVE_LOCALEDIR")
    if env['version_suffix'] and not env['prefsdir']:
        filesystem_env['prefsdir'] = ".wesnoth$version_suffix"
    if filesystem_env['prefsdir']:
        filesystem_env.Append(CPPDEFINES = "PREFERENCES_DIR=\\\"$prefsdir\\\"")

if env['default_prefs_file']:
    client_env.Append(CPPDEFINES = "DEFAULT_PREFS_PATH='\"$default_prefs_file\"'")

    game_config_env['default_prefs_file'] = env['default_prefs_file']
    game_config_env.Append(CPPDEFINES = "DEFAULT_PREFS_PATH='\"$default_prefs_file\"'")
    if not os.path.isabs(env['default_prefs_file']):
        filesystem_env.Append(CPPDEFINES = "HAS_RELATIVE_DEFPREF")

if env["PLATFORM"] == "win32":
    libwesnoth_core_sources.append("log_windows.cpp")

libwesnoth_core = [env.Library("wesnoth_core", libwesnoth_core_sources)]

#---libwesnoth---
libwesnoth_sources = GetSources("libwesnoth")
libwesnoth = client_env.Library("wesnoth", libwesnoth_sources)

#---libwesnoth_sdl---
libwesnoth_sdl_sources = GetSources("libwesnoth_sdl")

if env["png"]:
    libwesnoth_sdl_sources.append("SDL_SavePNG/savepng.c")

libwesnoth_sdl = client_env.Library("wesnoth_sdl", libwesnoth_sdl_sources)

#---wesnoth---
# Used by both 'wesnoth' and 'test' targets

wesnoth_sources = GetSources("wesnoth")

if env["PLATFORM"] == "win32":
    wesnoth_sources.append("desktop/windows_tray_notification.cpp")

if env["PLATFORM"] == 'darwin':
    wesnoth_sources.append("desktop/apple_notification.mm")

if env["notifications"]:
    wesnoth_sources.append("desktop/dbus_notification.cpp")

libwesnoth_extras = client_env.Library("wesnoth_extras", wesnoth_sources)

#---lua---
lua_sources = GetSources("lua")

env_lua = env.Clone(
    # Silence some Clang-specific warnings due to extra parentheses in if statements when comparing.
    CCFLAGS = ["$CCFLAGS", "clang" in env["CXX"] and Split("-Wno-parentheses-equality -Wno-pointer-bool-conversion") or [], "strict" in env and Split("-Wno-old-style-cast -Wno-useless-cast") or []],
    CCCOM = env["CXXCOM"],
    CPPPATH = ["$CPPPATH", Dir(".").srcnode()],
    CPPDEFINES = ["$CPPDEFINES", env["PLATFORM"] != "win32" and "LUA_USE_POSIX" or []])

if env_lua["build"] == "optimized" and env_lua["enable_lto"] == True:
    env_lua["AR"] = 'gcc-ar'
    env_lua["RANLIB"] = 'gcc-ranlib'

env_lua["wesnoth_lua_config"] = File("#/src/wesnoth_lua_config.h").rfile()
env_lua.Append(CCFLAGS = Split("-include $wesnoth_lua_config -Wno-deprecated-declarations"))

objs_lua = env_lua.Object(lua_sources)
for obj in objs_lua:
    env_lua.Depends(obj, env_lua["wesnoth_lua_config"])

libwesnoth_extras.extend(env_lua.Library("lua", objs_lua))

#
# Target declarations
#
#---start valid scons default_targets---#

def error_action(target, source, env):
    from SCons.Errors import UserError
    raise UserError, "Target disabled because its prerequisites are not met"

def WesnothProgram(env, target, source, can_build, **kw):
    if env["build"] == "optimized" and env["enable_lto"] == True:
        env["AR"] = 'gcc-ar'
        env["RANLIB"] = 'gcc-ranlib'
    
    if can_build:
        if env["build"] == "base":
            bin = env.Program(target, source, **kw)
        else:
            bin = env.Program("#/" + target + build_suffix, source, **kw)
        env.Alias(target, bin)
    else:
        bin = env.Alias(target, [], error_action)
        AlwaysBuild(bin)
    locals()[target] = bin
    Export(target)

for env in [test_env, client_env, env]:
    env.AddMethod(WesnothProgram)

wesnoth_objects = ["wesnoth.cpp", libwesnoth_extras, libwesnoth_core, libwesnoth,
                   libwesnoth_sdl, libwesnoth_extras, env["wesnoth_res"]]
if env["PLATFORM"] == 'darwin':
	wesnoth_objects.append("macosx/SDLMain.mm")
client_env.WesnothProgram("wesnoth", wesnoth_objects, have_client_prereqs)

#---wesnothd---
wesnothd_sources = GetSources("wesnothd")
env.WesnothProgram("wesnothd", wesnothd_sources + [libwesnoth_core, env["wesnothd_res"]], have_server_prereqs)

#---campaignd---
campaignd_sources = GetSources("campaignd")
env.WesnothProgram("campaignd", campaignd_sources + [libwesnoth_core], have_server_prereqs, OBJPREFIX = "campaignd_")

#---cutter---
cutter_sources = GetSources("cutter")
client_env.WesnothProgram("cutter", cutter_sources + [libwesnoth_core, libwesnoth_sdl, libwesnoth], have_client_prereqs, OBJPREFIX = "cutter_", LIBS = ["$LIBS", "png"])

#---exploder---
exploder_sources = GetSources("exploder")
client_env.WesnothProgram("exploder", exploder_sources + [libwesnoth_core, libwesnoth_sdl, libwesnoth], have_client_prereqs, OBJPREFIX = "exploder_", LIBS = ["$LIBS", "png"])

#---test---
test_sources = GetSources("test")
test = test_env.WesnothProgram("test", test_sources +  [libwesnoth_extras, libwesnoth_core, libwesnoth, libwesnoth_sdl, libwesnoth_extras], have_test_prereqs)
#---end valid scons default_targets---#

#---start invalid scons default_targets---#
#---schema_generator---
schema_generator_sources = GetSources("schema_generator")
client_env.WesnothProgram("schema_generator", schema_generator_sources + [libwesnoth_core], have_client_prereqs, OBJPREFIX = "schema_generator_")

#---schema_validator---
schema_validator_sources = GetSources("schema_validator")
client_env.WesnothProgram("schema_validator", schema_validator_sources + [libwesnoth_core], have_client_prereqs, OBJPREFIX = "schema_validator_")

#---wesmage---
wesmage_sources = GetSources("wesmage")
client_env.WesnothProgram("wesmage", wesmage_sources + [libwesnoth_core], have_client_prereqs, OBJPREFIX = "wesmage_", LIBS = ["$LIBS", "png"])

#---create_images---
create_images_sources = GetSources("create_images")
env.WesnothProgram("create_images", create_images_sources + [libwesnoth_core], have_server_prereqs, OBJPREFIX = "create_images_", LIBS = ["$LIBS", "png"])
#---end invalid scons default_targets---#
#---end of getting sources---

if env.get("have_autorevision"):
    game_config_env.Append(CPPDEFINES = 'LOAD_REVISION')

sources = []
if "TAGS" in COMMAND_LINE_TARGETS:
    sources = [ Glob(os.path.join(dir, pattern)) for dir in ["", "*", "*/*"] for pattern in ["*.cpp", "*.hpp"] ]

Export("sources")

# Local variables:
# mode: python
# end:
