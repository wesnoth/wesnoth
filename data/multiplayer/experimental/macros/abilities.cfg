#textdomain wesnoth-multiplayer

#define STR_USES_ATTACKS_NAME_1
_ "uses 1 attack"#enddef

#define STR_USES_ATTACKS_NAME_2
_ "uses 2 attacks"#enddef

#define STR_USES_ATTACKS_NAME_3
_ "uses 3 attacks"#enddef

#define STR_USES_ATTACKS_NAME_4
_ "uses 4 attacks"#enddef

#define STR_USES_ATTACKS_NAME_5
_ "uses 5 attacks"#enddef

#define STR_USES_ATTACKS_NAME_6
_ "uses 6 attacks"#enddef

#define STR_USES_ATTACKS_RESTRICT_1
_ "This attack uses 1 attack"#enddef

#define STR_USES_ATTACKS_RESTRICT_2
_ "This attack uses 2 attacks"#enddef

#define STR_USES_ATTACKS_RESTRICT_3
_ "This attack uses 3 attacks"#enddef

#define STR_USES_ATTACKS_RESTRICT_4
_ "This attack uses 4 attacks"#enddef

#define STR_USES_ATTACKS_RESTRICT_5
_ "This attack uses 5 attacks"#enddef

#define STR_USES_ATTACKS_RESTRICT_6
_ "This attack uses 6 attacks"#enddef

#define WEAPON_SPECIAL_USES_ATTACKS X
    [disable]
        id = uses_attacks
        name = {STR_USES_ATTACKS_NAME_{X}}
        description = {STR_USES_ATTACKS_RESTRICT_{X}}
        [filter_self]
            formula = "self.max_attacks < {X}"
        [/filter_self]
        active_on = offense
        [event]
            name = attack end
            id = uses_attacks
            first_time_only = no
            [filter_attack]
                special_id = uses_attacks
            [/filter_attack]
            [modify_unit]
                [filter]
                    x,y = $x1,$y1
                [/filter]
                [object]
                    [effect]
                        apply_to = max_attacks
                        increase = -$weapon.attacks_used
                    [/effect]
                    duration = turn
                [/object]
            [/modify_unit]
        [/event]
    [/disable]
#enddef

#define STR_VERSE_RESTRICT_1
    _ "This attack is the first verse of the Song of Sun Ascension, which progresses by one verse each turn this unit uses a song verse attack.

When the last verse is sung or the song sequence is broken due to not attacking for a turn, the song starts again from the first verse."#enddef

#define STR_VERSE_RESTRICT_2
    _ "This attack is the second verse of the Song of Sun Ascension, which progresses by one verse each turn this unit uses a song verse attack.

If this was the last verse or when the song sequence is broken due to not attacking for a turn, the song starts again from the first verse."#enddef

#define STR_VERSE_RESTRICT_3
    _ "This attack is the third verse of the Song of Sun Ascension, which progresses by one verse each turn this unit uses a song verse attack.

In the next turn, the song starts again from the first verse.

Using this song will also grant illuminates for three turns."#enddef

#define STR_VERSE_NAME_1
_ "first verse"#enddef

#define STR_VERSE_NAME_2
_ "second verse"#enddef

#define STR_VERSE_NAME_3
_ "third verse"#enddef

#define WEAPON_SPECIAL_SONG_VERSE_BASE MAX

    # param MAX is the total number of verses the unit has, needed for id

    [disable]
        id = song_with_{MAX}_verses
        [filter_self]
            formula = "self.wml_vars.current_verse > 1"
        [/filter_self]
        active_on = offense
        # Not listed in the help.
        # name = {STR_VERSE_NAME_1}
        description = {STR_VERSE_RESTRICT_1}
        # MAX is the number of attacks after which unit resets back to the first verse
        [event]
            name = attack end
            first_time_only = no
            id = song_verse_attack_{MAX}
            [filter_attack]
                special_id = song_with_{MAX}_verses
            [/filter_attack]
            [modify_unit]
                [filter]
                    find_in = unit
                [/filter]

                [set_variable]
                    name = attacked_this_turn
                    value = 1
                [/set_variable]
            [/modify_unit]
        [/event]
        [event]
            name = side turn
            first_time_only = no
            id = song_verse_side_turn_{MAX}
            [modify_unit]
                [filter]
                    side = $side_number
                    [has_attack]
                        special_id = song_with_{MAX}_verses
                    [/has_attack]
                [/filter]
                [set_variable]
                    name = attacked_this_turn
                    value = 0
                [/set_variable]
            [/modify_unit]
        [/event]
        [event]
            name = recruit, recall, post advance
            first_time_only = no
            id = song_verse_placed_{MAX}
            [filter]
                side = $side_number
                [has_attack]
                    special_id = song_with_{MAX}_verses
                [/has_attack]
            [/filter]
            [modify_unit]
                [filter]
                    find_in = unit
                [/filter]
                [set_variable]
                    name = current_verse
                    value = 1
                [/set_variable]
                [set_variable]
                    name = attacked_this_turn
                    value = 0
                [/set_variable]
            [/modify_unit]
        [/event]
        [event]
            name = side turn end
            first_time_only = no
            id = song_verse_main_{MAX}
            [store_unit]
                [filter]
                    side = $side_number
                    [has_attack]
                        special_id = song_with_{MAX}_verses
                    [/has_attack]
                [/filter]
                variable = verse_units
            [/store_unit]
            [foreach]
                array = verse_units
                [do]
                    [if]
                        [have_unit]
                            find_in = this_item
                            formula = "self.wml_vars.current_verse < {MAX}"
                        [/have_unit]
                        [then]
                            # this if is required to cover the case where unit has not been initialized (e.g. was debug-spawned) and attacked in the same turn
                            [if]
                                [variable]
                                    name = this_item.variables.current_verse
                                    equals = $empty
                                [/variable]
                                [then]
                                    [modify_unit]
                                        [filter]
                                            find_in = this_item
                                        [/filter]
                                        [set_variable]
                                            name = current_verse
                                            value = 2
                                        [/set_variable]
                                    [/modify_unit]
                                [/then]
                                [else]
                                    [modify_unit]
                                        [filter]
                                            find_in = this_item
                                        [/filter]
                                        [set_variable]
                                            name = current_verse
                                            add = 1
                                        [/set_variable]
                                    [/modify_unit]
                                [/else]
                            [/if]
                        [/then]
                        [else]
                            [modify_unit]
                                [filter]
                                    find_in = this_item
                                [/filter]
                                [set_variable]
                                    name = current_verse
                                    value = 1
                                [/set_variable]
                            [/modify_unit]
                        [/else]
                    [/if]
                    [modify_unit]
                        [filter]
                            find_in = this_item
                            formula = "self.wml_vars.attacked_this_turn != 1"
                        [/filter]
                        [set_variable]
                            name = current_verse
                            value = 1
                        [/set_variable]
                    [/modify_unit]
                [/do]
            [/foreach]
        [/event]
    [/disable]
#enddef

#define WEAPON_SPECIAL_SONG_VERSE VERSE MAX

    # param VERSE is the this attack should be active on
    # param MAX is the total number of verses the unit has, needed for id
    # example: {WEAPON_SPECIAL_SONG_VERSE 2 3} means this attack should be active on second verse out of three
    # don't set MAX to 1, use WEAPON_SPECIAL_SONG_VERSE_BASE instead to prevent an obscure error related to debug/script unit placement

    [disable]
        id = song_with_{MAX}_verses
        [filter_self]
            formula = "self.wml_vars.current_verse != {VERSE}"
        [/filter_self]
        # Not listed in the help.
        # name = {STR_VERSE_NAME_{VERSE}}
        description = {STR_VERSE_RESTRICT_{VERSE}}
    [/disable]
#enddef

#define ABILITY_SONG_VERSE_ILLUMINATES
    # Canned definition of the Illuminates ability to be included in an
    # [abilities] clause.
    [illuminates]
        id=illumination_song_verse
        value=25
        max_value=25
        cumulative=no
        # po: Displayed in the help
        name= _ "third verse illuminates"
        #textdomain wesnoth-help
        # For the unit, shorter string due to limited space in the sidebar
        female_name= _ "female^illuminates"
        female_name_inactive= _ "female^illuminates"
        #textdomain wesnoth-multiplayer
        female_name= _ "female^third verse illuminates"
        description= _ "When this ability is active after using the sun incarnate attack, this unit illuminates the surrounding area for three turns.

Any units adjacent to this unit will fight as if it were dusk when it is night, and as if it were day when it is dusk."
        # po: A similar string exists in the textdomain wesnoth-help
        special_note= _ "Illumination increases the lighting level in adjacent areas. This effect lasts for three turns after activation."
        affect_self=yes
        halo_image="halo/illuminates-aura.png~CS(50,20,-70)"
        [filter]
            [has_attack]
                special_id=sun_incarnate
            [/has_attack]
        [/filter]
        [event]
            name = attack_end
            first_time_only = no
            id = song_verse_illuminates
            [filter_attack]
                name = sun incarnate
            [/filter_attack]
            [object]
                id = song_$unit.underlying_id|_$turn_number
                [effect]
                    apply_to=attack
                    name=sun incarnate
                    [set_specials]
                        mode=append
                        [dummy]
                            id=sun_incarnate
                        [/dummy]
                    [/set_specials]
                [/effect]
                duration = scenario
            [/object]
            [event]
                name = "side $side_number turn $($turn_number + 3)"
                id = song_verse_illuminates_reset
                delayed_variable_substitution = no
                [remove_object]
                    object_id = song_$unit.underlying_id|_$turn_number
                [/remove_object]
            [/event]
        [/event]
    [/illuminates]
#enddef

#define WEAPON_SPECIAL_ONCE_PER_TURN ATTACK_NAME
    [disable]
        id = once_per_turn
        name = _ "once per turn"
        description = _ "This attack can be used offensively only once per turn"
        [filter_self]
            formula = "self.wml_vars.{ATTACK_NAME}_used > 0"
        [/filter_self]
        active_on = offense
        [event]
            name = attack end
            id = attack_once_per_turn
            first_time_only = no
            [filter_attack]
                special_id = once_per_turn
            [/filter_attack]
            [modify_unit]
                [filter]
                    find_in = unit
                [/filter]
                [set_variable]
                    name = $weapon.name|_used
                    value = 1
                [/set_variable]
            [/modify_unit]
        [/event]
        [event]
            name = turn end
            id = attack_once_per_turn_reset
            first_time_only = no
            [store_unit]
                [filter]
                    [has_attack]
                        special_id = once_per_turn
                    [/has_attack]
                [/filter]
                variable = opts_units
            [/store_unit]
            [foreach]
                array = opts_units
                variable = current_opts_unit
                [do]
                    [foreach]
                        array = current_opts_unit.attack
                        variable = possibly_opt_attack
                        [do]
                            [if]
                                [variable]
                                    name = possibly_opt_attack
                                    as_type = weapon
                                    formula = "index_of('once_per_turn', value.specials)!=-1"
                                [/variable]
                                [then]
                                    [modify_unit]
                                        [filter]
                                            find_in = current_opts_unit
                                        [/filter]
                                        [set_variable]
                                            name = $possibly_opt_attack.name|_used
                                            value = 0
                                        [/set_variable]
                                    [/modify_unit]
                                [/then]
                            [/if]
                        [/do]
                    [/foreach]
                [/do]
            [/foreach]
        [/event]
    [/disable]
#enddef

#define WEAPON_SPECIAL_NOVA
    [dummy]
        id = nova
        # po: weapon special
        name = _"nova"
        description= _ "This weapon, when used offensively, deals damage to all units adjacent to the caster when it hits." + "

" + _ "This attack is the third verse of the Song of Sun Ascension. After using it, the first verse is available in the next turn. Furthermore, invoking this attack will grant illumination for three turns."
        special_note=_ "This unit has wide-area attacks centered on the caster."
        active_on = offense
        [event]
            name = attacker_hits
            id = nova
            first_time_only = no
            [filter_attack]
                special_id = nova
            [/filter_attack]
            [harm_unit]
                [filter]
                    [not]
                        find_in = second_unit
                    [/not]
                    [filter_adjacent]
                        find_in = unit
                    [/filter_adjacent]
                [/filter]
                [filter_second]
                    find_in = unit
                [/filter_second]
                amount = $weapon.damage
                damage_type = $weapon.type
                alignment = $unit.alignment
                kill = yes
                experience = kill
                fire_event = yes
            [/harm_unit]
        [/event]
    [/dummy]
#enddef

#define WEAPON_SPECIAL_RAY
    [dummy]
        id = ray
        # po: weapon special
        name = _"ray"
        description= _ "This weapon, when used offensively, also deals damage to a unit behind the target." + "

" + _ "This is the second verse of the Song of Sun Ascension. It is available only when the first verse was sung in the previous turn. If this was the last verse, then the first verse will be available in the next turn."
        active_on = offense
        [event]
            name = attacker_hits
            id = ray_hits
            first_time_only = no
            [filter_attack]
                special_id = ray
            [/filter_attack]
            [harm_unit]
                [filter]
                    [filter_adjacent]
                        find_in = second_unit
                        formula = "
                            unit_at(direction_from(self.loc,caster.facing)) = other
                        where
                            caster = unit_at(direction_from(self.loc, self.facing))
                        "
                    [/filter_adjacent]
                [/filter]
                [filter_second]
                    find_in = unit
                [/filter_second]
                amount = $weapon.damage
                damage_type = $weapon.type
                alignment = $unit.alignment
                kill = yes
                experience = kill
                fire_event = yes
            [/harm_unit]
        [/event]
    [/dummy]
#enddef

#define ABILITY_TAILWIND X
    [tailwind]
        id = tailwind
        value = {X}
        [event]
            name=turn refresh
            first_time_only=no
            id=tailwind
            # This hardcodes that only tailwind+1 and tailwind+2 are supported, which simplifies the code to avoid them
            # stacking (so a unit adjacent to both a tailwind+1 and a tailwind+2 will only get +2 rather than +3).
            # If more levels should be supported, a loop can be added, but that will make the code more complex.
            [store_unit]
                [filter]
                    ability=tailwind
                    [filter_side]
                        [allied_with]
                            side=$side_number
                        [/allied_with]
                    [/filter_side]
                    [and]
                        # filter_wml is slow, which is why there's already an ability=tailwind filter before this
                        [filter_wml]
                            [abilities]
                                [tailwind]
                                    id=tailwind
                                    value=2
                                [/tailwind]
                            [/abilities]
                        [/filter_wml]
                    [/and]
                [/filter]
                variable=tailwind2_sources
            [/store_unit]
            [store_unit]
                [filter]
                    ability=tailwind
                    [filter_side]
                        [allied_with]
                            side=$side_number
                        [/allied_with]
                    [/filter_side]
                    [and]
                        # filter_wml is slow, which is why there's already an ability=tailwind filter before this
                        [filter_wml]
                            [abilities]
                                [tailwind]
                                    id=tailwind
                                    value=1
                                [/tailwind]
                            [/abilities]
                        [/filter_wml]
                    [/and]
                [/filter]
                variable=tailwind1_sources
            [/store_unit]
            [modify_unit]
                [filter]
                    side=$side_number
                    [filter_adjacent]
                        find_in=tailwind2_sources
                    [/filter_adjacent]
                [/filter]
                # Temporarily increase the max moves correspondingly, so the unit gets a green orb and
                # can rest heal next turn, because units only rest heal if their moves and max moves are
                # exactly equal at the start of the next turn.
                #
                # Without this object units only rest heal if the player moves them to reduce their
                # movement down to match the maximum.
                #
                # Using `duration=turn` means that the wrong max moves will show during the AI turn.
                # Rest healing mechanics work as normal - units rest heal if (and only if) they aren't
                # moved the previous turn.
                #
                # Using `duration=turn end` allows the unit to move 1 or 2 hexes and still rest heal.
                # When the object is removed at turn end, the moves remaining will be capped to the max,
                # so rest healing works.
                #
                # Remember to change the tailwind+1 object to match this one.
                [object]
                    duration=turn end
                    [effect]
                        apply_to=movement
                        increase=2
                    [/effect]
                [/object]
                moves="$($this_unit.moves + 2)"
            [/modify_unit]
            [modify_unit]
                [filter]
                    side=$side_number
                    [filter_adjacent]
                        find_in=tailwind1_sources
                    [/filter_adjacent]
                    [not]
                        [filter_adjacent]
                            find_in=tailwind2_sources
                        [/filter_adjacent]
                    [/not]
                [/filter]
                [object]
                    duration=turn end
                    [effect]
                        apply_to=movement
                        increase=1
                    [/effect]
                [/object]
                moves="$($this_unit.moves + 1)"
            [/modify_unit]
            {CLEAR_VARIABLE tailwind1_sources,tailwind2_sources}
        [/event]
    [/tailwind]
#enddef

#define STR_TAILWIND_RESTRICT_1
_ "At the start of the turn this unit increases movement points of surrounding units by +1"#enddef

#define STR_TAILWIND_RESTRICT_2
_ "At the start of the turn this unit increases movement points of surrounding units by +2"#enddef

#define TAILWIND_DESCRIPTION X
    [dummy]
        name = _ "tailwind +"+{X}
        description = {STR_TAILWIND_RESTRICT_{X}}
    [/dummy]
#enddef

#define ABILITY_SUPER_CURES
    [heals]
        value=12
        id=healing
        affect_allies=yes
        name= _ "heals +12"
        female_name= _ "female^heals +12"
        description= _ "This unit combines herbal remedies with magic to heal units more quickly than is normally possible on the battlefield.

A unit cared for by this healer may heal up to 12 HP per turn, or stop poison from taking effect for that turn.
A poisoned unit cannot be cured of its poison by a healer, and must seek the care of a village or a unit that can cure."
        affect_self=no
        poison=cured
        [affect_adjacent]
            [filter]
                [not]
                    status=dehydration_slowed_by_healer
                [/not]
            [/filter]
        [/affect_adjacent]
    [/heals]
#enddef

#define WEAPON_SPECIAL_SHOCK
    # Canned definition of the Shock ability to be included in a
    # [specials] clause.
    [attacks]
        id=shock
        name= _ "shock"
        description= _ "When this attack is used on offense, the opponent will retaliate with one less strike than normally, to a minimum of one strike."
        special_note=_"This unit’s melee attack can overwhelm the defenses of enemies, preventing them from retaliating as effectively."
        sub=1
        active_on=offense
        apply_to=opponent
        [filter_base_value]
            greater_than=1
        [/filter_base_value]
    [/attacks]
#enddef

#define ABILITY_DISENGAGE
    [dummy]
        id=disengage
        name= _ "disengage"
        female_name= _ "female^disengage"
        description= _ "If this unit doesn’t move before attacking, it will retain its movement points after the attack."
        special_note=_"This unit can move either before or after attacking."
        [event]
            name=attack end
            id=disengage_ability
            first_time_only=no
            [filter]
                ability=disengage
                formula = "self.moves<self.max_moves"
            [/filter]
            {VARIABLE unit.moves 0}
            [unstore_unit]
                variable=unit
                find_vacant=no
            [/unstore_unit]
        [/event]
    [/dummy]
#enddef

#define WEAPON_SPECIAL_DAZE
    [dummy]
        id=daze
        name= _ "daze"
        description= _ "When hit with this attack, an enemy suffers a 10% penalty both to their defense and chance to hit for one turn. Other specials that affect chance to hit (e.g. magical and marksman) take precedence over this special.

Magical attacks will still have a 70% chance to hit.
Marksman attacks are only affected if the chance to hit is greater than 60%."
        special_note=_"This unit can daze its enemies, reducing their accuracy and defense until they end a turn."
        [event]
            id=weapon_special_daze_event_2
            name=attacker hits
            first_time_only=no
            [filter_attack]
                special_id=daze
            [/filter_attack]
            [filter_second]
                [not]
                    [filter_wml]
                        [status]
                            dazed=yes
                        [/status]
                    [/filter_wml]
                [/not]
            [/filter_second]
            {VARIABLE second_unit.status.dazed yes}
            [unstore_unit]
                variable=second_unit
                find_vacant=no
                text= _ "dazed"
                female_text = _ "female^dazed"
                red,green,blue=196,196,128
            [/unstore_unit]
            [object]
                silent=yes
                duration=scenario
                [filter]
                    x,y=$x2,$y2
                    [not]
                        ability=self_dazed
                    [/not]
                [/filter]
                [effect]
                    apply_to=new_ability
                    [abilities]
                        [chance_to_hit]
                            id=enemy_dazed
                            name=""
                            description=""
                            add=10
                            apply_to=opponent
                            [filter_student]
                                [filter_wml]
                                    [status]
                                        dazed=yes
                                    [/status]
                                [/filter_wml]
                            [/filter_student]
                            [filter_opponent]
                                [filter_weapon]
                                    [not]
                                        special_id=magical
                                    [/not]
                                    [not]
                                        special_id_active=marksman
                                    [/not]
                                [/filter_weapon]
                            [/filter_opponent]
                        [/chance_to_hit]
                        [chance_to_hit]
                            id=enemy_dazed
                            name=""
                            description=""
                            add=10
                            apply_to=opponent
                            [filter_base_value]
                                greater_than_equal_to=60
                            [/filter_base_value]
                            [filter_student]
                                [filter_wml]
                                    [status]
                                        dazed=yes
                                    [/status]
                                [/filter_wml]
                            [/filter_student]
                            [filter_opponent]
                                [filter_weapon]
                                    special_id_active=marksman
                                [/filter_weapon]
                            [/filter_opponent]
                        [/chance_to_hit]
                        [chance_to_hit]
                            id=self_dazed
                            name=""
                            description=""
                            sub=10
                            [filter_student]
                                [filter_weapon]
                                    [not]
                                        special_id=magical
                                    [/not]
                                    [not]
                                        special_id_active=marksman
                                    [/not]
                                [/filter_weapon]
                                [filter_wml]
                                    [status]
                                        dazed=yes
                                    [/status]
                                [/filter_wml]
                            [/filter_student]
                        [/chance_to_hit]
                        [chance_to_hit]
                            id=self_dazed
                            name=""
                            description=""
                            sub=10
                            [filter_base_value]
                                greater_than_equal_to=70
                            [/filter_base_value]
                            [filter_student]
                                [filter_weapon]
                                    special_id_active=marksman
                                [/filter_weapon]
                                [filter_wml]
                                    [status]
                                        dazed=yes
                                    [/status]
                                [/filter_wml]
                            [/filter_student]
                        [/chance_to_hit]
                    [/abilities]
                [/effect]
            [/object]
        [/event]
        [event]
            id=weapon_special_daze_event_3
            name=side turn
            first_time_only=no
            [event]
                name=side turn
                delayed_variable_substitution=no
                #{DEBUG_MSG "side $|side_number turn started, clearing daze from side $side_number units"}
                [modify_unit]
                    [filter]
                        side=$side_number
                        [filter_wml]
                            [status]
                                dazed=yes
                            [/status]
                        [/filter_wml]
                    [/filter]
                    [status]
                        dazed=no
                    [/status]
                [/modify_unit]
            [/event]
        [/event]
    [/dummy]
#enddef
