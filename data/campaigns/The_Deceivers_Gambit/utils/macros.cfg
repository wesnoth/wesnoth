#textdomain wesnoth-tdg

#define ACHIEVE ID
    [set_achievement]
        content_for=the_deceivers_gambit
        id=tdg_{ID}
    [/set_achievement]
#enddef

# "C" stands for "conditional"
#define GENERIC_UNITC SIDE TYPE X Y WML
    {VARIABLE generic_unitc {TYPE}}
    {IF} {VARIABLE_CONDITIONAL generic_unitc not_equals "none"}
    {THEN(  {GENERIC_UNIT {SIDE} {TYPE} {X} {Y}} {WML}  )}
    {/IF}
    {CLEAR_VARIABLE generic_unitc}
#enddef
#define NAMED_UNITC SIDE TYPE X Y ID NAME WML
    {VARIABLE named_unitc {TYPE}}
    {IF} {VARIABLE_CONDITIONAL named_unitc not_equals "none"}
    {THEN( {NAMED_UNIT {SIDE} {TYPE} {X} {Y} {ID} {NAME} ()} {WML} )}
    {/IF}
    {CLEAR_VARIABLE named_unitc}
#enddef

#define REFRESH_FOG
    [reset_fog]
        reset_view=yes
    [/reset_fog]
    [redraw]
        clear_shroud=yes
    [/redraw]
#enddef

#define REVEAL LOCS
    [remove_shroud]
        side=1
        {LOCS}
    [/remove_shroud]
    [lift_fog]
        {LOCS}
    [/lift_fog]
#enddef

#define FIRE_EVENT NAME
    #
    [fire_event]
        name={NAME}
    [/fire_event]
#enddef

#define VALUE WML
    #
    [value]
        {WML}
    [/value]
#enddef

#define ANIMATE
    [+unit]
        animate=yes
    [/unit]
#enddef

#define SOUND FILE
    #
    [sound]
        name={FILE}
    [/sound]
#enddef

#define DELAY TIME
    [delay]
        time={TIME}
    [/delay]
#enddef

#define SCREEN_FADER RGB ALPHA DURATION
    [screen_fade]
        red,green,blue={RGB}
        alpha={ALPHA}
        duration={DURATION}
    [/screen_fade]
#enddef

#define MODIFY_TERRAIN_DELAY MS TERRAIN X Y
    {DELAY {MS}}
    {MODIFY_TERRAIN {TERRAIN} {X} {Y}}
    [redraw]
    [/redraw]
#enddef

# #define ACHIEVE ID
#     #
#     [set_achievement]
#         content_for= TODO - set The Deceiver's Gambait achievement content group
#         id={ID}
#     [/set_achievement]
#     #
# #enddef

#define REMOVE_OBJECT OBJECT_ID FILTER_WML
    #
    [remove_object]
        object_id={OBJECT_ID}
        {FILTER_WML}
    [/remove_object]
#enddef
#define GIVE_OBJECT_TO FLT WML
    #
    [modify_unit]
        {FILTER {FLT}}
        [object]
            {WML}
        [/object]
    [/modify_unit]
    #
#enddef
#define EFFECT APPLY_TO WML
    #
    [effect]
        apply_to={APPLY_TO}
        {WML}
    [/effect]
    #
#enddef

# primitive macros for fading music. Only supports durations in increments of 10ms
#define FADE_MUSIC_IN DURATION
    #
    {VARIABLE fade_duration_remaining {DURATION}}
    [while] {VARIABLE_CONDITIONAL fade_duration_remaining greater_than 0}
        [do]
            {VARIABLE_OP fade_duration_remaining sub 5}
            {VARIABLE volume 100}
            {VARIABLE_OP volume multiply $fade_duration_remaining}
            {VARIABLE_OP volume divide {DURATION}}
            {VARIABLE volume "$(100-$volume)"}
            [volume]
                music=$volume
            [/volume]
            {DELAY 5}
        [/do]
    [/while]
    {CLEAR_VARIABLE fade_duration_remaining,volume}
    [volume]
        music=100 # just in case
    [/volume]
    #
#enddef
#define FADE_MUSIC_OUT DURATION
    #
    {VARIABLE fade_duration_remaining {DURATION}}
    [while] {VARIABLE_CONDITIONAL fade_duration_remaining greater_than 0}
        [do]
            {VARIABLE_OP fade_duration_remaining sub 5}
            {VARIABLE volume 100}
            {VARIABLE_OP volume multiply $fade_duration_remaining}
            {VARIABLE_OP volume divide {DURATION}}
            [volume]
                music=$volume
            [/volume]
            {DELAY 5}
        [/do]
    [/while]
    {CLEAR_VARIABLE fade_duration_remaining,volume}
    [volume]
        music=0 # just in case
    [/volume]
    #
#enddef

#define VARIABLES_SPLIT NAME KEY SEPARATOR LIST
    #
    [set_variables]
        name={NAME}
        [split]
            key={KEY}
            separator={SEPARATOR}
            list={LIST}
        [/split]
    [/set_variables]
    #
#enddef

#define KILL FILTER
#arg ANIMATE
no#endarg
#arg FIRE_EVENT
no#endarg
    [kill]
        {FILTER}
        animate={ANIMATE}
        fire_event={FIRE_EVENT}
    [/kill]
#enddef

#define KILL_COUNT COUNT FLT
#arg ANIMATE
no#endarg
#arg FIRE_EVENT
no#endarg
    [store_unit]
        {FILTER {FLT}}
        kill,variable=no,KILL_COUNT_stored_units
    [/store_unit]
    {VARIABLE KILL_COUNT_i 0}
    [foreach]
        array,variable=KILL_COUNT_stored_units,KILL_COUNT_unit
        [do]
            {IF} {VARIABLE_CONDITIONAL i less_than {COUNT}} {THEN(
                {VARIABLE_OP i add 1}
                [kill]
                    id=$KILL_COUNT_unit.id
                    animate={ANIMATE}
                    fire_event={FIRE_EVENT}
                [/kill]
            )} {/IF}
        [/do]
    [/foreach]
    {CLEAR_VARIABLE KILL_COUNT_stored_units,KILL_COUNT_i}
#enddef

# DISABLED because this didn't work very well

# #undef MOVE_UNIT
# #define MOVE_UNIT FLT X Y
# #arg NEAREST_BY
# movement_cost#endarg
#     #--------------------
#     # GET DESTINATION
#     #--------------------
#     {STORE_UNIT_VAR {FLT} x move_unit_old_x}
#     {STORE_UNIT_VAR {FLT} y move_unit_old_y}
#     {TELEPORT_UNIT {FLT} {X} {Y}}
#     {STORE_UNIT_VAR {FLT} x move_unit_new_x}
#     {STORE_UNIT_VAR {FLT} y move_unit_new_y}
#     {TELEPORT_UNIT {FLT} $move_unit_old_x $move_unit_old_y}
#
#     #--------------------
#     # PATH TO DESTINATION
#     #--------------------
#     [find_path]
#         [traveler]
#             id=Deoran
#         [/traveler]
#         [destination]
#             x,y=35,9
#         [/destination]
#         allow_multiple_turns=yes
#         check_teleport=no
#         check_zoc=no
#         nearest_by={NEAREST_BY}
#     [/find_path]
#
#     #--------------------
#     # TELEPORT IF NO PATH
#     #--------------------
#     {IF} {VARIABLE_CONDITIONAL path.hexes equals 0} {THEN(
#         {TELEPORT_UNIT {FLT} $move_unit_new_x $move_unit_new_y}
#     )}
#
#     #--------------------
#     # MOVE IF PATH EXISTS
#     #--------------------
#     {ELSE(
#         [store_unit]
#             {FILTER {FLT}}
#             kill,variable=yes,move_unit_stored_unit
#         [/store_unit]
#
#         [set_variable]
#             name=steps_x
#             [join]
#                 variable,remove_empty,key=path.step,yes,x
#                 separator=,
#             [/join]
#         [/set_variable]
#         [set_variable]
#             name=steps_y
#             [join]
#                 variable,remove_empty,key=path.step,yes,y
#                 separator=,
#             [/join]
#         [/set_variable]
#
#         # have to use a fake unit, in case we're moving directly through/over another unit.
#         [move_unit_fake]
#             x=$steps_x
#             y=$steps_y
#             type=$move_unit_stored_unit.type
#             side=$move_unit_stored_unit.side
#             gender=$move_unit_stored_unit.gender
#             variation=$move_unit_stored_unit.variation
#         [/move_unit_fake]
#
#         [unstore_unit]
#             variable=move_unit_stored_unit
#             x,y=$move_unit_new_x,$move_unit_new_y
#         [/unstore_unit]
#     )} {/IF}
#
#     {CLEAR_VARIABLE path}
#     {CLEAR_VARIABLE move_unit_old_x,move_unit_old_y}
#     {CLEAR_VARIABLE move_unit_new_x,move_unit_new_y}
# #enddef

# how many levels of units are in our army? (plus gold/20)
#define CALCULATE_ARMY_STRENGTH SIDE
    {VARIABLE army_strength 0}

    [store_unit]
        [filter]
            {NOT x,y=recall,recall}
            side={SIDE} # leave {SIDE} on its own line, in case we have multiple sides (e.g. 2,3,4)
            level=3-99
        [/filter]
        kill,variable,mode=no,army,always_clear
    [/store_unit]
    {VARIABLE army_count $army.length}
    {VARIABLE_OP army_count multiply 3}
    {VARIABLE_OP army_strength add $army_count}

    [store_unit]
        [filter]
            {NOT x,y=recall,recall}
            side={SIDE}
            level=2
        [/filter]
        kill,variable,mode=no,army,always_clear
    [/store_unit]
    {VARIABLE army_count $army.length}
    {VARIABLE_OP army_count multiply 2}
    {VARIABLE_OP army_strength add $army_count}

    [store_unit]
        [filter]
            {NOT x,y=recall,recall}
            side={SIDE}
            level=1
        [/filter]
        kill,variable,mode=no,army,always_clear
    [/store_unit]
    {VARIABLE army_count $army.length}
    {VARIABLE_OP army_count multiply 1}
    {VARIABLE_OP army_strength add $army_count}

    [store_unit]
        [filter]
            {NOT x,y=recall,recall}
            side={SIDE}
            level=0
        [/filter]
        kill,variable,mode=no,army,always_clear
    [/store_unit]
    {VARIABLE army_count $army.length}
    {VARIABLE_OP army_count multiply 0.5}
    {VARIABLE_OP army_strength add $army_count}

    [store_gold]
        side={SIDE} # if the user provides multiple sides, only the first side's gold is counted
        variable=gold
    [/store_gold]
    {IF} {VARIABLE_CONDITIONAL gold greater_than 0} {THEN(
        {VARIABLE_OP gold divide 20} # count 20 gold as roughly 1 unit-level of army strength
        {VARIABLE_OP army_strength add $gold}
    )} {/IF}

    {CLEAR_VARIABLE army,army_count,gold} # not army_strength, that's our return value
#enddef

#define IF_FOUND
    {IF}
    [variable]
        name=found_unit.length
        greater_than=0
    [/variable]
#enddef

#define IF_UNFOUND
    {IF}
    [not]
        [variable]
            name=found_unit.length
            greater_than=0
        [/variable]
    [/not]
#enddef

# copied (with modifications) from https://wiki.wesnoth.org/WML_Utilities
#define FIND_NEARBY FILTER X Y LIMIT
    # Does a search for a nearby unit that matches the given filter.
    # Basically just looks for such a unit with increasing radius until it finds at least one
    [clear_variable]
        name=found_unit
    [/clear_variable]
    [set_variable]
        name=search_radius
        value=0
    [/set_variable]
    [while]
        [not]
            [variable]
                name=found_unit.length
                greater_than=0
            [/variable]
        [/not]
        [and]
            [variable]
                name=search_radius
                less_than_equal_to={LIMIT}
            [/variable]
        [/and]
        [do]
            #             {DEBUG "Searching depth $search_radius around ({X}, {Y})..."}
            [store_unit]
                variable=found_unit
                [filter]
                    {FILTER}
                    [filter_location]
                        x,y={X},{Y}
                        radius=$search_radius
                    [/filter_location]
                [/filter]
            [/store_unit]
            #             {DEBUG "...found $found_unit.length units."}
            [set_variable]
                name=search_radius
                add=1
            [/set_variable]
        [/do]
    [/while]
#enddef

#define SPAWN_IF_UNFOUND SIDE TYPE X Y
    [set_variable]
        name=randx
        rand={X}
    [/set_variable]
    [set_variable]
        name=randy
        rand={Y}
    [/set_variable]

    {IF_UNFOUND}
    [then]
        {NAMED_UNIT {SIDE} ({TYPE}) $randx $randy spawned () ()} {ANIMATE}
        [store_unit]
            variable=found_unit
            [filter]
                id=spawned
            [/filter]
        [/store_unit]
    [/then]
    {ENDIF}

    {CLEAR_VARIABLE randx}
    {CLEAR_VARIABLE randy}
#enddef

#define CLEANUP_SEARCH
    # Clears variables involved in searching (the FIND_NEARBY macro). Put this
    # in your name=victory,defeat tag to clean up if you use FIND_NEARBY within
    # a scenario.
    [clear_variable]
        name=found_unit, search_radius
    [/clear_variable]
#enddef

#define IMMOBILE
    [+unit]
        max_moves=0
    [/unit]
#enddef
#define PASSABLE
    [+unit]
        passable=yes
    [/unit]
#enddef

#define MOVES MAX_MOVES
    [+unit]
        max_moves={MAX_MOVES}
    [/unit]
#enddef

#define HITPOINTS HP
    [+unit]
        hitpoints={HP}
    [/unit]
#enddef

#define EXPERIENCE XP
    [+unit]
        experience={XP}
    [/unit]
#enddef

#define SET_EXPERIENCE_FRACTION FLT XP_FRACTION
    [modify_unit]
        [filter]
            {FLT}
        [/filter]
        experience="$( $this_unit.max_experience * {XP_FRACTION} )"
    [/modify_unit]
#enddef

#define STATUS WML
    [+unit]
        [status]
            {WML}
        [/status]
    [/unit]
#enddef

#define GENDER GND
    [+unit]
        gender={GND}
    [/unit]
#enddef

#define NAME UNITNAME
    [+unit]
        name={UNITNAME}
    [/unit]
#enddef

#define ROLE ROLENAME
    [+unit]
        role={ROLENAME}
    [/unit]
#enddef

#define MODIFICATIONS WML
    #
    [modifications]
        {WML}
    [/modifications]
#enddef

#define ADD_MODIFICATION WML
    [+unit]
        [modifications]
            {WML}
        [/modifications]
    [/unit]
#enddef

#define MOVE_STORED_UNIT VAR MOVEX MOVEY
    [set_variable]
        name={VAR}.x
        add={MOVEX}
    [/set_variable]
    [set_variable]
        name={VAR}.y
        add={MOVEY}
    [/set_variable]
#enddef

#define SAY_IF_NOT_SUMMON UNIT MESSAGE
    # special voicelines for summons
    {IF}{VARIABLE_CONDITIONAL {UNIT}.id equals familiar}
    {OR({VARIABLE_CONDITIONAL {UNIT}.type equals "Mudcrawler"})}
    {OR({VARIABLE_CONDITIONAL {UNIT}.type equals "Giant Mudcrawler"})}
    {OR({VARIABLE_CONDITIONAL {UNIT}.type equals "Fire Guardian"})}
    {OR({VARIABLE_CONDITIONAL {UNIT}.type equals "Fire Wraith"})}
    {THEN(
        {IF} {VARIABLE_CONDITIONAL {UNIT}.id equals familiar}
        {THEN(
            [message]
                speaker={UNIT}
                message=_"Kraa!"
            [/message]
        )} {/IF}

        {IF}{VARIABLE_CONDITIONAL {UNIT}.type equals "Mudcrawler"}
        {OR({VARIABLE_CONDITIONAL {UNIT}.type equals "Giant Mudcrawler"})}
        {THEN(
            [message]
                speaker={UNIT}
                message=_"Glob glob glob."
            [/message]
        )} {/IF}

        {IF}{VARIABLE_CONDITIONAL {UNIT}.type equals "Fire Guardian"}
        {OR({VARIABLE_CONDITIONAL {UNIT}.type equals "Fire Wraith"})}
        {THEN(
            [message]
                speaker={UNIT}
                message=_"Fsss crackle hiss."
            [/message]
        )} {/IF}

        [message]
            speaker=Delfador
            message={MESSAGE}
        [/message]
    )}

    # otherwise, the regular unit gives the message
    {ELSE(
        [message]
            speaker={UNIT}
            message={MESSAGE}
        [/message]
    )} {/IF}
#enddef

#define GOLD_PICKUP X Y IMAGE AMOUNT LABEL MESSAGE
    {PLACE_IMAGE {IMAGE} {X} {Y}}
    {SET_LABEL {X} {Y} {LABEL}}
    [event]
        name=moveto {FILTER side,x,y=1,{X},{Y}}
        id=gold_pickup_{X}_{Y} # so we can remove this
        {SAY_IF_NOT_SUMMON unit {MESSAGE}}
        {SOUND gold.ogg}
        [gold]
            side,amount=1,{AMOUNT}
        [/gold]
        {REMOVE_IMAGE $unit.x $unit.y}
        {REMOVE_LABEL {X} {Y}}
    [/event]
#enddef

#-------------------
# GLOBAL VARIABLE MACROS
#-------------------
#define GLOBAL_VARIABLE_TO_LOCAL GLOBAL LOCAL
    [get_global_variable]
        namespace=TheDeceiversGambit
        from_global={GLOBAL}
        to_local={LOCAL}
        side=1
    [/get_global_variable]
#enddef

#define LOCAL_VARAIBLE_TO_GLOBAL LOCAL GLOBAL
    [set_global_variable]
        namespace=TheDeceiversGambit
        from_local={LOCAL}
        to_global={GLOBAL}
        side=1
        immediate=yes
    [/set_global_variable]
#enddef

#define BR

#enddef
