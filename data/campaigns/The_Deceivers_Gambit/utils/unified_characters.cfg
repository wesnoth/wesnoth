#textdomain wesnoth-tdg

# need to put this in each scenario, since it isn't compatible with [campaign]
# similar to darkred, but with a different minimap color. Used for wesnoth's army
#define DEFINE_WESRED
    [color_range]
        id=wesred
        rgb=8A0808,FFFFFF,000000,BB0000
    [/color_range]
#enddef

#define SINGLEUNITWML_DELFADOR
    side,id,name,profile=1,Delfador,_"Delfador",portraits/younger_delfador.webp
    canrecruit=yes
    [modifications]
        [trait]
            #textdomain wesnoth-help
            id=loyal_dummy
            name=_"loyal"
            description=_"Zero upkeep."
        [/trait]
        [trait]
            id=intelligent_dummy
            name=_"intelligent"
            help_text= _ "Intelligent units require 20% less experience than usual to advance."
            #textdomian wesnoth-tdg
        [/trait]
        [object]
            [effect]
                apply_to=image_mod
                {FILTER level=3-99}
                add=RC(magenta>purple)
            [/effect]
        [/object]
    [/modifications]
    [variables]
        disable_stronger_amlas=yes # Delfador can't advance, so don't play the "explain stronger AMLAs" message when he reaches max XP
    [/variables]
#enddef
#define DELFADOR_EARLY_RECRUIT
Mage,Spearman,Bowman#enddef
#define DELFADOR_MIDDLE_RECRUIT
Mage,Spearman,Bowman,Heavy Infantryman,Fencer#enddef
#define DELFADOR_BANDIT_RECRUIT
Footpad,Thief,Rogue Mage#enddef
#define DELFADOR_CAVALRY_RECRUIT
Cavalryman,Horseman#enddef

#define SINGLEUNITWML_METHOR
    type,id,name,profile=Mage of Light,Methor,_"Methor",portraits/methor.webp
    [modifications]
        {TRAIT_LOYAL_HERO} {TRAIT_STRONG}
        {TEAM_COLOR_OVERRIDE () white}
    [/modifications]
#enddef
#define SINGLEUNITWML_METHOR_OLD
    type,id,name,profile=Mage of Light,Methor,_"Methor",portraits/methor-old.webp
    [modifications]
        {TRAIT_LOYAL_HERO} {TRAIT_AGED}
        {TEAM_COLOR_OVERRIDE () white}
    [/modifications]
#enddef
#define SINGLEUNITWML_DEORAN
    type,id,name=Ambassador,Deoran,_"Deoran"
    [modifications]
        {TRAIT_LOYAL_HERO} {TRAIT_INTELLIGENT}
        {TEAM_COLOR_OVERRIDE () green}
    [/modifications]
    profile=portraits/deoran-old.webp
#enddef

#define SINGLEUNITWML_ARAND
    #
    type,id,name,profile=Prince of Wesnoth,Arand,_"Arand",portraits/humans/marshal-2.webp
    canrecruit=yes
    [modifications]
        {TRAIT_INTELLIGENT} {TRAIT_QUICK}
        #         {TEAM_COLOR_OVERRIDE () purple} # looks kinda funny; wesred will work fine
    [/modifications]
#enddef
#define SINGLEUNITWML_ASHEVIERE
    #
    type,id,name=Queen,Asheviere,_"Asheviere"
    [modifications]
        {TRAIT_QUICK} {TRAIT_INTELLIGENT}
        {TRAIT_LOYAL_HERO_NOSLOT}
    [/modifications]
    profile=portraits/asheviere-young.webp
#enddef
#define SINGLEUNITWML_ELDRED
    #
    type,id,name,profile=Crown Prince,Eldred,_"Eldred",portraits/eldred.webp
    [modifications]
        {TRAIT_RESILIENT} {TRAIT_INTELLIGENT}
        {TRAIT_LOYAL_HERO_NOSLOT}
        {TEAM_COLOR_OVERRIDE () purple}
    [/modifications]
#enddef
#define SINGLEUNITWML_ELDRED_UNARMED
    #
    type,id,name,profile=Unarmed Eldred,Eldred,_"Eldred",portraits/eldred.webp
    [modifications]
        {TRAIT_RESILIENT} {TRAIT_INTELLIGENT}
        {TRAIT_LOYAL_HERO_NOSLOT}
        {TEAM_COLOR_OVERRIDE () purple}
    [/modifications]
#enddef

#define SINGLEUNITWML_LIONEL
    #
    type,id,name,profile=General,Lionel,_"Lionel",portraits/lionel.webp
    canrecruit=yes
    [modifications]
        {TRAIT_QUICK} {TRAIT_STRONG}
        {TEAM_COLOR_OVERRIDE () orange}
    [/modifications]
#enddef
#define SINGLEUNITWML_LIONEL_OLD
    {SINGLEUNITWML_LIONEL}
    profile=portraits/lionel-old.webp
#enddef

#define SINGLEUNITWML_MADDOCK
    #
    type,id,name,profile=Lord of Elensefar,Maddock,_"Lord Maddock",portraits/maddock.webp
    canrecruit=yes
    [modifications]
        {TRAIT_INTELLIGENT} {TRAIT_RESILIENT}
        {TEAM_COLOR_OVERRIDE () blue}
    [/modifications]
#enddef
#define SINGLEUNITWML_DOMMEL
    type,id,name,profile=General,Dommel,_"Colonel Dommel",portraits/dommel.webp
    canrecruit=yes
    [modifications]
        {TRAIT_STRONG} {TRAIT_RESILIENT}
        {TEAM_COLOR_OVERRIDE () teal}
    [/modifications]
#enddef
#define SINGLEUNITWML_KESTREL
    #
    type,id,name=Royal Guard,Kestrel,_"Captain Kestrel"
    [modifications]
        {TRAIT_RESILIENT} {TRAIT_INTELLIGENT}
        {TEAM_COLOR_OVERRIDE () gold}
    [/modifications]
#enddef
#define SINGLEUNITWML_OMARANTH
    #
    type,id,name=Armageddon Drake,Omaranth,_"Omaranth"
    side=2
    [modifications]
        {TRAIT_FEARLESS} {TRAIT_STRONG}
        {TEAM_COLOR_OVERRIDE () gold}
        [object]
            {EFFECT overlay add=misc/leader-crown.png}
            {EFFECT attack increase_damage={ON_DIFFICULTY4 -6 -3 -0 -0}} # affects both melee and ranged
            {EFFECT hitpoints heal_full,increase_total=yes,{ON_DIFFICULTY4 -50 -25 0 0}}

            # change animations so he's permanently flying (flying anim looks cool, and isn't distracting when there's only 1 drake)
            {EFFECT new_animation (
                [standing_anim]
                    base_score=99
                    {FRAME image="units/drakes/armageddon-fly-[1~5,4].png:100"}
                    {FRAME image="units/drakes/armageddon-fly-[3,2]-upstroke.png:100"}
                [/standing_anim]
            )}
        [/object]
    [/modifications]
#enddef
#define SINGLEUNITWML_MALAL
    #
    type={ON_DIFFICULTY4 "Dark Sorcerer" "Necromancer" "Necromancer" "Necromancer"}
    id,name=Iliah-Malal,_"Iliah-Malal"
    side=2
    [modifications]
        {TRAIT_INTELLIGENT} {TRAIT_STRONG}
        {TEAM_COLOR_OVERRIDE () white}
        [object]
            {EFFECT overlay add=misc/leader-crown.png}
            {EFFECT new_animation (
                [animation]
                    apply_to=fakerecruit # "flag=recruiting" doesn't work, because it filters by undead
                    start_time=-300
                    [frame]
                        image="units/undead-necromancers/necromancer-magic-[1,2].png:75"
                    [/frame]
                    [frame]
                        image="units/undead-necromancers/necromancer-magic-3.png"
                        halo=halo/undead/black-magic-[1~5].png:[75*4,50]
                    [/frame]
                    sound_start_time=-75
                    [sound_frame]
                        sound=magic-dark.ogg
                    [/sound_frame]
                    [frame]
                        image="units/undead-necromancers/necromancer-magic-[2,1].png:50"
                    [/frame]
                    [frame]
                        image="units/undead-necromancers/necromancer.png:1"
                    [/frame]
                [/animation]
            )}
        [/object]
    [/modifications]
#enddef

#define SINGLEUNITWML_GARARD
    #
    type,id,name=King of Wesnoth,Garard,_"Garard II"
    canrecruit=yes
    [modifications]
        {TRAIT_FEARLESS} {TRAIT_STRONG}
        {TEAM_COLOR_OVERRIDE () purple}
    [/modifications]
    profile=portraits/garard.webp
#enddef
#define SINGLEUNITWML_GARARD_OLD
    {SINGLEUNITWML_GARARD}
    profile=portraits/garard-old.webp
#enddef

#define INVULNERABLE_GARARD_OBJECT CTH ID
    {GIVE_OBJECT_TO id={ID} (id=cth_invulnerable_garard {EFFECT new_ability ([abilities]
    [chance_to_hit]
        id=forced_cth_invulnerable_garard # I think id is mandatory
        value={CTH}
        cumulative=no
        affect_self=yes
        overwrite_specials=both_sides
        [overwrite]
            priority=1000
        [/overwrite]
    [/chance_to_hit]
[/abilities])})}
[event]
    name=attack end
    {REMOVE_OBJECT cth_invulnerable_garard ()}
[/event]
#enddef
#define INVULNERABLE_GARARD
    # this doesn't make garard COMPLETELY unkillable (and it does nothing against poison), but it does make him a lot stronger, especially when on low hp
    # meant to be used in situations where he's charging at the enemy, to allow him to spearhead a push without risking his death
    [event]
        name,first_time_only=attack,no
        {FILTER id=Garard}
        {FILTER_CONDITION({HAVE_UNIT( id,formula="(self.hitpoints > self.max_hitpoints*1/2)" )})}
        {INVULNERABLE_GARARD_OBJECT 40 $second_unit.id}
    [/event]
    [event]
        name,first_time_only=attack,no
        {FILTER_SECOND id=Garard}
        {FILTER_CONDITION({HAVE_UNIT( id,formula=Garard,"(self.hitpoints > self.max_hitpoints*1/2)" )})}
        {INVULNERABLE_GARARD_OBJECT 40 $unit.id}
    [/event]

    [event]
        name,first_time_only=attack,no
        {FILTER id=Garard}
        {FILTER_CONDITION({HAVE_UNIT( id,formula=Garard,"(self.hitpoints <= self.max_hitpoints*1/2)" )})}
        {INVULNERABLE_GARARD_OBJECT 20 $second_unit.id}
    [/event]
    [event]
        name,first_time_only=attack,no
        {FILTER_SECOND id=Garard}
        {FILTER_CONDITION({HAVE_UNIT( id,formula=Garard,"(self.hitpoints <= self.max_hitpoints*1/2)" )})}
        {INVULNERABLE_GARARD_OBJECT 20 $unit.id}
    [/event]

    # make Garard unusually accurate; let him feel powerful
    [event]
        name=side turn
        {FORCE_CHANCE_TO_HIT id=Garard () 70 ()}
    [/event]
#enddef

#define RESTORE_METHOR
    {IF} {VARIABLE_CONDITIONAL stored_methor.length greater_than 0} {THEN(
        [store_unit]
            {FILTER id=Methor}
            variable=tmp_methor
        [/store_unit]
        {VARIABLE stored_methor.x $tmp_methor.x}
        {VARIABLE stored_methor.y $tmp_methor.y}
        {VARIABLE stored_methor.side $tmp_methor.side}
        {VARIABLE stored_methor.facing $tmp_methor.facing}
        {VARIABLE stored_methor.canrecruit $tmp_methor.canrecruit}
        #        {VARIABLE stored_methor.hitpoints $tmp_methor.hitpoints}
        {VARIABLE stored_methor.status.poisoned no}
        {VARIABLE stored_methor.status.slowed no}
        {VARIABLE stored_methor.profile $tmp_methor.profile}
        [unstore_unit]
            variable=stored_methor
        [/unstore_unit]
        {FULL_HEAL id=Methor}
        {CLEAR_VARIABLE stored_methor,tmp_methor}
    )} {/IF}
#enddef
#define RESTORE_GARARD
    {IF} {VARIABLE_CONDITIONAL stored_garard.length greater_than 0} {THEN(
        [store_unit]
            {FILTER id=Garard}
            variable=tmp_garard
        [/store_unit]
        {VARIABLE stored_garard.x $tmp_garard.x}
        {VARIABLE stored_garard.y $tmp_garard.y}
        {VARIABLE stored_garard.side $tmp_garard.side}
        {VARIABLE stored_garard.facing $tmp_garard.facing}
        {VARIABLE stored_garard.canrecruit $tmp_garard.canrecruit}
        #        {VARIABLE stored_garard.hitpoints $tmp_garard.hitpoints}
        {VARIABLE stored_garard.status.poisoned no}
        {VARIABLE stored_garard.status.slowed no}
        {VARIABLE stored_garard.profile $tmp_garard.profile}
        [unstore_unit]
            variable=stored_garard
        [/unstore_unit]
        {FULL_HEAL id=Garard}
        {CLEAR_VARIABLE stored_garard,tmp_garard}
    )} {/IF}
#enddef

# identify a bandit companion for Delfador, during the saurian arc
#define GET_COMPANION_ID
#arg SEARCH_RECALL
no#endarg
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR id=Lynyan id companion_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR id=Barin  id companion_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND side,level=1,3-99}) id companion_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND side,level=1,2   }) id companion_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND side,level=1,1   }) id companion_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND side,level=1,0   }) id companion_id})}
    {/IF}
    {STORE_UNIT_VAR id=$companion_id name companion_name}
#enddef
#define RECALL_COMPANION X Y
    {GET_COMPANION_ID SEARCH_RECALL=yes}
    {IF} {NOT({HAVE_UNIT id=$companion_id})} {THEN(
        {IF} {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({RECALL_XY $companion_id {X} {Y}})}
        {/IF}
        {IF} {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({GENERIC_UNIT 1 Footpad  {X} {Y}})}
        {/IF}
    )} {/IF}
    {GET_COMPANION_ID}
#enddef

# identify and recall a veteran from Delfador's bandit recruit list
#define RECALL_BANDIT MIN_LEVEL X Y BACKUP_TYPE TRAIT_WML
    {IF} {NOT({HAVE_UNIT search_recall_list,id=yes,$bandit_id})} {THEN({STORE_UNIT_VAR (id,side=Barin,1                                 {AND x,y=recall,recall}                                     ) id bandit_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id=yes,$bandit_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,3-99             }) id bandit_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id=yes,$bandit_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,2                }) id bandit_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id=yes,$bandit_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,{MIN_LEVEL}-99   }) id bandit_id})}
    {/IF}

    {IF} {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({RECALL_XY $bandit_id {X} {Y}})}
    {/IF}
    {IF} {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN(
        {NOTRAIT_UNIT 1 {BACKUP_TYPE} {X} {Y}}
        {TRAIT_WML}
    )} {/IF}
    {CLEAR_VARIABLE bandit_id}
#enddef

# identify and recall a veteran from Delfador's infantry recruit list
#define RECALL_INFANTRYMAN MIN_LEVEL X Y BACKUP_TYPE TRAIT_WML
    {IF} {NOT({HAVE_UNIT search_recall_list,id=yes,$infantryman_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_MIDDLE_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,3-99             }) id infantryman_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id=yes,$infantryman_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_MIDDLE_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,2                }) id infantryman_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id=yes,$infantryman_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_MIDDLE_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,{MIN_LEVEL}-99   }) id infantryman_id})}
    {/IF}

    {IF} {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({RECALL_XY $infantryman_id {X} {Y}})}
    {/IF}
    {IF} {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN(
        {NOTRAIT_UNIT 1 {BACKUP_TYPE} {X} {Y}}
        {TRAIT_WML} # spawned units in S10 really should be quick, or else they'll stuggle to get across the water
    )} {/IF}
    {CLEAR_VARIABLE infantryman_id}
#enddef

# identify and recall a veteran from Delfador's cavalry recruit list
#define RECALL_HORSE MIN_LEVEL X Y BACKUP_TYPE
    {IF} {NOT({HAVE_UNIT search_recall_list,id=yes,$horse_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,3-99             }) id horse_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id=yes,$horse_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,2                }) id horse_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id=yes,$horse_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,{MIN_LEVEL}-99   }) id horse_id})}
    {/IF}

    {IF} {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({RECALL_XY $horse_id {X} {Y}})}
    {/IF}
    {IF} {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN(
        {GENERIC_UNIT 1 {BACKUP_TYPE} {X} {Y}}
    )} {/IF}
    {CLEAR_VARIABLE horse_id}
#enddef

#define GET_HORSELORD_ID
#arg SEARCH_RECALL
no#endarg
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$horselord_id})} {THEN({STORE_UNIT_VAR id=Kaylan id horselord_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$horselord_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND side,level=1,3-99}) id horselord_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$horselord_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND side,level=1,2   }) id horselord_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$horselord_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND side,level=1,1   }) id horselord_id})}
    {/IF}
    {IF} {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$horselord_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND side,level=1,0   }) id horselord_id})}
    {/IF}
    {STORE_UNIT_VAR id=$horselord_id name horselord_name}
#enddef
#define RECALL_HORSELORD X Y
    {GET_HORSELORD_ID SEARCH_RECALL=yes}
    {IF} {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({RECALL_XY $horselord_id {X} {Y}})}
    {/IF}
    {IF} {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({GENERIC_UNIT 1 Horseman {X} {Y}})}
    {/IF}
    {GET_HORSELORD_ID}
#enddef

#
# the 'experience_modifier' attribute doesn't adjust existing units' XP when difficulty is changed. Fix that here by forcing a unit rebuild
#
#define EXPERIENCE_MODIFIER_GLOBAL
    # difficulty can only be changed at the beginning of a scenario
    # so, modify any units whose initial XP modifier doesn't match the current difficulty
    [event]
        name=prestart,refresh_experience
        first_time_only=no
        [store_unit]
            {FILTER()}
            variable=preload_modify_xp_units
        [/store_unit]
        [foreach]
            array=preload_modify_xp_units
            [do]
                {STORE_UNIT_VAR id=$this_item.id id premodified_unit_id}
                {STORE_UNIT_VAR id=$this_item.id     experience     premodified_experience}
                {STORE_UNIT_VAR id=$this_item.id max_experience premodified_max_experience}

                # modify XP to force a unit rebuild
                # if we modify something other than XP this doesn't work
                # [remove_object] doesn't work on units with x,y=recall,recall so use lua instead
                {GIVE_OBJECT_TO id=$this_item.id (id=xp_modifier_object {EFFECT max_experience increase=1})}
                [lua]
                    code = << local units = wesnoth.units.find{ id=wml.variables['premodified_unit_id'] }
                            if (units and units[1]) then units[1]:remove_modifications{ id='xp_modifier_object' } end >>
                [/lua]
                {CLEAR_VARIABLE premodified_unit_id}

                # adjust current XP
                [modify_unit]
                    {FILTER id=$this_item.id}
                    experience="$( floor($this_unit.max_experience * $premodified_experience / $premodified_max_experience) )"
                [/modify_unit]

                # sometimes, for some inexplicable reason, $premodified_max_experience is already multiplied by the new experience_modifier.
                # in these cases, we might accidentally end up with units at more than 100% XP. Prevent this from happening here.
                {STORE_UNIT_VAR id=$this_item.id     experience     postmodified_experience}
                {STORE_UNIT_VAR id=$this_item.id max_experience postmodified_max_experience}
                {IF} {VARIABLE_CONDITIONAL postmodified_experience greater_than_equal_to $postmodified_max_experience} {THEN(
                    [modify_unit]
                        {FILTER id=$this_item.id}
                        experience="$( $postmodified_max_experience - 1 )"
                    [/modify_unit]
                )} {/IF}

                # clean up after ourselves
                {CLEAR_VARIABLE premodified_unit_id,premodified_experience,premodified_max_experience}
                {CLEAR_VARIABLE postmodified_experience,postmodified_max_experience}

                #                 {IF} {VARIABLE_CONDITIONAL this_item.id equals Lynyan} {THEN(
                #                     {DEBUG_MSG "$premodified_experience | $premodified_max_experience | $postmodified_max_experience | $( floor($postmodified_max_experience * $premodified_experience / $premodified_max_experience) )"}
                #                 )} {/IF}
            [/do]
        [/foreach]
        {CLEAR_VARIABLE preload_modify_xp_units}
    [/event]

    # reduced XP is a nerf for Delfador. Undo that here.
    # ignore polymorphed Delfador, because XP gets copied
    [event]
        name=prestart,start,turn 1,refresh_experience
        first_time_only=no
        # remove any previous experience modifications
        # [remove_object] doesn't work on units with x,y=recall,recall so use lua instead
        [lua]
            code = << local units = wesnoth.units.find{ type='Delfador L1,Delfador L2,Delfador L3,Delfador L4' } -- filtering by unit type lets us 1) exclude polymorph and 2) include mirror images
                      for i,unit in ipairs(units) do unit:remove_modifications{ id='delfador_xp_modifier_object' } end  >>
        [/lua]
        {GIVE_OBJECT_TO type="Delfador L1,Delfador L2,Delfador L3,Delfador L4" (id=delfador_xp_modifier_object {EFFECT max_experience increase={ON_DIFFICULTY4 43% 11% 0% 0%}})}
        # if I change this, also change the `experience_modifier=` below
    [/event]
#enddef

#define HERODEATHS
    experience_modifier={ON_DIFFICULTY4 70 90 100 100}
    # if I change this, also change the `max_experience increase=` above
    # this really doesn't belong in HERODEATHS, but HERODEATHS is an easy way to put it in every scenario

    [event]
        name=last breath {FILTER id,level=Delfador,0-2}
        id=herodeath_delfador12
        [message]
            speaker=Delfador
            message=_"No, it can’t end yet! I have so much left to do..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id,level=Delfador,3}
        id=herodeath_delfador3
        [message]
            speaker=Delfador
            message=_"No! Magic, why have you failed me..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id,level=Delfador,4-99}
        id=herodeath_delfador4
        [message]
            speaker=Delfador
            message=_"If only I had been a little wiser..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id=Methor}
        id=herodeath_methor
        {FILTER_CONDITION( {NOT( {CONTINGENCY_GLOBAL_CONDITIONS} )} )}
        [message]
            speaker=Methor
            message=_"War, pain, death... I tried so hard to change things..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id=Deoran}
        id=herodeath_deoran
        {FILTER_CONDITION( {NOT( {CONTINGENCY_GLOBAL_CONDITIONS} )} )}
        [message]
            speaker=Deoran
            message=_"I have failed my kingdom and my duty..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]

    [event]
        name=last breath {FILTER id=Garard}
        [message]
            speaker=Garard
            #po: reference to Shakespeare's Richard III
            message=_"A horse! A horse! My kingdom for a horse..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id=Asheviere}
        [message]
            speaker=Asheviere
            message=_"It’s finally over..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id=Lionel}
        [message]
            speaker=Lionel
            message=_"Blasted orcs..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]

    [event]
        name=last breath {FILTER id=Kalenz}
        id=herodeath_kalenz
        [message]
            speaker=Kalenz
            message=_"Nobody can cheat death forever..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id=Chantal}
        id=herodeath_chantal
        [message]
            speaker=Chantal
            message=_"Deoran, I never had a chance to tell you—"
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]

    [event]
        name=last breath
        {FILTER id=$companion_id}
        {FILTER id=Lynyan}
        {FILTER_CONDITION( {NOT( {CONTINGENCY_GLOBAL_CONDITIONS} )} )}
        {IF} {HAVE_UNIT id=Delfador,Deoran} {THEN(
            [message]
                speaker=Lynyan
                message=_"Boss, I ain’t feelin’ too hot..."
            [/message]
        )} {ELSE(
            [message]
                speaker=Lynyan
                message=_"I ain’t feelin’ too hot..."
            [/message]
        )} {/IF}
    [/event]
    [event]
        name=last breath
        {FILTER id=$companion_id}
        {FILTER id=Barin}
        {FILTER_CONDITION( {NOT( {CONTINGENCY_GLOBAL_CONDITIONS} )} )}
        [message]
            speaker=Barin
            message=_"I shoulda never left my swamp..."
        [/message]
    [/event]
    [event]
        name=last breath
        {FILTER id=Kaylan}
        {FILTER_CONDITION( {NOT( {CONTINGENCY_GLOBAL_CONDITIONS} )} )}
        [message]
            speaker=Kaylan
            #po: since he reappears in HttT's blackwater port, he can't die here.
            message=_"I am grievously injured; I can be of no further aid in your quest. Fight on without me, Delfador!"
        [/message]
    [/event]
    [event]
        name=post advance
        {FILTER id,type=Kaylan,Paladin}
        [message]
            speaker=Kaylan
            #po: Sir Kaylan is a Knight, and has reached max-XP. He reappears in HttT's Blackwater Port, so we need to force him to be a Grand Knight even if the player chooses to advance him to a Paladin
            message=_"Many Knights choose the path of the Paladin, Delfador, but I am an heir of the Horse Lords. I shall be a Grand Knight."
        [/message]
        {TRANSFORM_UNIT id=Kaylan "Grand Knight"}
    [/event]
    [event]
        name=post advance
        {FILTER id,type=Kaylan,"Grand Knight"}
        [message]
            speaker=Kaylan
            #po: Sir Kaylan is a Knight, and has reached max-XP. He reappears in HttT's Blackwater Port, so we need to force him to be a Grand Knight even if the player chooses to advance him to a Paladin
            message=_"I am glad to be a Grand Knight, Delfador. Many Knights choose the path of the Paladin, but such is unbecoming for an heir of the Horse Lords."
        [/message]
    [/event]
#enddef
