#textdomain wesnoth-tdg
#wmlindent: start ignoring



# put this here so it can be used by panacea (it's also used in some last breath events)
#define CONTINGENCY_GLOBAL_CONDITIONS
    {AND(
        {VARIABLE_CONDITIONAL skill_contingency equals yes}
        {HAVE_UNIT id,race=Delfador,human} # delfador can't cast spells during polymorph, including contingency
    )}
#enddef







#######################################################################################################################################################
#----------------------------------------------------------------- "PRIVATE" MACROS -------------------------------------------------------------------
#######################################################################################################################################################
#                                                                  OTHER  ANIMATIONS
#######################################################################################################################################################
#define ANIMATIONS_GHOSTCAPTURE PATH
    [animation]
        apply_to=skill_ghostcapture_start
        {FRAME image={PATH}/delfador-ranged1.png:250}
        {OVERLAY_FRAME alpha,halo=0~1,"halo/particle-anims/particles-a-[01~05].png~O(0.5):50"}
    [/animation]
    [standing_anim]
        {FILTER_OBJECT_ID skill_ghostcapture_standing}
        {FRAME image={PATH}/delfador-ranged2.png:50}
        {OVERLAY_FRAME  (
            image="halo/ghostcapture-rune.png~O(0.4)"
            halo="halo/particle-anims/particles-a-[06~96,95~01,01~05].png~O(0.5):50"
        )}
    [/standing_anim]
    [animation]
        apply_to=skill_ghostcapture_end
        {FRAME image={PATH}/delfador-ranged1.png:250}
    [/animation]
#enddef



#######################################################################################################################################################
#                                                                   GROUP 0 SKILLS
#######################################################################################################################################################
#############################
# MAGIC MISSILE
#############################
#define EVENT_MAGIC_MISSILE
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_magic_missile equals yes})}
        [object]
            id,take_only_once=skill_magic_missile,no {FILTER id=Delfador}
            {EFFECT new_attack (
                name,description,icon=missile,_"missile",attacks/magic-missile.png
                range,type,damage,number=ranged,fire,7,3
                [specials]
                    {WEAPON_SPECIAL_MAGICAL}
                [/specials] )}
        [/object]
    [/event]
#enddef
#define ANIMATIONS_MAGIC_MISSILE PATH
    [attack_anim]
        {FILTER_ATTACK name=missile}
        offset=0
        {MAGIC_MISSILE 11 -20}
        {MAGIC_MISSILE_STAFF_FLARE -750 600 11 -20}
        start_time=-800
        {FRAME image={PATH}/delfador-ranged[1,2,1].png:[100,700,200]}
        {SOUND:HIT_AND_MISS magic-missile-[1~3].ogg magic-missile-[1~3]-miss.ogg -350}
    [/attack_anim]
#enddef

#############################
# SHIELD
#############################
#define EVENT_SHIELD
    [event]
        name=skill_shield
        first_time_only=no
        {ANIMATE_UNIT id=Delfador skill_shield}
        [modify_unit]
            {FILTER id=Delfador}
            [object]
                duration,id=turn,skill_shield
                {EFFECT defense ([defense]
                    {FLY_DEFENSE -20} # reduce hit-chance by 20% on all terrain
                [/defense])}
            [/object]
        [/modify_unit]
        [event]
            name=skill_shield_cancel
            {REMOVE_OBJECT skill_shield id=Delfador}
        [/event]
    [/event]
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_shield not_equals yes})}
        {FIRE_EVENT skill_shield_cancel}
    [/event]
#enddef
#define ANIMATIONS_SHIELD PATH
    [animation]
        apply_to=skill_shield
        {SOUND_FRAME sound=skill-shield.wav}
        {FRAME image={PATH}/delfador-ranged[1,2,1].png:[50,300,50]}
        {OVERLAY_FRAME halo="halo/merfolk/water-halo-[7~1].png~CS(255,255,255)~O(0.8):75"}
        {OVERLAY_FRAME (y,image=-2,halo/magical-shield-[4~6].png:100
                        alpha=0.6~1.0, 1.0, 1.0~0.6)}
    [/animation]
    [standing_anim]
        {FILTER_OBJECT_ID skill_shield}
        {OVERLAY_FRAME (y,image=-2,halo/magical-shield-[1~6,1~6,1~6,1~6,1~6,1~6].png:100
                     alpha=0.7:250, 0.7~0.5:1250, 0.5:250, 0.5~0.7:1250)}
    [/standing_anim]
    [movement_anim]
        {FILTER_OBJECT_ID skill_shield}
        {OVERLAY_FRAME (y,image=-2,halo/magical-shield-1.png:200
                     alpha=0.6
                     offset="0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200")}
    [/movement_anim]
    [defend]
        {FILTER_OBJECT_ID skill_shield}
        start_time=-175
        {FRAME( image={PATH}/delfador-defend1.png:50,{PATH}/delfador-defend2.png:250,{PATH}/delfador-defend1.png:50
                halo_y,halo=-2,"halo/magical-shield-[1~6].png~O(0.4,0.8,1.0,0.9,0.8,0.6,0.4]):50")}
        {IF}
            hits=hit
            overlay_start_time=-25 {OVERLAY_FRAME sound={SOUND_LIST:HUMAN_HIT}}
        {/IF}
    [/defend]
#enddef

#############################
# STASIS
#############################
#define EVENT_STASIS
    [event]
        name=skill_stasis
        first_time_only=no
        {ANIMATE_UNIT id=Delfador skill_stasis}
        {MODIFY_UNIT ({FILTER_ADJACENT id=Delfador} {OR id=Delfador}) status.petrified yes}
        {MODIFY_UNIT ({FILTER_ADJACENT id=Delfador} {OR id=Delfador}) status.uncovered yes} # otherwise woses go invisible once delfador is petrified
        {FIRE_EVENT skill_stasis_end} # used in S13
        [event]
            name=side 1 turn refresh
            {MODIFY_UNIT status=petrified status.petrified no} # undo petrify after 1 turn
        [/event]
    [/event]
#enddef
#define ANIMATIONS_STASIS PATH
    [animation]
        apply_to=skill_stasis
        {SOUND_FRAME sound=skill-stasis.wav}
        {FRAME image={PATH}/delfador-ranged[1,2,1].png:[100,350,100]}
        {FRAME image={PATH}/delfador.png:[150]}
        {OVERLAY_FRAME  halo="halo/stasis/mystic-magic[1~6,4].png~CS(-255,-255,-255)~O(0.2)~SCALE(60,60):[100*7]"}
        {OVERLAY2_FRAME halo="halo/stasis/mysticaltoad-magic[1~6,4].png~CS(-255,-255,-255)~O(0.15)~SCALE(180,180):[100*7]"}
    [/animation]
#enddef

#############################
# PANACEA
#############################
#define FIND_DESTINATION_HEX ENEMY_COUNT
    {IF} {VARIABLE_CONDITIONAL destination_hexes.length equals 0} {THEN(
        [store_reachable_locations]
            {FILTER id=$panacea_id}
            {FILTER_LOCATION(
                {NOT( {FILTER()} )} # don't move to a hex that's already occupied
                {FILTER_ADJACENT_LOCATION(
                    count={ENEMY_COUNT}
                    {FILTER( side=3,4,5,6,7,8,9,10,11,12,13 )}
                )}
            )}
            range=movement
            moves=current
            variable=destination_hexes
        [/store_reachable_locations]
    )} {/IF}
#enddef
#define EVENT_PANACEA
    [event]
        name=skill_panacea
        first_time_only=no

        # find panacea target
        [store_unit]
            {FILTER( {IS_ALLY} {NOT trait=undead,elemental} {FILTER_ADJACENT id=Delfador} )}
            variable=panacea_possible_targets
        [/store_unit]
        {VARIABLE panacea_id none}
        {VARIABLE panacea_hitpoints 999}
        [foreach]
            array=panacea_possible_targets
            [do]
                {IF} {VARIABLE_CONDITIONAL this_item.hitpoints less_than_equal_to $panacea_hitpoints} {THEN(
                    {VARIABLE panacea_id           $this_item.id}
                    {VARIABLE panacea_hitpoints    $this_item.hitpoints}
                    {VARIABLE panacea_attacks_left $this_item.attacks_left} # I tried to do this nicely with $this_item and [store_unit], but had trouble comparing variables.
                    {VARIABLE panacea_level        $this_item.level}
                )} {/IF}
            [/do]
        [/foreach]
        {CLEAR_VARIABLE panacea_possible_targets,panacea_hitpoints}

        # cancel spell if no target
        {IF} {VARIABLE_CONDITIONAL panacea_id equals none} {THEN(
            [floating_text]
                {FILTER id=Delfador}
                text=_"<span color='#ff0000' size='x-small'>No Target</span>"
            [/floating_text]
            {CLEAR_VARIABLE spellcasted_this_turn}
            [modify_unit]
                {FILTER id=Delfador}
                experience="$( $this_unit.experience + 8 )" # XP is also used in spellcasting.lua
            [/modify_unit]
            [return]
            [/return]
        )} {/IF}

        #------------------------
        # CAST SPELL
        #------------------------
        # this is the sound of drinking a potion - doesn't make sense for mudcrawlers or fire guardians. (but the spell still works; it's magic)
        # EDIT: nvm, as of 2024-08-31 I'm disallowing panacea from working on elementals/undead entirely, because I'm pretty sure it's something people will complain about
        {IF} {HAVE_UNIT( id=$panacea_id {NOT trait=elemental,undead} )} {THEN({SOUND skill-panacea.wav})}
        {/IF}
        {MODIFY_UNIT id=$panacea_id status.poisoned yes}
        {DELAY 200}
        {MODIFY_UNIT id=$panacea_id status.poisoned no}
        {DELAY 200}
        {MODIFY_UNIT id=$panacea_id status.poisoned yes}
        {DELAY 200}
        {MODIFY_UNIT id=$panacea_id status.poisoned no}
        {DELAY 200}
        {MODIFY_UNIT id=$panacea_id status.poisoned yes}
        {DELAY 200}
        [heal_unit]
            {FILTER id=$panacea_id}
            animate=yes
        [/heal_unit]
        {MODIFY_UNIT id=$panacea_id status.poisoned yes}
        {VARIABLE atks $panacea_attacks_left}
        {VARIABLE_OP atks add $panacea_level}
        {MODIFY_UNIT id=$panacea_id attacks_left $atks}
        {CLEAR_VARIABLE atks}
        [object]
            {FILTER id=$panacea_id}
            id,take_only_once=skill_panacea_buff,no
            {EFFECT max_attacks increase=$panacea_level}
            {EFFECT attack increase_attacks=$panacea_level}
            {EFFECT attack increase_damage=$panacea_level}
            {EFFECT halo halo="halo/panacea.png~O([0.7,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.0,0.0,0.0,0.0,0.1,0.2,0.3,0.4,0.5,0.6])"}
            {EFFECT new_ability ([abilities]
                [dummy]
                    id,name,description=panacea, _"panacea", _"Next turn, this unit dies."
                [/dummy]
                [regenerate]
                    # prevent the panacea "poison" from dealing damage (only relevant if you panacea another side's unit
                    affect_self,value,poison=yes,0,slowed
                [/regenerate]
            [/abilities])}
        [/object]

        #------------------------
        # AI OVERRIDE
        #------------------------
        # if we panacea an ally, override their default ai and make them super aggro
        # this is only possible in S06 and S10, where you can panacea Garard's forces (side 2)
        # and only actually useful in S06
        {IF} {HAVE_UNIT id,side=$panacea_id,2} {THEN(
            # manually move adjacent to an enemy, preferring higher enemy counts
            [event]
                name=side 2 turn
                {FIND_DESTINATION_HEX 3-99}
                {FIND_DESTINATION_HEX 2}
                {FIND_DESTINATION_HEX 1}
                {IF} {VARIABLE_CONDITIONAL destination_hexes.length not_equals 0} {THEN(
                    {MOVE_UNIT id=$panacea_id $destination_hexes[0].x $destination_hexes[0].y}
                    {MODIFY_UNIT id=$panacea_id moves 0}
                )} {/IF}
                {CLEAR_VARIABLE destination_hexes}
            [/event]

            # execute the actual attacks via a MAI
            [micro_ai]
                side,action,ai_type=2,add,simple_attack
                ca_score=9999999
                {FILTER id=$panacea_id}
            [/micro_ai]
        )} {/IF}

        #------------------------
        # KILL THE RECIPIENT
        #------------------------
        [event]
            name=side 1 turn,kill_panacea,victory

            {IF}
                {CONTINGENCY_GLOBAL_CONDITIONS}
                {AND({HAVE_UNIT id,race,search_recall_list=$panacea_id,human,yes})}
            {THEN(
                [harm_unit] # use [harm_unit] instead of {KILL} so that we can combo with skill_contingency
                    {FILTER id=$panacea_id}
                    amount,animate,kill=999,yes,no
                [/harm_unit]
                [fire_event]
                    name=trigger_contingency
                    [primary_unit]
                        id=$panacea_id
                    [/primary_unit]
                [/fire_event]
            )}
            {ELSE(
                {KILL id=$panacea_id ANIMATE=yes FIRE_EVENT=yes}
            )} {/IF}

            {REMOVE_OBJECT skill_panacea_buff ()}
            {CLEAR_VARIABLE panacea_id,panacea_attacks_left,panacea_level}
        [/event]
    [/event]
#enddef
#define ANIMATIONS_PANACEA PATH
#enddef

#############################
# ANIMATE MUD
#############################
#define EVENT_ANIMATE_MUD
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_animate_mud equals yes})}
        [object]
            id,take_only_once=skill_animate_mud,no {FILTER id=Delfador}
            {EFFECT new_ability ([abilities]
                [leadership]
                    id,name,description=summoner, _"summoner", _"This unit is a skilled summoner. Adjacent allied elementals deal +100% damage and gain +100% experience.

Summoned elementals dissipate at the end of each scenario."
                    value,affect_self="100",no
                    cumulative=yes # stacks with regular leadership. Deoran has leadership, or Delfador can get it with skill_glamour
                    [affect_adjacent]
                        {FILTER trait=elemental}
                    [/affect_adjacent]
                [/leadership]
            [/abilities])}
        [/object]
        [allow_extra_recruit]
            id,extra_recruit=Delfador,Mudcrawler
        [/allow_extra_recruit]
    [/event]
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_animate_mud not_equals yes})}
        {KILL (side,type_adv_tree=1,Mudcrawler)} # kill if we select a different skill
    [/event]
    [event]
        name=victory,turn 1
        {KILL (side,type_adv_tree=1,Mudcrawler)} # kill at the end of every scenario (and at the start, in case [store_units] messes with things)
    [/event]

    #------------------------
    # DOUBLE XP
    #------------------------
    # these same events also affect skill_animate_fire
    # need formula="(self.hitpoints>0)", or else summoner XP can cause a unit to advance and save it from death
    [event]
        name=attack end
        first_time_only=no
        {FILTER(        {IS_ALLY}  formula="(self.hitpoints>0)"  {FILTER_ADJACENT id,ability=Delfador,summoner} trait=elemental )}
        {FILTER_SECOND( level=1-99 )}
        [modify_unit]
            {FILTER id=$unit.id}
            experience="$( $this_unit.experience + $second_unit.level)"
        [/modify_unit]
    [/event]
    [event]
        name=attack end
        first_time_only=no
        {FILTER_SECOND( {IS_ALLY}  formula="(self.hitpoints>0)"  {FILTER_ADJACENT id,ability=Delfador,summoner} trait=elemental )}
        {FILTER(        level=1-99 )}
        [modify_unit]
            {FILTER id=$second_unit.id}
            experience="$( $this_unit.experience + $unit.level)"
        [/modify_unit]
    [/event]
    [event]
        name=die
        first_time_only=no
        {FILTER_SECOND( {IS_ALLY}  formula="(self.hitpoints>0)"  {FILTER_ADJACENT id,ability=Delfador,summoner} trait=elemental )}
        {FILTER(        level=1-99 )}
        [modify_unit]
            {FILTER id=$second_unit.id}
            experience="$( $this_unit.experience + $unit.level*7)" # not *8 because we already gain XP from the attack-end filter
        [/modify_unit]
    [/event]
    [event]
        name=die
        first_time_only=no
        {FILTER_SECOND( {IS_ALLY}  formula="(self.hitpoints>0)"  {FILTER_ADJACENT id,ability=Delfador,summoner} trait=elemental )}
        {FILTER(        level=0 )}
        [modify_unit]
            {FILTER id=$second_unit.id}
            experience="$( $this_unit.experience + 4)"
        [/modify_unit]
    [/event]
#enddef

















































#######################################################################################################################################################
#                                                                   GROUP 1 SKILLS
#######################################################################################################################################################
#############################
# CHILL TOUCH
#############################
#define EVENT_CHILL_TOUCH
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_chill_touch equals yes})}
        [object]
            id,take_only_once=skill_chill_touch,no {FILTER id=Delfador}
            {EFFECT remove_attacks range=melee}
            {EFFECT new_attack (
                name,description,icon="chill touch",_"chill touch",icons/chill-touch.png
                range,type,damage,number=melee,cold,6,3
                [specials]
                    {WEAPON_SPECIAL_SLOW}
                [/specials]  )}
        [/object]
    [/event]
#enddef
#define ANIMATIONS_CHILL_TOUCH PATH
    [attack_anim]
        {FILTER_ATTACK (name=chill touch)}
        start_time=-250
        {FRAME image={PATH}/delfador.png:50}
        {FRAME image={PATH}/delfador-melee[1~2].png:[150,250]}
        {SOUND:HIT_AND_MISS staff.ogg staff-miss.ogg -125}
        {FRAME image={PATH}/delfador.png:100}
        overlay_start_time=-250
        {OVERLAY_FRAME halo="halo/elven/nature-halo[1~8].png~CS(-10,-10,20)~O(0.3):[60*8]"}
    [/attack_anim]
#enddef

#############################
# LEVITATE
#############################
#define EVENT_LEVITATE
    [event]
        name=skill_levitate
        first_time_only=no
        {ANIMATE_UNIT id=Delfador skill_levitate}
        [modify_unit]
            {FILTER id=Delfador}
            [object]
                duration,id=turn,skill_levitate
                {EFFECT new_ability ([abilities]
                    [skirmisher]
                        id,affect_self=skirmisher,yes
                    [/skirmisher]
                [/abilities])}
                {EFFECT defense (replace=yes
                    [defense]
                        {FLY_DEFENSE -50} # 50% hit-chance on all terrain
                    [/defense])}
                {EFFECT movement_costs (replace=yes
                    [movement_costs]
                        {FLY_MOVE} # fast movement on most terrains
                    [/movement_costs])}
            [/object]
        [/modify_unit]
        {FIRE_EVENT skill_levitate_complete} # used in S01

        # kill Delfador if he was levitating over unwalkable terrain, and is now unable to move
        [event]
            name=side 1 turn refresh,skill_levitate_cancel
            {REMOVE_OBJECT skill_levitate id=Delfador}
            {IF} {HAVE_UNIT (id,defense=Delfador,100)} {THEN(
                [message]
                    speaker=Delfador
                    message=_"My levitate spell has ended over impassable terrain! I‘m falling to my death!"
                [/message]
                {KILL id=Delfador ANIMATE=yes}
                {VARIABLE delfador_fell_to_death yes} # if result=defeat triggers from name=victory, result=defeat gets ignored. Instead, immediately end it in defeat next prestart
                [endlevel]
                    result=defeat
                [/endlevel]
            )} {/IF}
        [/event]
    [/event]
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_levitate not_equals yes})}
        {FIRE_EVENT skill_levitate_cancel}
    [/event]
    [event]
        name=prestart
        {FILTER_CONDITION( {VARIABLE_CONDITIONAL delfador_fell_to_death equals yes} )}
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
#enddef
#define ANIMATIONS_LEVITATE PATH
    [animation]
        apply_to=skill_levitate
        {SOUND_FRAME sound=skill-levitate.wav}
        {FRAME image={PATH}/delfador-ranged[1,2,1].png:[50,300,50]}
        {FRAME submerge,image=0.01,"{PATH}/delfador-shadow.png~BLIT({PATH}/delfador-noshadow.png~RC(magenta>red),0,-[1,2,3,4]):[100,150,200,250]"}
        {OVERLAY_FRAME halo=halo/saurian-magic-halo-[1~7].png:75}
    [/animation]
    [standing_anim]
        {FILTER_OBJECT_ID skill_levitate}
        {FRAME submerge,image=0.01,"{PATH}/delfador-shadow.png~BLIT({PATH}/delfador-noshadow.png~RC(magenta>red),0,-[4~1,2~8,8~5,5,5~8,8~5]):350"}
    [/standing_anim]
    [movement_anim]
        {FILTER_OBJECT_ID skill_levitate}
        {FRAME submerge,image=0.01,"{PATH}/delfador-shadow.png~BLIT({PATH}/delfador-noshadow.png~RC(magenta>red),0,-4):200"}
    [/movement_anim]
#enddef

#############################
# FIND FAMILIAR
#############################
#define EVENT_FIND_FAMILIAR
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_find_familiar not_equals yes})}
        {FILTER_CONDITION({HAVE_UNIT id,search_recall_list=familiar,yes})}
        [store_unit]
            {FILTER id=familiar}
            variable,kill=stored_familiar,yes
        [/store_unit]
    [/event]
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_find_familiar equals yes})}

        # if we did select find familiar, ensure we have one
        {IF} {VARIABLE_CONDITIONAL skill_find_familiar equals yes}
             {NOT({HAVE_UNIT id,search_recall_list=familiar,yes})}
        {THEN(
            {STORE_UNIT_VAR id=Delfador x delfX} {STORE_UNIT_VAR id=Delfador y delfY}
            {IF} {VARIABLE_CONDITIONAL stored_familiar.length greater_than 0} {THEN(
                {VARIABLE stored_familiar.hitpoints $stored_familiar.max_hitpoints}
                {VARIABLE stored_familiar.moves     $stored_familiar.max_moves    }
                {VARIABLE stored_familiar.attacks_left 1}
                [unstore_unit]
                    variable=stored_familiar
                    x,y,find_vacant=$delfX,$delfY,yes
                    animate=yes
                [/unstore_unit]
                {MODIFY_UNIT id=familiar status.slowed   no}
                {MODIFY_UNIT id=familiar status.poisoned no}
                {CLEAR_VARIABLE stored_familiar}
            )} {ELSE(
                {NAMED_NOTRAIT_UNIT 1 Raven $delfX $delfY familiar _"Familiar"}
                {ADD_MODIFICATION( {TRAIT_LOYAL} {TRAIT_STRONG} )}
                {GIVE_OBJECT_TO id=familiar (
                    {EFFECT movement ({FILTER level=0} set=6)} # nerf speed. Find Familiar is already a very strong skill
                    {EFFECT movement ({FILTER level=1} set=6)}
                    {EFFECT movement ({FILTER level=2} set=6)} # this speed is ALSO used in HttT
                )}
            )} {/IF}
            {CLEAR_VARIABLE delfX,delfY}
        )} {/IF}

        # if we didn't select find familiar, remove any existing familiar
        # if we did select find familiar, ensure we have one
        {IF} {VARIABLE_CONDITIONAL skill_find_familiar not_equals yes}
             {HAVE_UNIT id,search_recall_list=familiar,yes}
        {THEN(
            [store_unit] # only do this if the familiar actually exists, otherwise we overwrite the variable
                {FILTER id=familiar}
                variable,kill=stored_familiar,yes
            [/store_unit]
        )} {/IF}
    [/event]
    [event]
        name=victory,turn 1 # store at the end of every scenario (and at the start, in case [store_units] messes with things)
        first_time_only=no  # remember that skill reselection happens in a separate mousemove event, which means it'll be after turn 1 even if this all happens at the beginning of the scenario
        {FILTER_CONDITION({HAVE_UNIT id,search_recall_list=familiar,yes})}
        [store_unit] # only do this if the familiar actually exists, otherwise we overwrite the variable
            {FILTER id=familiar}
            variable,kill=stored_familiar,yes
        [/store_unit]
    [/event]

    # explain find familiar
    [event]
        name=unit placed
        {FILTER type_adv_tree=Raven}
        {FILTER_CONDITION({VARIABLE_CONDITIONAL explained_familiar not_equals yes})}
        {FILTER_CONDITION( {HAVE_UNIT id,level=Delfador,0-1} )} # only play this message in the first couple scenarios
        [message]
            speaker=Methor
            message=_"A familiar already, apprentice? Well done — that’s an impressive piece of magic even for experienced wizards."
        [/message]
        {VARIABLE explained_familiar yes} # only say this voiceline once per campaign
    [/event]
#enddef

#############################
# MNEMONIC
#############################
#define EVENT_MNEMONIC
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_mnemonic equals yes})}
        [object]
            id,take_only_once=skill_mnemonic,no {FILTER id=Delfador}
            {EFFECT new_ability ([abilities]
                [dummy]
                    id,name,description=mnemonic, _"mnemonic", _"Whenever an adjacent ally gains xp, you gain the same amount of xp."
                [/dummy]
            [/abilities])}
        [/object]
    [/event]
    [event]
        name=attack end
        first_time_only=no
        {FILTER(        {IS_ALLY} {FILTER_ADJACENT id,ability=Delfador,mnemonic} )}

        {VARIABLE xp_gain 0}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 1} {THEN({VARIABLE xp_gain 1} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 2} {THEN({VARIABLE xp_gain 2} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 3} {THEN({VARIABLE xp_gain 3} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 4} {THEN({VARIABLE xp_gain 4} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 5} {THEN({VARIABLE xp_gain 5} )}
        {/IF}

        {IF} {VARIABLE_CONDITIONAL unit.type equals "Mudcrawler"      } {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.type equals "Giant Mudcrawler"} {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.type equals "Fire Guardian"   } {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.type equals "Fire Wraith"     } {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        [modify_unit]
            {FILTER id=Delfador}
            experience="$( $this_unit.experience + $xp_gain )"
        [/modify_unit]
        {CLEAR_VARIABLE xp_gain}
    [/event]
    [event]
        name=attack end
        first_time_only=no
        {FILTER_SECOND( {IS_ALLY} {FILTER_ADJACENT id,ability=Delfador,mnemonic} )}

        {VARIABLE xp_gain 0}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 1} {THEN( {VARIABLE xp_gain 1} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 2} {THEN( {VARIABLE xp_gain 2} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 3} {THEN( {VARIABLE xp_gain 3} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 4} {THEN( {VARIABLE xp_gain 4} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 5} {THEN( {VARIABLE xp_gain 5} )}
        {/IF}

        {IF} {VARIABLE_CONDITIONAL unit.type equals "Mudcrawler"      } {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.type equals "Giant Mudcrawler"} {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.type equals "Fire Guardian"   } {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.type equals "Fire Wraith"     } {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        [modify_unit]
            {FILTER id=Delfador}
            experience="$( $this_unit.experience + $xp_gain )"
        [/modify_unit]
        {CLEAR_VARIABLE xp_gain}
    [/event]
    [event]
        name=die
        first_time_only=no
        {FILTER_SECOND( {IS_ALLY} {FILTER_ADJACENT id,ability=Delfador,mnemonic} )}

        {VARIABLE xp_gain 0}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 0} {THEN( {VARIABLE xp_gain  4} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 1} {THEN( {VARIABLE xp_gain  7} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 2} {THEN( {VARIABLE xp_gain 14} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 3} {THEN( {VARIABLE xp_gain 21} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 4} {THEN( {VARIABLE xp_gain 28} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.level equals 5} {THEN( {VARIABLE xp_gain 35} )}
        {/IF}

        {IF} {VARIABLE_CONDITIONAL unit.type equals "Mudcrawler"      } {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.type equals "Giant Mudcrawler"} {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.type equals "Fire Guardian"   } {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL unit.type equals "Fire Wraith"     } {THEN({VARIABLE_OP xp_gain multiply 2})}
        {/IF}
        [modify_unit]
            {FILTER id=Delfador}
            experience="$( $this_unit.experience + $xp_gain )"
        [/modify_unit]
        {CLEAR_VARIABLE xp_gain}
    [/event]
#enddef


















































#######################################################################################################################################################
#                                                                   GROUP 2 SKILLS
#######################################################################################################################################################
#############################
# FIREBALL2
#############################
#define EVENT_FIREBALL2
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_fireball2 equals yes})}
        [object]
            id,take_only_once=skill_fireball2,no {FILTER id=Delfador}
            {EFFECT new_attack (
                name,description,icon=fireball,_"fireball",attacks/fireball.png
                range,type,damage,number=ranged,fire,8,4
                [specials]
                    {WEAPON_SPECIAL_MAGICAL}
                [/specials] )}
        [/object]
    [/event]
#enddef
#define ANIMATIONS_FIREBALL PATH
    # all fireballs share the same attack animation
    [attack_anim]
        {FILTER_ATTACK name=fireball}
        offset=0
        {MISSILE_FRAME_FIREBALL_XY 11 -20}
        start_time=-575
        {FRAME image={PATH}/delfador.png:50}
        {FRAME image={PATH}/delfador-ranged[1,2,1].png:[100,250,75]}
        {FRAME image={PATH}/delfador.png:50}
        {SOUND:HIT_AND_MISS fire.wav fire.wav -375}
    [/attack_anim]
#enddef

#############################
# ENERVATE
#############################
#define EVENT_ENERVATE
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_enervate equals yes})}
        [object]
            id,take_only_once=skill_enervate,no {FILTER id=Delfador}
            {EFFECT new_attack (
                name,description,icon=enervate,_"siphon",icons/enervate.png
                range,type,damage,number=ranged,arcane,8,4
                [specials]
                    {WEAPON_SPECIAL_MAGICAL}
                    {WEAPON_SPECIAL_DRAIN}
                [/specials] )}
        [/object]
    [/event]
    #------------------------
    # EXPLAIN ENERVATE
    #------------------------
    # DISABLED - we now have a voiceline when we kill the shaman in S05
#     [event]
#         name=attacker hits,attacker misses
#         {FILTER_ATTACK name=enervate}
#         {FIRE_EVENT explain_enervate}
#     [/event]
#     [event]
#         name=defender hits,defender misses
#         {FILTER_ATTACK name=enervate}
#         {FIRE_EVENT explain_enervate}
#     [/event]
#     [event]
#         name=explain_enervate
#         {FILTER_CONDITION({VARIABLE_CONDITIONAL explain_enervate not_equals yes})}
#         {FILTER_CONDITION( {HAVE_UNIT id,level=Delfador,0-3} )} # this would sound weird if triggered too late in the campaign
#         [message]
#             speaker=Delfador
#             #po: Delfador has just used his Siphon attack. This is identical to the attacks that orcish shamans use.
#             message=_"I’ve never-before seen magic quite like what those orcich shamans wield. Good thing it wasn’t hard for me to copy!"
#         [/message]
#         {VARIABLE explain_enervate yes} # only say this voiceline once per campaign
#     [/event]
#enddef
#define ANIMATIONS_ENERVATE PATH
    [attack_anim]
        {FILTER_ATTACK name=enervate}
        start_time=-350
        {FRAME sound,image=siphon.ogg,{PATH}/delfador-ranged[1,2,1].png:[50,400,50]}
        overlay_start_time=-350
        {OVERLAY_FRAME  offset,halo=1.0,"halo/elven/nature-halo[8~1].png~CS(50,-30,-50)~O([80%*2,60%,40%,30%,20%*3]):75"}
        {IF}
            hits=yes
            overlay2_start_time=-200
            {OVERLAY2_FRAME offset,halo=0.0,"halo/elven/nature-halo[1~8].png~CS(50,-30,-50)~O([20%*3,30%,40%,60%,80%*2]):75"}
            missile_start_time=-200
            [missile_frame]
                image="halo/elven/druid-healing[8~1].png~CS(50,-30,-50):50"
                offset=1.0~0.0
            [/missile_frame]
        {/IF}
        [else]
            hits=no
            missile_start_time=-200
            [missile_frame]
                image="halo/elven/druid-healing[8~1].png~CS(50,-30,-50):50"
                offset=1.0~0.8
                alpha=1.0~0.0
            [/missile_frame]
        [/else]
    [/attack_anim]
#enddef

#############################
# BLIZZARD
#############################
#define FREEZE_TERRAIN X Y
    # credit to beetlenaut: https://forums.wesnoth.org/viewtopic.php?t=54559
    {VARIABLES_SPLIT terrains before (,) (W*,S*,H*,G*,R*,D*,I*,Ur*,Ke*,Ce*,Co*,Ch*,Cv*,Cf*,Cu*,Ct*,Cm*,Km*,Ko*,Kt*,Kh*,Kv*,Kf*,Ku*,M*,Fp*, Fd*, Fm*, Vl*, Vc*, Vh,  Vhc*, Vhh*, Vo,  Vu,  Ve,  Q*,Ur*,Uu*,Tb,Uh*)}
    {VARIABLES_SPLIT tmp      after  (,) (Ai,Ai,Ha,Aa,Aa,Aa,Aa,Aa, Kea,Cea,Coa,Cha,Cva,Cfa,Cfa,Coa,Cha,Kha,Koa,Koa,Kha,Kva,Kfa,Kfa,Ms,^Fpa,^Fda,^Fma,^Vla,^Vca,^Vha,^Vhca,^Vhha,^Voa,^Vaa,^Vea,Ai,Aa, Aa, Aa,Ha)}
    [foreach]
        array=terrains
        [do] {VARIABLE this_item.after $tmp[$i].after}
        [/do]
    [/foreach]
    {CLEAR_VARIABLE tmp}
    [foreach]
        array=terrains
        [do]
            {IF} {VARIABLE_CONDITIONAL this_item.after contains "^"} {THEN(
                {VARIABLE before "*^$this_item.before"}
            )} {ELSE(
                {VARIABLE before "$this_item.before^*"}
            )} {/IF}
            {IF} {HAVE_LOCATION (x,y,terrain={X},{Y},$before)} {THEN(
                # can't use {VARIABLE layer overlay} | {VARIABLE layer base}, or we get schema issues
                {IF} {VARIABLE_CONDITIONAL this_item.after contains "^"} {THEN(
                    [terrain]
                        x,y={X},{Y}
                        terrain=$this_item.after
                        layer=overlay
                    [/terrain]
                )} {ELSE(
                    [terrain]
                        x,y={X},{Y}
                        terrain=$this_item.after
                        layer=base
                    [/terrain]
                )} {/IF}
                [break]
                [/break]
            )} {/IF}
        [/do]
    [/foreach]
    {CLEAR_VARIABLE terrains,before}

    [item]
        x,y,name={X},{Y},snow_overlay
        halo="halo/elven/nature-halo[1~8].png~SCALE(144,144):[75*8]"
    [/item]
    [redraw]
    [/redraw]
#    {IF} {HAVE_UNIT  (x,y={X},{Y} {FILTER_ADJACENT id=Delfador})} {THEN(
    {IF} {HAVE_UNIT  (x,y={X},{Y} {NOT({IS_ALLY})} )} {THEN(
        {MODIFY_UNIT (x,y={X},{Y}) status.slowed yes}
        {MODIFY_UNIT (x,y={X},{Y}) status.uncovered yes} # for S03. If someone tries this we might as well let it work.
        {SOUND slowed.wav}
   )} {/IF}
    {DELAY 1}
#enddef
#define REMOVE_FREEZE_HALO X Y
    [remove_item]
        x,y,image={X},{Y},snow_overlay
    [/remove_item]
    {DELAY 25}
#enddef
#define DO_RANDOMLY_IN_NOTIN FLT NOT_FLT ARBITRARY_WML
    [store_locations]
        {AND( {FLT}     {FILTER id=Delfador} )}
        {NOT( {NOT_FLT} {FILTER id=Delfador} )}
        variable=locs
    [/store_locations]
    [while]
        {VARIABLE_CONDITIONAL locs.length greater_than 0}
        [do]{VARIABLE_OP z rand "0..$($locs.length-1)"}
            {ARBITRARY_WML}
            {CLEAR_VARIABLE locs[$z]} # use z intead of i,j,k, etc so we don't aren't interefed with by ARBITRARY_WML
        [/do]
    [/while]
    {CLEAR_VARIABLE locs}
#enddef

#define EVENT_BLIZZARD
    [event]
        name=skill_blizzard
        first_time_only=no
        {ANIMATE_UNIT id=Delfador skill_blizzard}
        {GIVE_OBJECT_TO id=Delfador (id=skill_blizzard_animation) }

        {DO_RANDOMLY_IN_NOTIN radius=0 x,y=99,99 ({FREEZE_TERRAIN $locs[$z].x $locs[$z].y})}
        {DO_RANDOMLY_IN_NOTIN radius=1 radius=0  ({FREEZE_TERRAIN $locs[$z].x $locs[$z].y})}
        {DO_RANDOMLY_IN_NOTIN radius=2 radius=1  ({FREEZE_TERRAIN $locs[$z].x $locs[$z].y})}
        {DO_RANDOMLY_IN_NOTIN radius=3 radius=1  ({FREEZE_TERRAIN $locs[$z].x $locs[$z].y})}

        {REMOVE_OBJECT skill_blizzard_animation id=Delfador}
        {ANIMATE_UNIT id=Delfador skill_blizzard_end}

        {DO_RANDOMLY_IN_NOTIN radius=0 x,y=99,99 ({REMOVE_FREEZE_HALO $locs[$z].x $locs[$z].y})}
        {DO_RANDOMLY_IN_NOTIN radius=1 radius=0  ({REMOVE_FREEZE_HALO $locs[$z].x $locs[$z].y})}
        {DO_RANDOMLY_IN_NOTIN radius=2 radius=1  ({REMOVE_FREEZE_HALO $locs[$z].x $locs[$z].y})}
        {DO_RANDOMLY_IN_NOTIN radius=3 radius=1  ({REMOVE_FREEZE_HALO $locs[$z].x $locs[$z].y})}
        {FIRE_EVENT skill_blizzard_end} # used in S13
    [/event]
#enddef
#define ANIMATIONS_BLIZZARD PATH
    [animation]
        apply_to=skill_blizzard
        {SOUND_FRAME sound=skill-blizzard.wav}
        {FRAME image={PATH}/delfador-ranged1.png:100}
        {OVERLAY_FRAME halo="halo/blizzard/[0001~0004].png~CS(150,150,150)~SCALE(144,144):25"}
    [/animation]
    [standing_anim]
        {FILTER_OBJECT_ID skill_blizzard_animation}
        {FRAME image={PATH}/delfador-ranged2.png}
        {OVERLAY_FRAME halo="halo/blizzard/[0004~0130].png~CS(150,150,150)~SCALE(144,144):25"}
    [/standing_anim]
    [animation]
        apply_to=skill_blizzard_end
        {FRAME image={PATH}/delfador-ranged1.png:100}
    [/animation]
#enddef

#############################
# COUNTERSPELL
#############################
#define REFRESH_COUNTERSPELL_VISUAL
    [remove_item]
        image=counterspell_aura
    [/remove_item]
    [store_unit]
        {FILTER_OBJECT_ID skill_counterspell}
        variable=counterspeller
    [/store_unit]
    {IF} {VARIABLE_CONDITIONAL counterspeller.length greater_than 0} {THEN (
        [item]
            x,y,name=$counterspeller[0].x,$counterspeller[0].y,counterspell_aura
            halo="halo/counterspell/ucircle-b-[07~23,07~23,07~23,07~23,07~23,07~23].png~SCALE(120,70)~O(0.6)"
        [/item]
        [item]
            x,y,name=$counterspeller[0].x,$counterspeller[0].y,counterspell_aura
            halo="halo/counterspell/ucircle-b-[23~07,23~07,23~07,23~07,23~07,23~07].png~SCALE(180,105)~O(0.4)~CS(-25,-25,-25)"
        [/item]
        [item]
            x,y,name=$counterspeller[0].x,$counterspeller[0].y,counterspell_aura
            halo="halo/counterspell/ucircle-b-[07~23,07~23,07~23,07~23,07~23,07~23].png~SCALE(264,154)~O(0.2)~CS(-100,-100,-100)"
        [/item]
        [item]
            x,y,name=$counterspeller[0].x,$counterspeller[0].y,counterspell_aura
            halo="halo/counterspell/counterspell-aoe.png"
        [/item]
    )} {/IF}
    {CLEAR_VARIABLE counterspeller}
#enddef
#define REFRESH_COUNTERSPELLED
    {REMOVE_OBJECT counterspelled ()}
    [store_unit]
        {FILTER_OBJECT_ID skill_counterspell}
        variable=counterspeller
    [/store_unit]
    {IF} {VARIABLE_CONDITIONAL counterspeller.length greater_than 0} {THEN (
        [modify_unit]
            {FILTER( {FILTER_LOCATION radius,x,y=3,$counterspeller[0].x,$counterspeller[0].y} )}
            [object]
                id=counterspelled
                {EFFECT attack (
                    special_id=magical
                    attack_weight,defense_weight=0,0
                    [set_specials]
                        mode=replace
                        [dummy]
                            id,name=counterspelled,_"<span color='#DD6F6F'>counterspelled</span>" # change text color to red
                            description=_"Counterspell is nullifying this magical attack."
                        [/dummy]
                    [/set_specials])}
            [/object]
        [/modify_unit]
    )} {/IF}
    {CLEAR_VARIABLE counterspeller}
#enddef
#define EVENT_COUNTERSPELL
    #------------------------
    # COUNTERSPELL IS CAST
    #------------------------
    # events only support 1 unit with counterspell at a time
    [event]
        name=skill_counterspell
        first_time_only=no
        {FIRE_EVENT skill_illusion_cancel}

        {GIVE_OBJECT_TO id=Delfador id=skill_counterspell_casting}
        {DELAY 1200} # wait for casting anim to almost-complete

        {GIVE_OBJECT_TO id=Delfador id=skill_counterspell}
        {REFRESH_COUNTERSPELL_VISUAL}
        {REMOVE_OBJECT skill_counterspell_casting ()}
        {REFRESH_COUNTERSPELLED}
        [event]
            name=skill_counterspell_cancel
            {REMOVE_OBJECT skill_counterspell ()}
            {SOUND skill-polymorph.wav}
            {REFRESH_COUNTERSPELL_VISUAL}
            {REFRESH_COUNTERSPELLED}
        [/event]
        {FIRE_EVENT explain_counterspell}
    [/event]

    #------------------------
    # COUNTERSPELLER MOVES
    #------------------------
    [event]
        name,first_time_only=moveto,no
        {FILTER_OBJECT_ID skill_counterspell}
        {REFRESH_COUNTERSPELL_VISUAL}
        {REFRESH_COUNTERSPELLED}
        [allow_undo]
        [/allow_undo]
        [on_undo]
            delayed_variable_substitution=yes
            {REFRESH_COUNTERSPELL_VISUAL}
            {REFRESH_COUNTERSPELLED}
        [/on_undo]
    [/event]
    [event]
        name,first_time_only=exit hex,no
        {FILTER_OBJECT_ID skill_counterspell}
        [remove_item]
            image=counterspell_aura
        [/remove_item]
        [allow_undo]
        [/allow_undo]
    [/event]
    [event]
        name,first_time_only=die,no
        {FILTER_OBJECT_ID skill_counterspell}
        [remove_item]
            image=counterspell_aura
        [/remove_item]
        {REMOVE_OBJECT counterspelled ()}
    [/event]

    #------------------------
    # COUNTERSPELLEE MOVES
    #------------------------
    [event]
        name=moveto,unit placed,pre attack
        first_time_only=no
        {FILTER({NOT({FILTER_WML_OBJECT_ID skill_counterspell})})}
        {FILTER_CONDITION({HAVE_UNIT ({FILTER_WML_OBJECT_ID skill_counterspell})} )}
        {REFRESH_COUNTERSPELLED}
        [allow_undo]
        [/allow_undo]
        [on_undo]
            delayed_variable_substitution=yes
            {REFRESH_COUNTERSPELLED}
        [/on_undo]
    [/event]

    #------------------------
    # EXPLAIN COUNTERSPELL
    #------------------------
    [event]
        name=explain_counterspell
        {FILTER_CONDITION({VARIABLE_CONDITIONAL unlock_counterspell            equals yes})} # don't say this line when mirror delfador casts counterspell in S04
        {FILTER_CONDITION({VARIABLE_CONDITIONAL counterspell_was_explained not_equals yes})}
        {FILTER_CONDITION( {HAVE_UNIT id,level=Delfador,0-3} )} # this would sound weird if triggered too late in the campaign
        [message]
            speaker=Delfador
            #po: Delfador has just cast his Counterspell spell. Magical attacks (including Delfador's) are disabled when near Delfador
            #po: explicitly make this a Delfador invention (with a bit of self-fulfilling/recursive prophecy to boot). Don't want counterspell messing up the universe at large
            message=_"They called me crazy, but I always knew I could figure out a way to block magic! I just needed to copy what I— the fake I— did during that prophecy."
        [/message]
        {VARIABLE counterspell_was_explained yes} # only say this voiceline once per campaign
    [/event]

    #------------------------
    # DISABLE SPELLCASTING
    #------------------------
    # not sure how to detect objects with lua, so just set a variable instead (which spellcasting.lua can read)
    [event]
        name=skill_counterspell
        first_time_only=no
        {VARIABLE counterspell_active yes}
    [/event]
    [event]
        name=skill_counterspell_cancel
        first_time_only=no
        {CLEAR_VARIABLE counterspell_active}
    [/event]

    #------------------------
    # RESELECT SPELLS
    #------------------------
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_counterspell not_equals yes})}
        {FIRE_EVENT skill_counterspell_cancel}
    [/event]
    [event]
        name=victory
        first_time_only=no
        {FIRE_EVENT skill_counterspell_cancel}
    [/event]
#enddef
#define ANIMATIONS_COUNTERSPELL PATH
    [standing_anim]
        {FILTER_OBJECT_ID skill_counterspell_casting}
        sound_start_time=-1250   {SOUND_FRAME sound=skill-counterspell.wav}
        start_time=-1250         {FRAME image={PATH}/delfador-ranged[1,2,1].png:[150,950,150]}
        overlay_start_time=-900  {OVERLAY_FRAME (image=halo/counterspell/counterspell-aoe.png:900
                                                 auto_hflip,alpha=no,0~1)}
        overlay2_start_time=-900 {OVERLAY2_FRAME (image="halo/counterspell/ucircle-b-[12~23].png~SCALE(120,70):75"
                                                 auto_hflip,alpha=no,0~0.6)}
        overlay3_start_time=-600 {OVERLAY3_FRAME (image="halo/counterspell/ucircle-b-[14~07].png~SCALE(180,105)~CS(-25,-25,-25):75"
                                                 auto_hflip,alpha=no,0~0.4)}
        overlay4_start_time=-300 {OVERLAY4_FRAME (image="halo/counterspell/ucircle-b-[07~10].png~SCALE(264,154)~CS(-100,-100,-100):75"
                                                 auto_hflip,alpha=no,0~0.2)}
    [/standing_anim]
    [movement_anim]
        {FILTER_OBJECT_ID skill_counterspell}
        {OVERLAY_FRAME (auto_hflip,image=no,halo/counterspell/counterspell-aoe.png
                         offset=0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200 )}
        {OVERLAY2_FRAME (auto_hflip,alpha,image=no,0.6,"halo/counterspell/ucircle-b-[12~23].png~SCALE(120,70):75"
                         offset=0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200 )}
        {OVERLAY3_FRAME (auto_hflip,alpha,image=no,0.4,"halo/counterspell/ucircle-b-[14~07].png~SCALE(180,105)~CS(-25,-25,-25):75"
                         offset=0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200 )}
        {OVERLAY4_FRAME (auto_hflip,alpha,image=no,0.2,"halo/counterspell/ucircle-b-[07~10].png~SCALE(264,154)~CS(-100,-100,-100):75"
                         offset=0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200 )}
    [/movement_anim]
#enddef

#############################
# POLYMORPH
#############################
#define EVENT_POLYMORPH_TYPE NAME TYPE PROFILE
    [event]
        name=capture
        first_time_only=no
        {FILTER id=Delfador}
        {VARIABLE captured_village_this_turn yes}
    [/event]
    [event]
        name=new turn,victory
        first_time_only=no
        {CLEAR_VARIABLE captured_village_this_turn}
    [/event]
    [event]
        name={NAME}
        first_time_only=no
        {IF}    {HAVE_UNIT( id,formula=Delfador,"(self.moves=0)" {FILTER_ADJACENT(level,is_enemy=1-99,true)} )}
            {OR({HAVE_UNIT( id,formula=Delfador,"(self.attacks_left=0)" )})}
            {THEN( {VARIABLE zoc_penalty 99} )}
            {ELSE( {VARIABLE zoc_penalty  0} )}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL captured_village_this_turn equals yes}
            {THEN( {VARIABLE village_penalty 99} )}
            {ELSE( {VARIABLE village_penalty  0} )}
        {/IF}

        {FIRE_EVENT skill_illusion_cancel}

        # remove Delfador
        {SOUND skill-polymorph.wav}
        {ANIMATE_UNIT id=Delfador levelout}

        {IF} {HAVE_UNIT id,status=Delfador,slowed  } {THEN({VARIABLE delf_slowed   yes})}
        {/IF}
        {IF} {HAVE_UNIT id,status=Delfador,poisoned} {THEN({VARIABLE delf_poisoned yes})}
        {/IF}
        [store_unit]
            {FILTER id=Delfador}
            variable,kill=p,yes
        [/store_unit]
        [redraw]
        [/redraw]

        # determine portrait
        {VARIABLE profile_suffix "~BLIT(portraits/younger_delfador.webp~O(0.6))"}
        {IF} {VARIABLE_CONDITIONAL p.level greater_than 2} {THEN(
            {VARIABLE profile_suffix "~BLIT(portraits/young_delfador.webp~FL()~O(0.6))"}
        )} {/IF}

        # create animal
        [unit]
            side=1
            type={TYPE}
            id,name=Delfador,_"Delfador"
            canrecruit=yes
            profile="{PROFILE}$profile_suffix"
            [filter_recall]
                level=9999 # not allowed to recruit or recall, but still a leader (in case filters check for that)
            [/filter_recall]
            x,y,facing=$p.x,$p.y,$p.facing
            attacks_left=$p.attacks_left
            hitpoints=$p.hitpoints
            experience=$p.experience
            {MODIFICATIONS( [object]
                {EFFECT max_experience set=$p.max_experience}
                {EFFECT level set=$p.level} # so the spellcasting dialog doesn't break
            [/object] )}
        [/unit]
        {IF} {VARIABLE_CONDITIONAL delf_slowed   equals yes} {THEN({MODIFY_UNIT id=Delfador status.slowed   yes})}
        {/IF}
        {IF} {VARIABLE_CONDITIONAL delf_poisoned equals yes} {THEN({MODIFY_UNIT id=Delfador status.poisoned yes})}
        {/IF}
        {CLEAR_VARIABLE delf_slowed,delf_poisoned}

        [modify_unit]
            {FILTER id=Delfador}
            moves=$( $this_unit.max_moves - ($p.max_moves-$p.moves) - $zoc_penalty - $village_penalty)
        [/modify_unit]
        {CLEAR_VARIABLE zoc_penalty,village_penalty}

        # use Delfador's literal HP instead of proportional HP scaling, so that polymorphed forms scale as Delfador levels up and gains hitpoints
        {VARIABLE max_hp_change $p.max_hitpoints}
        {STORE_UNIT_VAR id=Delfador max_hitpoints animal_hp}
        {VARIABLE_OP max_hp_change sub $animal_hp} # I can't figure out how to do this math in [object], and [modify_unit] gets overwritten each combat
        {GIVE_OBJECT_TO id=Delfador (id={NAME} {EFFECT hitpoints increase_total=$max_hp_change})} # id={NAME} tells lua this ability is cancellable
        {CLEAR_VARIABLE max_hp_change,animal_hp}

        #------------------------
        # BALANCE CHANGES
        #------------------------
        # polymorph is supposed to be about multiple situational forms.
        # Stoat is worse than levitate, Bear is worse than a village, Crab is worse than the shield spell (and ok, Roc is pretty good)
        # but you get them all at once with Polymorph

        # Stoat (mobility)
        # a cheap, budget mobility option. 6mp, skirmisher, and good movement in snow/ice.
        # Its dodge is unimpressive because of poor resistances, though it might be useful defensively if you're purely fighting saurian augurs or ghosts or something
        [object]
            {FILTER id,type=Delfador,"Frost Stoat"}
            {EFFECT movement_costs (replace=yes
                [movement_costs]
                    frozen,sand,forest,hill,mountain=1,1,1,2,2
                [/movement_costs])}
        [/object]

        # Bear (recovery)
        # a great way to regain HP, and because it's percentage-based it also scales as you level up. Bear also gets 70% defense and full movement in mountains, and deals decent damage at night.
        [object]
            {FILTER id,type=Delfador,"Cave Bear"}
            {EFFECT attack ( #name=fangs
                [set_specials]
                    mode=append
                    [dummy]
                        id,name=consume,_"consume"
                        description=_"This unit regains <span color='#00FF00'>30%</span> of its maximum hitpoints whenever it kills a living unit."
                    [/dummy]
                [/set_specials])}
        [/object]

        # Crab (tank)
        # a defensive option, with great resistances and decent damage but terrible movement.
        # I find it best used as a replacement for the Shield spell, particularly when you can poison many attackers.

        # Roc (mobility/damage)
        # an outstanding mobility option, and has decent damage as well. I find it best used as a superior Levitate spell.

        [redraw]
            clear_shroud=yes
        [/redraw]
        {ANIMATE_UNIT id=Delfador levelin}

        #------------------------
        # UN-POLYMORPH
        #------------------------
        [event]
            name={NAME}_cancel,victory
            {SOUND skill-polymorph.wav}
            {ANIMATE_UNIT id=Delfador levelout}

            {IF} {HAVE_UNIT id,status=Delfador,slowed  } {THEN({VARIABLE delf_slowed   yes})}
            {/IF}
            {IF} {HAVE_UNIT id,status=Delfador,poisoned} {THEN({VARIABLE delf_poisoned yes})}
            {/IF}
            [store_unit]
                {FILTER id=Delfador}
                variable,kill=p2,yes
            [/store_unit]
            [redraw]
            [/redraw]

            [unstore_unit]
                variable=p
                find_vacant=yes # otherwise we overwrite any unit at Delfador's old position
                fire_event=yes
            [/unstore_unit]
            [modify_unit]
                {FILTER id=Delfador}
                x,y,facing=$p2.x,$p2.y,$p2.facing
                hitpoints,experience,attacks_left=$p2.hitpoints,$p2.experience,$p2.attacks_left
                moves=$( $this_unit.max_moves - ($p2.max_moves-$p2.moves) )
            [/modify_unit]
            {MODIFY_UNIT id=Delfador status.slowed   $delf_slowed  }
            {MODIFY_UNIT id=Delfador status.poisoned $delf_poisoned}
            {CLEAR_VARIABLE delf_slowed,delf_poisoned}

            {ANIMATE_UNIT id=Delfador levelin}
            [redraw]
                clear_shroud=yes
            [/redraw]
            {CLEAR_VARIABLE p,p2}

            {IF} {HAVE_UNIT (id,defense=Delfador,100)} {THEN(
                [message]
                    speaker=Delfador
                    message=_"My polymorph spell has ended over impassable terrain! I‘m falling to my death!"
                [/message]
                {KILL id=Delfador ANIMATE=yes}
                {VARIABLE delfador_fell_to_death yes} # if result=defeat triggers from name=victory, result=defeat gets ignored. Instead, immediately end it in defeat next prestart
                [endlevel]
                    result=defeat
                [/endlevel]
            )} {/IF}
            {FIRE_EVENT skill_polymorph_finished_cancelling}
        [/event]
    [/event]
    #------------------------
    # EXPLAIN POLYMORPH
    #------------------------
    [event]
        name=die
        {FILTER_SECOND id=Delfador}
        {FILTER_CONDITION({VARIABLE_CONDITIONAL p.length not_equals 0})}
        {FILTER_CONDITION({VARIABLE_CONDITIONAL polymorph_was_explained not_equals yes})}
        {FILTER_CONDITION( {HAVE_UNIT id,level=Delfador,0-3} )} # this would sound weird if triggered too late in the campaign
        [message]
            speaker=Delfador
            #po: Delfador has just killed a unit while shapeshifted into an animal with his Polymorph spell
            message= _ "And so old Methor proves himself right once again — transmutation magic is <b>not</b> useless!"
            #<span size='x-small'>Though I still say fireballs are still a lot more photogenic.</span>" # anachronism; hopefully not a big deal. Or who knows, maybe there's some kind of magical photography at Alduin.
        [/message]
        {VARIABLE polymorph_was_explained yes} # only say this voiceline once per campaign
    [/event]
#enddef
#define EVENT_POLYMORPH
    {EVENT_POLYMORPH_TYPE skill_polymorph_stoat  (Frost Stoat) "portraits/monsters/stoat.webp"}
    {EVENT_POLYMORPH_TYPE skill_polymorph_bear   (Cave Bear  ) "portraits/monsters/bear.webp"}
    {EVENT_POLYMORPH_TYPE skill_polymorph_crab   (Giant Crab ) "portraits/crab.webp"}
    {EVENT_POLYMORPH_TYPE skill_polymorph_roc    (Roc        ) "portraits/monsters/falcon.webp"}
    [event] # implement the cave bear's "consume" ability
        name=last breath # not die, because plot units are often {KILL}ed during their last breath
        first_time_only=no
        {FILTER( {NOT trait=undead,elemental} )}
        {FILTER_SECOND_ATTACK special_id=consume}

        {STORE_UNIT_VAR id=$second_unit.id max_hitpoints consume_heal_amount}
        {VARIABLE_OP consume_heal_amount multiply 0.3}
        [heal_unit]
            {FILTER id=$second_unit.id}
            amount,animate=$consume_heal_amount,yes
            restore_statuses=no
        [/heal_unit]
        {CLEAR_VARIABLE consume_heal_amount}
    [/event]
#enddef
#define ANIMATIONS_POLYMORPH PATH
    [animation]
        apply_to=skill_polymorph
        start_time=-100
        {FRAME image={PATH}/delfador-ranged[1~2].png:50}
    [/animation]
#enddef

#############################
# GLAMOUR
#############################
#define EVENT_GLAMOUR
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_glamour equals yes})}
        [object]
            id,take_only_once=skill_glamour,no {FILTER id=Delfador}
            {EFFECT new_ability ([abilities]
                {ABILITY_LEADERSHIP}
            [/abilities]  )}
        [/object]
    [/event]
#enddef


















































#######################################################################################################################################################
#                                                                   GROUP 3 SKILLS
#######################################################################################################################################################
#############################
# FIREBALL3
#############################
#define EVENT_FIREBALL3
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_fireball3 equals yes})}
        [object]
            id,take_only_once=skill_fireball3,no {FILTER id=Delfador}
            {EFFECT new_attack (
                name,description,icon=fireball,_"fireball",attacks/fireball.png
                range,type,damage,number=ranged,fire,12,4
                [specials]
                    {WEAPON_SPECIAL_MAGICAL}
                [/specials] )}
        [/object]
    [/event]
#enddef

#############################
# DANCING DAGGERS
#############################
#define EVENT_DANCING_DAGGERS
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_dancing_daggers equals yes})}
        [object]
            id,take_only_once=skill_dancing_daggers,no {FILTER id=Delfador}
            {EFFECT new_attack (
                name,description,icon="dancing daggers",_"dancing daggers",icons/dancing-daggers.png
                range,type,damage,number=ranged,blade,5,8
                [specials]
                    {WEAPON_SPECIAL_BACKSTAB}
                [/specials] )}
        [/object]
    [/event]
#enddef
#define ONEANIM_DANCING_DAGGERS A B C D
    [attack_anim]
        {FILTER_ATTACK name="dancing daggers"}
        start_time=-350         {FRAME image={PATH}/delfador-leading.png:350}
        overlay_start_time=-350 {OVERLAY_FRAME x,y,image=0,-30,"halo/elven/faerie-fire-halo[1~7].png~SCALE(48,48):75"}
        missile_start_time=-300
        missile2_start_time=-250
        missile3_start_time=-200
        [missile_frame]
            duration,offset,x,y=150,0~0.8,{A}2~{B}2,-15~7
            image="projectiles/dagger-n.png"
            image_diagonal="projectiles/dagger-ne.png"
        [/missile_frame]
        [missile2_frame]
            duration,offset,x,y=150,0~0.8,{C}2~{D}2,-25~-7
            image="projectiles/dagger-n.png"
            image_diagonal="projectiles/dagger-ne.png"
        [/missile2_frame]
        [missile3_frame]
            duration,offset,x,y=150,0~0.8,0~0,-20~0
            image="projectiles/dagger-n.png"
            image_diagonal="projectiles/dagger-ne.png"
        [/missile3_frame]
        {SOUND:HIT_AND_MISS throwing-knife.ogg throwing-knife-miss.ogg -200}
    [/attack_anim]
#enddef
#define ANIMATIONS_DANCING_DAGGERS PATH
    {ONEANIM_DANCING_DAGGERS -  -  () ()}
    {ONEANIM_DANCING_DAGGERS () () -  - }
    {ONEANIM_DANCING_DAGGERS -  () ()  -}
    {ONEANIM_DANCING_DAGGERS () -  -  ()}
#enddef

#############################
# ILLUSION
#############################
#define REFRESH_ILLUSION_VISUAL
    [remove_item]
        image=illusion_aura
    [/remove_item]
    [store_unit]
        {FILTER_OBJECT_ID skill_illusion}
        variable=illusionist
    [/store_unit]
    {IF} {VARIABLE_CONDITIONAL illusionist.length greater_than 0} {THEN(
        [item]
            x,y,name=$illusionist[0].x,$illusionist[0].y,illusion_aura
            halo="halo/terror/terrorCW-[21~45].png~O(0.07)~CS(252,174,30):100, halo/terror/terrorCW-[1~20].png~O(0.07)~CS(252,174,30):100"
        [/item]
        [item]
            x,y,name=$illusionist[0].x,$illusionist[0].y,illusion_aura
            halo="halo/terror/terrorCCW-[1~45].png~O(0.07)~CS(225,225,0)~FL():175"
        [/item]
        [item]
            x,y,name=$illusionist[0].x,$illusionist[0].y,illusion_aura
            halo="halo/terror/terrorCCW-[1~45].png~O(0.07)~CS(252,215,0):100"
        [/item]
        {VARIABLE flip ""}
        {IF}{VARIABLE_CONDITIONAL illusionist.facing contains "w"}{THEN(  {VARIABLE flip "~FL()"}  )}
        {/IF}
        [item] # don't use a standing anim, because then I'd need to also create a attack/defense/everything animations
            x,y,name=$illusionist[0].x,$illusionist[0].y,illusion_aura
            halo="units/drakes/armageddon.png$flip~RC(magenta>white)~O([0.7,0.7,0.7,0.69,0.68,0.67,0.66,0.65,0.64,0.63,0.62,0.61,0.6,0.59,0.58,0.57,0.56,0.55,0.54,0.53,0.52,0.51,0.5,0.49,0.48,0.47,0.46,0.45,0.44,0.43,0.42,0.41,0.4,0.39,0.38,0.37,0.36,0.35,0.34,0.33,0.32,0.31,0.3,0.29,0.28,0.27,0.26,0.25,0.24,0.23,0.22,0.21,0.2,0.2,0.2,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.3,0.31,0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.4,0.41,0.42,0.43,0.44,0.45,0.46,0.47,0.48,0.49,0.5,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.6,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69]):75"
        [/item]
        {CLEAR_VARIABLE flip}
    )} {/IF}
    {CLEAR_VARIABLE illusionist}
#enddef
#define REFRESH_ENTHRALLED
    {REMOVE_OBJECT enthralled ()}
    {MODIFY_UNIT () status.dazed no}
    [store_unit]
        {FILTER_OBJECT_ID skill_illusion}
        variable=illusionist
    [/store_unit]
    {IF} {VARIABLE_CONDITIONAL illusionist.length greater_than 0} {THEN (
        [modify_unit]
            {FILTER( {NOT({IS_ALLY})} {FILTER_LOCATION radius,x,y=2,$illusionist[0].x,$illusionist[0].y} )}
            [object]
                id=enthralled
                {EFFECT status add=dazed}
                {EFFECT attack ([set_specials]
                    mode=append
                    [chance_to_hit]
                        [filter_self]
                            [filter_weapon]{NOT special_id=magical}
                            [/filter_weapon]
                        [/filter_self]
                        sub=10
                    [/chance_to_hit]
                [/set_specials])}
                {EFFECT defense ([defense]
                    flat,sand,frozen,forest,hills,mountains=10,10,10,10,10,10
                    swamp_water,reef,shallow_water,deep_water=10,10,10,10
                    cave,fungus,castle,village,unwalkable=10,10,10,10,10
                [/defense])}
            [/object]
        [/modify_unit]
    )} {/IF}
   {CLEAR_VARIABLE illusionist}
#enddef
#define EVENT_ILLUSION
    #------------------------
    # ILLUSION IS CAST
    #------------------------
    # events only support 1 unit with illusion at a time
    [event]
        name=skill_illusion
        first_time_only=no
        {ANIMATE_UNIT id=Delfador skill_illusion}
        {GIVE_OBJECT_TO id=Delfador (id=skill_illusion {EFFECT profile portrait="portraits/drakes/inferno.webp~O(0.6)~BLIT( portraits/young_delfador.webp~FL(), 0,108 )"})}

        {REFRESH_ILLUSION_VISUAL}
        {REFRESH_ENTHRALLED}
#         [event]
#             name=attacker hits
#             id=illusion_damage_attacker
#             {FILTER_SECOND id=Delfador}
#             {FIRE_EVENT skill_illusion_cancel}
#         [/event]
#         [event]
#             name=defender hits
#             id=illusion_damage_defender
#             {FILTER id=Delfador}
#             {FIRE_EVENT skill_illusion_cancel}
#         [/event]
        [event]
            name=skill_illusion_cancel
#             [remove_event]
#                 id=illusion_damage_defender,illusion_damage_attacker
#             [/remove_event]
            {REMOVE_OBJECT skill_illusion ()}
            {SOUND skill-polymorph.wav}
            {REFRESH_ILLUSION_VISUAL}
            {REFRESH_ENTHRALLED}
        [/event]
    [/event]

    #------------------------
    # ILLUSIONIST MOVES
    #------------------------
    [event]
        name,first_time_only=moveto,no
        {FILTER_OBJECT_ID skill_illusion}
        {REFRESH_ILLUSION_VISUAL}
        {REFRESH_ENTHRALLED}
        [allow_undo]
        [/allow_undo]
        [on_undo]
            delayed_variable_substitution=yes
            {REFRESH_ILLUSION_VISUAL}
            {REFRESH_ENTHRALLED}
        [/on_undo]
    [/event]
    [event]
        name,first_time_only=exit hex,no
        {FILTER_OBJECT_ID skill_illusion}
        [remove_item]
            image=illusion_aura
        [/remove_item]
        [allow_undo]
        [/allow_undo]
    [/event]

    #------------------------
    # ENTHRALEE MOVES
    #------------------------
    [event]
        name=moveto,unit placed
        first_time_only=no
        {FILTER({NOT({FILTER_WML_OBJECT_ID skill_illusion})})}
        {FILTER({FILTER_LOCATION( radius=3 {FILTER_OBJECT_ID skill_illusion} )})} # refresh enthrall whenever a unit moves near Delfador
        {REFRESH_ENTHRALLED}
        [allow_undo]
        [/allow_undo]
        [on_undo]
            delayed_variable_substitution=yes
            {REFRESH_ENTHRALLED}
        [/on_undo]
    [/event]

    #------------------------
    # FLAVOR MESSAGE
    #------------------------
    [event]
        name=attack
        {FILTER_OBJECT_ID skill_illusion}
        {FILTER_CONDITION({VARIABLE_CONDITIONAL attack.name equals fireball})}
        {FILTER_CONDITION({VARIABLE_CONDITIONAL finished_drakefire_taunt not_equals yes})}
        [message]
            speaker=unit
            #po: Delfador is magically disguised as a drake, and has just case a fireball
            message=_"Taste drakefire!"
        [/message]
        {VARIABLE finished_drakefire_taunt yes}
    [/event]

    #------------------------
    # RESELECT SPELLS
    #------------------------
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_illusion not_equals yes})}
        {FIRE_EVENT skill_illusion_cancel}
    [/event]
    [event]
        name=victory
        first_time_only=no
        {FIRE_EVENT skill_illusion_cancel}
    [/event]
#enddef
#define ANIMATIONS_ILLUSION PATH
    [animation]
        apply_to=skill_illusion
        sound_start_time   =-600 {SOUND_FRAME    sound=skill-illusion.wav}
        overlay_start_time =-400 {OVERLAY_FRAME  alpha,image=0.05~0.80,"units/drakes/armageddon.png~RC(magenta>white)~MASK(masks/teleport-mask-[9~0].png):100"}

        overlay2_start_time=-600 {OVERLAY2_FRAME (halo_x,halo_y,halo= 10,-30~30,halo/teleport-[9,8,1~9].png:75)}
        overlay3_start_time=-400 {OVERLAY3_FRAME (halo_x,halo_y,halo=  0,-40~40,halo/teleport-[9,8,1~9].png:75)}
        overlay4_start_time=-200 {OVERLAY4_FRAME (halo_x,halo_y,halo=-10,-30~30,halo/teleport-[9,8,1~9].png:75)}

        overlay5_start_time=-400 {OVERLAY5_FRAME auto_hflip,alpha,image=no,0~1,"halo/terror/terrorCW-[ 11~20].png~O(0.10)~CS(252,174,30):100"}
        overlay6_start_time=-400 {OVERLAY6_FRAME auto_hflip,alpha,image=no,0~1,"halo/terror/terrorCCW-[40~45].png~O(0.10)~CS(225,225,0)~FL():175"}
        overlay7_start_time=-400 {OVERLAY7_FRAME auto_hflip,alpha,image=no,0~1,"halo/terror/terrorCCW-[36~45].png~O(0.10)~CS(252,215,0):10"}
    [/animation]
    [movement_anim]
        base_score=99 # if we have multiple active spells with movement animations, prefer illusion's since it's the most obvious
        {FILTER_OBJECT_ID skill_illusion}
        {OVERLAY_FRAME (image="units/drakes/armageddon.png~RC(magenta>white)~O(0.4):200"
                        offset=0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200,0~1:200 )}
    [/movement_anim]
#enddef

#############################
# ANIMATE FIRE
#############################
#define EVENT_ANIMATE_FIRE
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_animate_fire equals yes})}
        [object]
            id,take_only_once=skill_animate_fire,no {FILTER id=Delfador}
            {EFFECT new_ability ([abilities]
                [leadership]
                    id,name,description=summoner, _"summoner", _"This unit is a skilled summoner. Adjacent allied elementals deal +100% damage and gain +100% experience.

Summoned elementals dissipate at the end of each scenario."
                    value,affect_self,affect_allies="100",no,yes # unlike leadership, this affects allies too (not very relevant)
                    cumulative=yes # stacks with regular leadership
                    [affect_adjacent]
                        {FILTER trait=elemental}
                    [/affect_adjacent]
                [/leadership]
            [/abilities])}
        [/object]
        [allow_extra_recruit]
            id,extra_recruit=Delfador,Fire Guardian
        [/allow_extra_recruit]
    [/event]
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_animate_fire not_equals yes})}
        {KILL (side,type_adv_tree=1,Fire Guardian)} # kill if we select a different skill
    [/event]
    [event]
        name=victory,turn 1
        {KILL (side,type_adv_tree=1,Fire Guardian)} # kill at the end of every scenario (and at the start, in case [store_units] messes with things)
    [/event]
#enddef

#############################
# CONTINGENCY
#############################
#define EVENT_CONTINGENCY
    [event]
        name=last breath,trigger_contingency
        first_time_only=no
        {FILTER( side,race=1,human {NOT id=Delfador} )}
        {FILTER_CONDITION( {CONTINGENCY_GLOBAL_CONDITIONS} )}

        {FIRE_EVENT explain_contingency}
        {REMOVE_OBJECT skill_panacea_buff id=$unit.id}
        [modify_unit]
            {FILTER id=$unit.id}
            [object]
                duration=turn
                {EFFECT new_animation ([animation]
                    apply_to=skill_contingency
                    sound_start_time   =-900 {SOUND_FRAME sound=skill-contingency.wav}
                    start_time         =-900 {FRAME duration=450}
                                             {FRAME duration,image=450,misc/blank-hex.png}
                    overlay_start_time =-900 {OVERLAY_FRAME  (duration,image=900,halo/contingencyA.png
                                                              alpha=0~1:290,1:320,1~0:290)}
                    overlay2_start_time=-610 {OVERLAY2_FRAME (duration,image=900,halo/contingencyB.png
                                                              alpha=0~1:150,1:20,1~0:150)}
                [/animation])}
            [/object]
        [/modify_unit]
        {ANIMATE_UNIT id=$unit.id skill_contingency}
        [floating_text]
            x,y,text=$unit.x,$unit.y,_"<span color='#ffffff' size='x-small'>Contingency</span>"
        [/floating_text]
        {PUT_TO_RECALL_LIST id=$unit.id}
        [modify_unit]
            {FILTER id=$unit.id}
#             hitpoints=1 # your unit is alive, but badly injured. It'll still get Wesnoth's default scenario-end heal
            hitpoints="$( $this_unit.max_hitpoints )" # for some reason {FULL_HEAL} doesn't work here
            role=contingency # used by Delfador's recall filter in S11
        [/modify_unit]
        {MODIFY_UNIT id=$unit.id status.poisoned no}
        [fire_event]
            name=saved_by_contingency
            [primary_unit]
                id=$unit.id
            [/primary_unit]
        [/fire_event]
    [/event]
    [event]
        name=explain_contingency
        {FILTER_CONDITION({VARIABLE_CONDITIONAL contingency_was_explained not_equals yes})}
        [message]
            speaker=Delfador
            #po: Delfador has just saved a unit from lethal damage with the Contingency spell
            message=_"I’ve got you! You can thank my old master for inventing this spell."
        [/message]
        [message]
            speaker=Methor
            #po: Methor is probably not here right now to say this line, but he might be
            message=_"Well, somebody had to! And you’re welcome!"
        [/message]
        {VARIABLE contingency_was_explained yes} # only say this voiceline once per campaign
    [/event]
    [event]
        name=victory
        {MODIFY_UNIT role=contingency role ""}
    [/event]
#     [event]
#         name=explain_contingency_failure # can say this voiceline every scenario
#         [message]
#             speaker=Delfador
#             message=_"I’m sorry, I don’t have enough magic left to save you!"
#         [/message]
#     [/event]
#enddef
#define ANIMATIONS_CONTINGENCY PATH
#enddef


















































#######################################################################################################################################################
#                                                                   GROUP 4 SKILLS
#######################################################################################################################################################
#############################
# FIREBALL4
#############################
#define EVENT_FIREBALL4
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_fireball4 equals yes})}
        [object]
            id,take_only_once=skill_fireball4,no {FILTER id=Delfador}
            {EFFECT new_attack (
                name,description,icon=fireball,_"fireball",attacks/fireball.png
                range,type,damage,number=ranged,fire,18,4
                [specials]
                    {WEAPON_SPECIAL_MAGICAL}
                [/specials] )}
        [/object]
    [/event]
#enddef

#############################
# LIGHTNING
#############################
#define EVENT_LIGHTNING
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_lightning equals yes})}
        [object]
            id,take_only_once=skill_lightning,no {FILTER id=Delfador}
            {EFFECT new_attack (
                name,description,icon=lightning,_"lightning",attacks/lightning.png
                range,type,damage,number=ranged,fire,14,4
                [specials]
                    {WEAPON_SPECIAL_MAGICAL}
                    [dummy]
                        id,name,description=chain,_"chain",_"If this attack kills an enemy, you may attack again."
                    [/dummy]
                [/specials] )}
        [/object]
    [/event]
    [event]
        name=last breath
        first_time_only=no
        {FILTER_SECOND_ATTACK special_id=chain}
        {MODIFY_UNIT id=$second_unit.id attacks_left 1}
    [/event]
#enddef
#define ANIMATIONS_LIGHTNING_SINGLEBOLT DIRECTION_NUMBER PATH
    [attack_anim]
        {FILTER_ATTACK name=lightning}
        {LIGHTNING_BOLT {DIRECTION_NUMBER} }
        start_time=-300
        {FRAME image={PATH}/delfador.png:50}
        {FRAME image={PATH}/delfador-ranged[1,2,1].png:[125,250,75]}
        {FRAME image={PATH}/delfador.png:75}
        {SOUND:HIT_AND_MISS lightning.ogg lightning-miss.ogg -300}
    [/attack_anim]
#enddef
#define ANIMATIONS_LIGHTNING PATH
    {ANIMATIONS_LIGHTNING_SINGLEBOLT 1 {PATH}}
    {ANIMATIONS_LIGHTNING_SINGLEBOLT 2 {PATH}}
    {ANIMATIONS_LIGHTNING_SINGLEBOLT 3 {PATH}}
#enddef

#############################
# TIME DILATION
#############################
#define TIME_DILATION_START
[0072,0071,0070,0069,0068,0067,0066,0065,0064,0063,0062,0061,0060,0059,0058,0057,0056,0055,0054,0053,0052,0051,0050,0049,0048,0047,0046,0045,0044,0043].png~O([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1])~SCALE(48,48)~CS(-150,150,-150)~FL() #enddef
# 0072 starts out transparent, so we don't need to fade it

#define TIME_DILATION_END
[0023,0024,0025,0026,0027,0028,0029,0030,0031,0032,0033,0034,0035,0036,0037,0038,0039,0040,0041,0042,0043,0044,0045,0046,0047,0048,0049,0050,0051,0052,0053,0054,0055,0056,0057,0058,0059,0060,0061,0062,0063,0064,0065,0066,0067,0068,0069,0070,0071,0072].png~O([0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])~SCALE(48,48)~CS(100,-255,-255) #enddef
# longer than TIME_DILATION_START, to sync up with the sound

#define EVENT_TIME_DILATION
    [event]
        name=skill_time_dilation
        first_time_only=no
        [store_unit]
            {FILTER( {IS_ALLY} )}
            variable=time_dilation_units
        [/store_unit]

        # animate Delfador
        {GIVE_OBJECT_TO id=Delfador (id=skill_time_dilation_casting) }
        {DELAY 2100} # wait for casting anim to be partway done

        # animate allies
        [foreach]
            array=time_dilation_units
            [do]{GIVE_OBJECT_TO (id=$this_item.id {NOT(id=Delfador)}) (id=skill_time_dilation_start  {EFFECT halo halo="halo/time-dilation/{TIME_DILATION_START}:50"}) }
            [/do]
        [/foreach]
        {DELAY 1500} # wait for the start-anim AND casting-anim to finish animating
        {REMOVE_OBJECT skill_time_dilation_casting ()}
        {REMOVE_OBJECT skill_time_dilation_start   ()}

        # apply buff
        [foreach]
            array=time_dilation_units # for some reason I couldn't get these working with WFL, e.g. [modify_unit] moves=$( $this_unit.moves + $this_unit.max_moves )
            [do] {VARIABLE moves $this_item.moves       }  {VARIABLE_OP moves add $this_item.max_moves}  {MODIFY_UNIT id=$this_item.id moves       $moves }  {CLEAR_VARIABLE moves}
                 {VARIABLE atks  $this_item.attacks_left}  {VARIABLE_OP atks  add 1                   }  {MODIFY_UNIT id=$this_item.id attacks_left $atks }  {CLEAR_VARIABLE atks }
                 [modify_unit]
                    {FILTER id=$this_item.id}
                    [object]
                        id=skill_time_dilation_buff
                        duration=turn # this object should get cleared sooner, but duration=turn is a fallback in case something breaks
                        {EFFECT movement increase=100%} # means this also affects other-side allies when they refresh their turn
                        {EFFECT max_attacks increase=1}
                        {EFFECT halo (
                            {FILTER( {NOT(type=Mage of Light)} )} # MoL already has a halo
                            halo="halo/time-dilation/[0001,0002,0003,0004,0005,0006,0007,0008,0009,0010,0011,0012,0013,0014,0015,0016,0017,0018,0019,0020,0021,0022,0023,0024,0025,0026,0027,0028,0029,0030,0031,0032,0033,0034,0035,0036,0037,0038,0039,0040,0041,0042,0043,0044,0045,0046,0047,0048,0049,0050,0051,0052,0053,0054,0055,0056,0057,0058,0059,0060,0061,0062,0063,0064,0065,0066,0067,0068,0069,0070,0071,0072].png~SCALE(48,48)~O(0.5)"
                        )}
                    [/object]
                [/modify_unit]
            [/do]
        [/foreach]

        #--------------------
        # SLOW ALL DIALATED UNITS
        #--------------------
        [event]
            name=side turn,victory,clear_time_dilation # not "side turn end", because slow gets cleared when your turn ends
            {REMOVE_OBJECT skill_time_dilation_buff ()}
            {SOUND skill-time-dilation-end.wav}
            [foreach]
                array=time_dilation_units
                [do]{GIVE_OBJECT_TO id=$this_item.id (id=skill_time_dilation_end  {EFFECT halo halo="halo/time-dilation/{TIME_DILATION_END}:50"}) }
                [/do]
            [/foreach]

            {DELAY 2500} # wait for the shorthalo to finish animating
            {REMOVE_OBJECT skill_time_dilation_end ()} # do this before status.slowed=yes. For some reason, removing this object afterwards clears the slow on AMLA-ed units (probably something weird with the level-up heal)
            [foreach]
                array=time_dilation_units
                [do]{MODIFY_UNIT id=$this_item.id status.slowed yes}
                [/do]
            [/foreach]
            {CLEAR_VARIABLE time_dilation_units}
        [/event]
    [/event]
    [event]
        name=refresh_delfador_skills
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_time_dilation not_equals yes})}
        {REMOVE_OBJECT skill_time_dilation_buff ()}
    [/event]
    [event]
        name=unit placed
        first_time_only=no
        {REMOVE_OBJECT skill_time_dilation_buff id=$unit.id} # fallback; ensure units can't somehow carry the buff across multiple scenarios
        [allow_undo]
        [/allow_undo]
    [/event]
#enddef
#define ANIMATIONS_TIME_DILATION PATH
    [standing_anim]
        {FILTER_OBJECT_ID skill_time_dilation_casting}
        sound_start_time   =-3600 {SOUND_FRAME     sound=skill-time-dilation.wav}
        start_time         =-3600 {FRAME           image={PATH}/delfador-ranged[1,2,1].png:[100,3600,100]}
        overlay_start_time =-3600 {OVERLAY_FRAME  (x,y,image=   0,   0, "halo/time-dilation/[0001~0072].png:50")}
        overlay2_start_time=-3250 {OVERLAY2_FRAME (x,y,image=-150,  75, "halo/time-dilation/[0001~0072].png~SCALE(108,108)~O(0.7):45")}
        overlay3_start_time=-2900 {OVERLAY3_FRAME (x,y,image= 110,  80, "halo/time-dilation/[0001~0072].png~SCALE(144,144)~O(0.7):40")}
        overlay4_start_time=-2500 {OVERLAY4_FRAME (x,y,image= -40,-130, "halo/time-dilation/[0001~0072].png~SCALE(124,124)~O(0.7):35")}
    [/standing_anim]
#enddef

#############################
# CATACLYSM
#############################
#define CATACLYSM_TERRAIN X Y
    # flatten castle/village/keep/forest
    {IF} {HAVE_LOCATION (
        x,y={X},{Y}
        terrain=C*^*,K*^*,*^V*,*^F*
    )} {THEN(
        {IF} {HAVE_LOCATION (
            x,y={X},{Y}
            terrain=C*^*,K*^*,*^V* # no rubble after destroying a forest
        )} {THEN(
            {VARIABLE_OP rubble rand castle-ruins.png,castle-ruins2.png,castle-ruins3.png,slab1.png,rubble.png,trash.png}
            {PLACE_IMAGE scenery/$rubble {X} {Y}}
        )} {/IF}

        [terrain]
            x,y={X},{Y}
            layer,terrain=overlay,"^"
        [/terrain]
        [terrain]
            x,y={X},{Y} {AND terrain=C*,K*}
            terrain=Rrd
        [/terrain]
        [item]
            name=cataclysm_burning
            x,y,halo={X},{Y},scenery/flames[01~15].png
        [/item]
    )} {/IF}

    # convert flat, ice, or water into ugly flat
    {IF} {HAVE_LOCATION (
        x,y={X},{Y}
        terrain=G*^*,R*^*,Aa^*,I*^*,Ur*^*,W*^*,Ai^*
    )} {THEN(
        {VARIABLE_OP newflat rand Rd,Re,Rb,Ur}
        [terrain]
            x,y={X},{Y} {AND( {NOT terrain=Rrd} )}
            layer,terrain=base,$newflat
        [/terrain]
    )} {/IF}

    # convert hills into dry hills
    {IF} {HAVE_LOCATION (
        x,y={X},{Y}
        terrain=H*^*
    )} {THEN(
        [terrain]
            x,y={X},{Y}
            layer,terrain=base,Hhd
        [/terrain]
    )} {/IF}
    {CLEAR_VARIABLE rubble,newflat}
#enddef
#define CATACLYSM_DAMAGE MULTIPLIERS X Y
    {VARIABLE_OP multiplier rand {MULTIPLIERS}}
    [harm_unit]
        {FILTER( x,y={X},{Y} {NOT id=Delfador} {NOT type="King Eldred","Hunker Eldred"} )}
        kill,amount=no,$($this_unit.hitpoints * $multiplier)
    [/harm_unit]
    [harm_unit]
        {FILTER( x,y={X},{Y} {NOT id=Delfador} {AND type="King Eldred"} )} # hardcode cataclysm's damage specifically vs eldred. No RNG
        kill,amount=no,$($this_unit.hitpoints * 0.7)
    [/harm_unit]
    [harm_unit]
        {FILTER( x,y={X},{Y} {NOT id=Delfador} {AND type="Hunker Eldred"} )}
        kill,amount=no,1
    [/harm_unit]
    {IF} {HAVE_UNIT (x,y,type={X},{Y},King Eldred)} {THEN( {FIRE_EVENT cataclysm_harmed_eldred} )}
    {/IF} # used in S13
    {CLEAR_VARIABLE multiplier}
#     {DELAY 5} # stagger the damage text slightly, so it looks prettier
#enddef
#define EVENT_CATACLYSM
    [event]
        name=skill_cataclysm
        first_time_only=no
        # casting animation
        {GIVE_OBJECT_TO id=Delfador id=skill_cataclysm_casting}
        # formerly {DELAY 1400} with no music, but FADE_MUSIC_OUT seems to take longer than expected
        {FADE_MUSIC_OUT 400} {DELAY 400} {SCREEN_FADER 255,255,255 255 400}
        {REMOVE_OBJECT skill_cataclysm_casting ()}

        # affect all hexes in the AOE, in a random order
        {DO_RANDOMLY_IN_NOTIN radius=5 x,y=99,99 ({CATACLYSM_TERRAIN $locs[$z].x $locs[$z].y}) }

        {STORE_UNIT_VAR id=Delfador x delfX} {STORE_UNIT_VAR id=Delfador y delfY}
        {PLACE_IMAGE scenery/crater.png $x $y} {CLEAR_VARIABLE delfX,delfY}

        {DO_RANDOMLY_IN_NOTIN radius=0 x,y=99,99 ({CATACLYSM_DAMAGE 0.70           $locs[$z].x $locs[$z].y}) }
        {DO_RANDOMLY_IN_NOTIN radius=1 radius=0  ({CATACLYSM_DAMAGE 0.70,0.75,0.80 $locs[$z].x $locs[$z].y}) }
        {DO_RANDOMLY_IN_NOTIN radius=2 radius=1  ({CATACLYSM_DAMAGE 0.70,0.75,0.80 $locs[$z].x $locs[$z].y}) }
        {DO_RANDOMLY_IN_NOTIN radius=3 radius=2  ({CATACLYSM_DAMAGE 0.70,0.75,0.80 $locs[$z].x $locs[$z].y}) }
        {DO_RANDOMLY_IN_NOTIN radius=4 radius=3  ({CATACLYSM_DAMAGE 0.70,0.75,0.80 $locs[$z].x $locs[$z].y}) }
        {DO_RANDOMLY_IN_NOTIN radius=5 radius=4  ({CATACLYSM_DAMAGE 0.70,0.75,0.80 $locs[$z].x $locs[$z].y}) }

        {DELAY 100} # this helps us get a consistent skill animation
        [redraw][/redraw]
        {SCREEN_FADER 255,255,255 0 0}
        {DELAY 50} # tiny delay before the animation makes it catch the eye a little better
        {SOUND skill-cataclysm-end.wav}
        {GIVE_OBJECT_TO id=Delfador (id=skill_cataclysm_casted) }
        {QUAKE ()}  {QUAKE ()}  {QUAKE ()}  {QUAKE ()}  {QUAKE ()}
        {FADE_MUSIC_IN 0}

        # remove casted and fires
        {DO_RANDOMLY_IN_NOTIN radius=5 x,y=99,99 (
            {DELAY 50} # 37 hexes; 50ms delay adds up to 1850ms dela
            [remove_item]
                x,y,image=$locs[$z].x,$locs[$z].y,cataclysm_burning
            [/remove_item] )}
        {REMOVE_OBJECT skill_cataclysm_casted ()}
        [redraw]
        [/redraw] # otherwise the sphere sometimes persists
        {FIRE_EVENT explain_cataclysm}
    [/event]
    [event]
        name=explain_cataclysm
        {FILTER_CONDITION({VARIABLE_CONDITIONAL cataclysm_was_explained not_equals yes})}
        {STORE_UNIT_VAR     ( {NOT side=1} {FILTER_LOCATION( radius=5 {FILTER(id=Delfador)} )} race,canrecruit=human,yes {NOT(type=Crown Prince,King Eldred,Hunker Eldred)} ) id speaker_id} # find an affected unit, preferring a leader
        {IF} {VARIABLE_CONDITIONAL speaker_id equals $null} {THEN(
            {STORE_UNIT_VAR ( {NOT side=1} {FILTER_LOCATION( radius=5 {FILTER(id=Delfador)} )} race,canrecruit=human,no  {NOT(type=Crown Prince,King Eldred,Hunker Eldred)} ) id speaker_id}
        )} {/IF}

        {IF} {VARIABLE_CONDITIONAL speaker_id not_equals $null} {THEN(
            [message]
                speaker=$speaker_id
                # po: Delfador has just cast his cataclysm spell, dealing heavy damage in a large radius and destroying trees/villages/castles
                message=_"Dear lords of light, what was that?!"
            [/message]
            {VARIABLE cataclysm_was_explained yes} # only say this voiceline once per campaign
        )} {/IF}
    [/event]
#enddef
#define ANIMATIONS_CATACLYSM PATH
    [standing_anim]
        {FILTER_OBJECT_ID skill_cataclysm_casting}
        sound_start_time   =-1400 {SOUND_FRAME    sound=skill-cataclysm.wav}
        start_time         =-1800 {FRAME          image={PATH}/delfador-ranged[1,2].png:[100,1900]}
        overlay_start_time =-1800 {OVERLAY_FRAME  alpha,image=0~1.0,"halo/cataclysm/[0001~0024].png:75"}
        overlay2_start_time= -600 {OVERLAY2_FRAME alpha,image=0~1.0,"halo/cataclysm/cataclysm00-[1~6,1~6].png~CS(-100,-255,-255):50"}
    [/standing_anim]
    [standing_anim]
        {FILTER_OBJECT_ID skill_cataclysm_casted}
        {OVERLAY_FRAME  y,alpha,image=72,0.6~0.0,"halo/cataclysm/sphere/[0001~0024,0001~0024].png~SCALE(1000,1000)~CS(-100,-100,-100):50"}
        {OVERLAY_FRAME  image=misc/blank-hex.png:99999}

        {OVERLAY2_FRAME y,alpha,image=-10,5~0,"halo/cataclysm/explosion/[1~9].png~SCALE(700,700):100"}
        {OVERLAY2_FRAME image=misc/blank-hex.png:99999}
    [/standing_anim]
#enddef


















































































































































#######################################################################################################################################################
#                                                                  "PUBLIC" MACROS
#######################################################################################################################################################
#############################
# RESELECT SKILLS
#############################
#define RESELECT_SKILLS_AFTER_OBJECTIVES WML_BEFORE WML_AFTER
    # doing things after showing objectives is hard. This approximates it.
    [listen_for_mousemove]
    [/listen_for_mousemove]
    [event]
        name=mousemove_synced
        [do_command]
            [fire_event]
                raise=mousemove # convert to a synced context
            [/fire_event]
        [/do_command]
    [/event]
    [event]
        name=select
        [do_command]
            [fire_event]
                raise=mousemove # convert to a synced context
            [/fire_event]
        [/do_command]
    [/event]
    [event]
        name=mousemove,recruit,recall,side 1 turn end
        {WML_BEFORE}
        [select_delfador_skills]
        [/select_delfador_skills]
        {CLEAR_VARIABLE spellcasted_this_turn}

#         {IF} {VARIABLE_CONDITIONAL wait_to_select_spells equals yes} {THEN({STORE_SKILLS})}
#         {/IF}
#         # can't unstore afterwards, since skills like Contingency check for the skill_contingency variable, whether or not we've fired refresh_delfador_skills

        {WML_AFTER}
    [/event]
#enddef
#define EVENT_REMOVE_SKILLS
    [event]
        name=refresh_delfador_skills
        first_time_only=no

        {FIRE_EVENT remove_polymorph}

        {REMOVE_OBJECT skill_magic_missile   id=Delfador}
        {REMOVE_OBJECT skill_shield          id=Delfador}
        {REMOVE_OBJECT skill_stasis          id=Delfador}
        {REMOVE_OBJECT skill_mnemonic        id=Delfador}

        {REMOVE_OBJECT skill_chill_touch     id=Delfador}
        {REMOVE_OBJECT skill_levitate        id=Delfador}
        {REMOVE_OBJECT skill_panacea         id=Delfador}
        {REMOVE_OBJECT skill_animate_mud     id=Delfador}

        {REMOVE_OBJECT skill_fireball2       id=Delfador}
        {REMOVE_OBJECT skill_enervate        id=Delfador}
        {REMOVE_OBJECT skill_blizzard        id=Delfador}
        {REMOVE_OBJECT skill_counterspell    id=Delfador}
        {REMOVE_OBJECT skill_polymorph       id=Delfador}
        {REMOVE_OBJECT skill_glamour         id=Delfador}

        {REMOVE_OBJECT skill_fireball3       id=Delfador}
        {REMOVE_OBJECT skill_dancing_daggers id=Delfador}
        {REMOVE_OBJECT skill_illusion        id=Delfador}
        {REMOVE_OBJECT skill_animate_fire    id=Delfador}
        {REMOVE_OBJECT skill_contingency     id=Delfador}

        {REMOVE_OBJECT skill_fireball4       id=Delfador}
        {REMOVE_OBJECT skill_lightning       id=Delfador}
        {REMOVE_OBJECT skill_cataclysm       id=Delfador}
        {REMOVE_OBJECT skill_time_dilation   id=Delfador}

        [disallow_extra_recruit]
            id=Delfador
            extra_recruit=Mudcrawler,Fire Guardian
        [/disallow_extra_recruit]
    [/event]
    [event]
        name=remove_polymorph
        first_time_only=no
        {FILTER_CONDITION({HAVE_UNIT( id=Delfador {NOT race=human} )})}
        # always cancel polymorph, no matter what. We'll re-polymorph afterwards if it's still active
        {VARIABLE restore_polymorph_type no}
        {IF} {HAVE_UNIT id,type=Delfador,"Frost Stoat"}{THEN( {VARIABLE restore_polymorph_type "stoat"} )}
        {/IF}
        {IF} {HAVE_UNIT id,type=Delfador,"Cave Bear"  }{THEN( {VARIABLE restore_polymorph_type "bear" } )}
        {/IF}
        {IF} {HAVE_UNIT id,type=Delfador,"Giant Crab" }{THEN( {VARIABLE restore_polymorph_type "crab" } )}
        {/IF}
        {IF} {HAVE_UNIT id,type=Delfador,"Roc"        }{THEN( {VARIABLE restore_polymorph_type "roc"  } )}
        {/IF}
        {FIRE_EVENT skill_polymorph_stoat_cancel}
        {FIRE_EVENT skill_polymorph_bear_cancel}
        {FIRE_EVENT skill_polymorph_crab_cancel}
        {FIRE_EVENT skill_polymorph_roc_cancel}
    [/event]
#enddef
#define EVENT_RESTORE_POLYMORPH
    # if we were polymorphed before, and we still know the skill now, then polymorph back into our previous form
    # We needed to un-polymorph before refreshing, or else stuff gets applied to the beast instead of to Delfador
    [event]
        name=refresh_delfador_skills,restore_polymorph
        first_time_only=no
        {FILTER_CONDITION({VARIABLE_CONDITIONAL skill_polymorph equals yes})}
        {FILTER_CONDITION({VARIABLE_CONDITIONAL restore_polymorph_type not_equals no})}
        {FIRE_EVENT skill_polymorph_$restore_polymorph_type}
    [/event]
    [event]
        name=refresh_delfador_skills,restore_polymorph
        first_time_only=no
        {CLEAR_VARIABLE restore_polymorph_type}
    [/event]
#enddef


#############################
# GLOBAL EVENTS
#############################
#define GLOBAL__SPELLCASTING_EVENTS
    {EVENT_REMOVE_SKILLS} # create this event first, so we remove and THEN re-add

    {EVENT_CHILL_TOUCH} # before magic-missile, so that melee is always before ranged
    {EVENT_MAGIC_MISSILE}
    {EVENT_SHIELD}
    {EVENT_STASIS}
    {EVENT_FIND_FAMILIAR}
    {EVENT_MNEMONIC}

    {EVENT_LEVITATE}
    {EVENT_PANACEA}
    {EVENT_ANIMATE_MUD}

    {EVENT_FIREBALL2}
    {EVENT_ENERVATE}
    {EVENT_BLIZZARD}
    {EVENT_COUNTERSPELL}
    {EVENT_POLYMORPH}
    {EVENT_GLAMOUR}

    {EVENT_FIREBALL3}
    {EVENT_DANCING_DAGGERS}
    {EVENT_ILLUSION}
    {EVENT_ANIMATE_FIRE}
    {EVENT_CONTINGENCY}

    {EVENT_FIREBALL4}
    {EVENT_LIGHTNING}
    {EVENT_CATACLYSM}
    {EVENT_TIME_DILATION}

    {EVENT_RESTORE_POLYMORPH}


    #--------------------
    # CAST SKILL IN A SYNCED CONTEXT
    #--------------------
    # don't do this directly from spellcasting.lua, or we get OOS replays and the player can undo
    [event]
        name=cast_skill_synced
        first_time_only=no

        # cast skill
        [do_command]
            [fire_event]
                raise=$skill_id
            [/fire_event]
        [/do_command]
        {CLEAR_VARIABLE skill_id}

        # very painfully, deselect Delfador
        [select_unit]
            id=Delfador
        [/select_unit]
        [redraw][/redraw]
        [select_unit]
            {NOT id=Delfador}
        [/select_unit]
        [redraw][/redraw]
        [lua]
            code=<< wesnoth.interface.select_unit() >>
        [/lua]
        [redraw][/redraw]
    [/event]


    #--------------------
    # NEW TURN RESET
    #--------------------
    [event]
        name=new turn
        first_time_only=no
        {CLEAR_VARIABLE spellcasted_this_turn} # used by lua
        {CLEAR_VARIABLE disable_xp_message}
    [/event]


    #--------------------
    # PREVENT BADLY-TIMED SPELLS
    #--------------------
    [event]
        name=attack
        first_time_only=no
        {VARIABLE is_during_attack yes}
    [/event]
    [event]
        name=attack end
        first_time_only=no
        {CLEAR_VARIABLE is_during_attack}
    [/event]
    [event]
        name=start,side 1 turn end,victory,defeat
        first_time_only=no
        {VARIABLE not_player_turn yes}
    [/event]
    [event]
        name=new turn
        first_time_only=no
        {CLEAR_VARIABLE not_player_turn}
    [/event]
    [event]
        name=exit hex
        first_time_only=no
        {VARIABLE is_during_move yes}
        [allow_undo][/allow_undo]
    [/event]
    [event]
        name=moveto
        first_time_only=no
        {CLEAR_VARIABLE is_during_move}
        [allow_undo][/allow_undo]
    [/event]


    #--------------------
    # ALLOW RIGHT-CLICK SPELLS
    #--------------------
    [event]
        name=prestart,refresh_spellcasting_rightclick_menu
        first_time_only=no
        {FILTER_CONDITION( {VARIABLE_CONDITIONAL TDG_spellcasting_menu_created not_equals yes} )}
        {VARIABLE TDG_spellcasting_menu_created yes}
        [set_menu_item]
            id=TDG_spellcasting
            description=_"Cast Spells"
            synced=false # this is crucial. For some reason, cast_skill_synced's [do_command] doesn't execute otherwise
            {FILTER_LOCATION( {FILTER id=Delfador} )}
            [command]
                {STORE_UNIT_VAR id=Delfador x spellX}
                {STORE_UNIT_VAR id=Delfador y spellY}
                [display_skills_dialog]
                    x,y=$spellX,$spellY
                [/display_skills_dialog]
                {CLEAR_VARIABLE spellX,spellY}
            [/command]
        [/set_menu_item]
    [/event]


    #--------------------
    # PREVENT LEVELING
    #--------------------
    [event]
        name=pre advance
        first_time_only=no
        {FILTER id=Delfador,delfador_mirror1,delfador_mirror2,delfador_mirror3,delfador_mirror4}
        [modify_unit]
            {FILTER id=$unit.id}
            experience=$($unit.max_experience-1)
        [/modify_unit]
        {IF} {VARIABLE_CONDITIONAL disable_xp_message not_equals yes} {THEN(
            [floating_text]
                x,y,text=$unit.x,$unit.y,_"<span color='#a308b8' size='small'>Max XP!</span>"
            [/floating_text]
        )} {/IF}
        {VARIABLE disable_xp_message yes}
        {FIRE_EVENT explain_max_xp}
    [/event]
    [event]
        name=explain_max_xp
        {FILTER_CONDITION({HAVE_UNIT id,level=Delfador,0-2})} # don't show this message in part 2
        {FILTER_CONDITION({VARIABLE_CONDITIONAL explained_max_xp not_equals yes})}
        [message]
            speaker,image=narrator,wesnoth-icon.png
            message=_"Unlike regular units, Delfador does not use XP to advance. Raising him to max XP has no effect."
        [/message]
        {VARIABLE explained_max_xp yes}
    [/event]


    #--------------------
    # MAGE REACHES L2 BEFORE DELFADOR DOES
    #--------------------
    [event]
        name=post advance
        {FILTER side,type=1,"Red Mage"}
        {FILTER_CONDITION({HAVE_UNIT id,level=Delfador,1})}
        {FILTER_CONDITION({VARIABLE_CONDITIONAL delfador_complained_levelup not_equals yes})}
        [message]
            speaker=Delfador
            message=_"Congratulations on your journeymanship, $unit.name! Those fireballs are breathtaking! ...now how long until I’m allowed to cast them too?"
        [/message]
        {VARIABLE delfador_complained_levelup yes}
    [/event]
    [event]
        name=post advance
        {FILTER side,type=1,"White Mage"}
        {FILTER_CONDITION({HAVE_UNIT id,level=Delfador,1})}
        {FILTER_CONDITION({VARIABLE_CONDITIONAL delfador_complained_levelup not_equals yes})}
        [message]
            speaker=Delfador
            message=_"Congratulations, $unit.name! Your journeyman’s robes look breathtaking. Now if only Methor would award me mine too ...in red, of course."
        [/message]
        {VARIABLE delfador_complained_levelup yes}
    [/event]
#enddef





#############################
# ANIMATIONS
#############################
#define SPELLCASTING_ANIMATIONS PATH
    {ANIMATIONS_GHOSTCAPTURE {PATH}}
    {ANIMATIONS_MAGIC_MISSILE {PATH}}
    {ANIMATIONS_SHIELD {PATH}}
    {ANIMATIONS_STASIS {PATH}}

    {ANIMATIONS_CHILL_TOUCH {PATH}}
    {ANIMATIONS_LEVITATE {PATH}}
    {ANIMATIONS_PANACEA {PATH}}

    {ANIMATIONS_FIREBALL {PATH}} # all fireballs share the same attack animation
    {ANIMATIONS_ENERVATE {PATH}}
    {ANIMATIONS_BLIZZARD {PATH}}
    {ANIMATIONS_COUNTERSPELL {PATH}}
    {ANIMATIONS_POLYMORPH {PATH}}

    {ANIMATIONS_DANCING_DAGGERS {PATH}}
    {ANIMATIONS_ILLUSION {PATH}}
    {ANIMATIONS_CONTINGENCY {PATH}}

    {ANIMATIONS_LIGHTNING {PATH}}
    {ANIMATIONS_CATACLYSM {PATH}}
    {ANIMATIONS_TIME_DILATION {PATH}}

    #--------------------
    # DEFAULT ANIMATIONS
    #--------------------
    [attack_anim]
        {FILTER_ATTACK name=staff}
        start_time=-250
        {FRAME image={PATH}/delfador.png:50}
        {FRAME image={PATH}/delfador-melee[1~2].png:[150,250]}
        {SOUND:HIT_AND_MISS staff.ogg staff-miss.ogg -125}
        {FRAME image={PATH}/delfador.png:100}
    [/attack_anim]
    {DEFENSE_ANIM {PATH}/delfador-defend1.png {PATH}/delfador-defend2.png {SOUND_LIST:HUMAN_HIT} }

    [leading_anim]
        start_time=-250          {FRAME image={PATH}/delfador-leading.png:500}
        overlay_start_time=-100  {OVERLAY_FRAME halo_x,halo_y,halo=14,-25,halo/misc/leadership-flare-[1~13].png:20}
    [/leading_anim]
    [recruiting_anim]
        start_time=-250          {FRAME image={PATH}/delfador-leading.png:500}
        overlay_start_time=-100  {OVERLAY_FRAME halo_x,halo_y,halo=14,-25,halo/misc/leadership-flare-[1~13].png:20}
    [/recruiting_anim]

    [standing_anim]
        base_score=-1 # avoid using this animation if any others apply
        {FRAME image={PATH}/delfador.png}
    [/standing_anim]
    [movement_anim]
        base_score=-1 # avoid using this animation if any others apply
        {FRAME image={PATH}/delfador.png}
    [/movement_anim]
#enddef





#############################
# UTILITY MACROS
#############################
#define MIMIC_DELFADOR ID WML
    {STORE_SKILLS}
    {MODIFY_UNIT id=Delfador id oldDelf} {MODIFY_UNIT id={ID} id Delfador}
    {MODIFY_UNIT id=familiar id oldFamiliar}
    [set_variables]
        name,mode,to_variable=not_p,replace,p # polymorph
    [/set_variables]
    {CLEAR_VARIABLE p}

    {WML}

    {UNSTORE_SKILLS}
    {MODIFY_UNIT id=Delfador id {ID}} {MODIFY_UNIT id=oldDelf id Delfador}
    {MODIFY_UNIT id=oldFamiliar id familiar}
    [set_variables]
        name,mode,to_variable=p,replace,not_p # polymorph
    [/set_variables]
    {CLEAR_VARIABLE not_p}
#enddef
#define __RENAME_SKILL_VARIABLE VAR1 VAR2
    # only rename if the variable exists, or else we get lots of non-null blank variables
    {IF} {VARIABLE_CONDITIONAL {VAR1} equals yes}
        {THEN(  {VARIABLE {VAR2} ${VAR1}}  )}
        {ELSE(  {CLEAR_VARIABLE   {VAR2}}  )}
    {/IF}
    {CLEAR_VARIABLE {VAR1}}
#enddef
#define STORE_SKILLS
    {__RENAME_SKILL_VARIABLE skill_magic_missile   old_magic_missile  }
    {__RENAME_SKILL_VARIABLE skill_shield          old_shield         }
    {__RENAME_SKILL_VARIABLE skill_stasis          old_stasis         }
    {__RENAME_SKILL_VARIABLE skill_find_familiar   old_find_familiar  }
    {__RENAME_SKILL_VARIABLE skill_mnemonic        old_mnemonic       }

    {__RENAME_SKILL_VARIABLE skill_chill_touch     old_chill_touch    }
    {__RENAME_SKILL_VARIABLE skill_levitate        old_levitate       }
    {__RENAME_SKILL_VARIABLE skill_panacea         old_panacea        }
    {__RENAME_SKILL_VARIABLE skill_animate_mud     old_animate_mud    }

    {__RENAME_SKILL_VARIABLE skill_fireball2       old_fireball2      }
    {__RENAME_SKILL_VARIABLE skill_enervate        old_enervate       }
    {__RENAME_SKILL_VARIABLE skill_blizzard        old_blizzard       }
    {__RENAME_SKILL_VARIABLE skill_counterspell    old_counterspell   }
    {__RENAME_SKILL_VARIABLE skill_polymorph       old_polymorph      }
    {__RENAME_SKILL_VARIABLE skill_glamour         old_glamour        }

    {__RENAME_SKILL_VARIABLE skill_fireball3       old_fireball3      }
    {__RENAME_SKILL_VARIABLE skill_dancing_daggers old_dancing_daggers}
    {__RENAME_SKILL_VARIABLE skill_illusion        old_illusion       }
    {__RENAME_SKILL_VARIABLE skill_animate_fire    old_animate_fire   }
    {__RENAME_SKILL_VARIABLE skill_contingency     old_contingency    }


    {__RENAME_SKILL_VARIABLE skill_fireball4       old_fireball4      }
    {__RENAME_SKILL_VARIABLE skill_lightning       old_lightning      }
    {__RENAME_SKILL_VARIABLE skill_cataclysm       old_cataclysm      }
    {__RENAME_SKILL_VARIABLE skill_time_dilation   old_time_dilation  }
#enddef
#define UNSTORE_SKILLS
    {__RENAME_SKILL_VARIABLE old_magic_missile   skill_magic_missile  }
    {__RENAME_SKILL_VARIABLE old_shield          skill_shield         }
    {__RENAME_SKILL_VARIABLE old_stasis          skill_stasis         }
    {__RENAME_SKILL_VARIABLE old_find_familiar   skill_find_familiar  }
    {__RENAME_SKILL_VARIABLE old_mnemonic        skill_mnemonic       }

    {__RENAME_SKILL_VARIABLE old_chill_touch     skill_chill_touch    }
    {__RENAME_SKILL_VARIABLE old_levitate        skill_levitate       }
    {__RENAME_SKILL_VARIABLE old_panacea         skill_panacea        }
    {__RENAME_SKILL_VARIABLE old_animate_mud     skill_animate_mud    }

    {__RENAME_SKILL_VARIABLE old_fireball2       skill_fireball2      }
    {__RENAME_SKILL_VARIABLE old_enervate        skill_enervate       }
    {__RENAME_SKILL_VARIABLE old_blizzard        skill_blizzard       }
    {__RENAME_SKILL_VARIABLE old_counterspell    skill_counterspell   }
    {__RENAME_SKILL_VARIABLE old_polymorph       skill_polymorph      }
    {__RENAME_SKILL_VARIABLE old_glamour         skill_glamour        }

    {__RENAME_SKILL_VARIABLE old_fireball3       skill_fireball3      }
    {__RENAME_SKILL_VARIABLE old_dancing_daggers skill_dancing_daggers}
    {__RENAME_SKILL_VARIABLE old_illusion        skill_illusion       }
    {__RENAME_SKILL_VARIABLE old_animate_fire    skill_animate_fire   }
    {__RENAME_SKILL_VARIABLE old_contingency     skill_contingency    }

    {__RENAME_SKILL_VARIABLE old_fireball4       skill_fireball4      }
    {__RENAME_SKILL_VARIABLE old_lightning       skill_lightning      }
    {__RENAME_SKILL_VARIABLE old_cataclysm       skill_cataclysm      }
    {__RENAME_SKILL_VARIABLE old_time_dilation   skill_time_dilation  }
#enddef
#wmlindent: stop ignoring
