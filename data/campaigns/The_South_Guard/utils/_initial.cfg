#textdomain wesnoth-tsg

#define EXPERIENCE_MODIFIER
    experience_modifier={ON_DIFFICULTY 50 75 100}
#enddef

#define ACHIEVE ID
    [set_achievement]
        content_for=the_south_guard
        id=tsg_{ID}
    [/set_achievement]
#enddef

#define EFFECT APPLY_TO WML
    #
    [effect]
        apply_to={APPLY_TO}
        {WML}
    [/effect]
    #
#enddef

#define FILTER FLT
    #
    [filter]
        {FLT}
    [/filter]
#enddef

#define FILTER_SECOND FLT
    #
    [filter_second]
        {FLT}
    [/filter_second]
#enddef

#define FILTER_LOCATION FLT
    #
    [filter_location]
        {FLT}
    [/filter_location]
#enddef

#define FILTER_CONDITION FLT
    #
    [filter_condition]
        {FLT}
    [/filter_condition]
#enddef

#define FILTER_ATTACK FLT
    #
    [filter_attack]
        {FLT}
    [/filter_attack]
#enddef

#define FILTER_ADJACENT FLT
    #
    [filter_adjacent]
        {FLT}
    [/filter_adjacent]
#enddef

#define FILTER_ADJACENT_LOCATION FLT
    #
    [filter_adjacent_location]
        {FLT}
    [/filter_adjacent_location]
#enddef

#define FILTER_SIDE FLT
    #
    [filter_side]
        {FLT}
    [/filter_side]
#enddef

#define FILTER_OBJECT_ID ID
    #
    [filter]
        [filter_wml]
            [modifications]
                [object]
                    id={ID}
                [/object]
            [/modifications]
        [/filter_wml]
    [/filter]
#enddef

#define FILTER_WML_OBJECT ID
    #
    [filter_wml]
        [modifications]
            [object]
                id={ID}
            [/object]
        [/modifications]
    [/filter_wml]
#enddef

#define HAVE_UNIT FLT
    #
    [have_unit]
        {FLT}
    [/have_unit]
#enddef

#define NOT FLT
    #
    [not]
        {FLT}
    [/not]
#enddef

#define AND FLT
    #
    [and]
        {FLT}
    [/and]
#enddef

#define OR FLT
    #
    [or]
        {FLT}
    [/or]
#enddef

#define DELAY TIME
    #
    [delay]
        time={TIME}
    [/delay]
#enddef

#define KILL FILTER
#arg ANIMATE
no#endarg
#arg FIRE_EVENT
no#endarg
    [kill]
        {FILTER}
        animate={ANIMATE}
        fire_event={FIRE_EVENT}
    [/kill]
#enddef

#define FIRE_EVENT EVENTNAME
    #
    [fire_event]
        name={EVENTNAME}
    [/fire_event]
#enddef

#define REVEAL LOCS
    [remove_shroud]
        side=1
        {LOCS}
    [/remove_shroud]
    [lift_fog]
        {LOCS}
    [/lift_fog]
#enddef

#define SOUND PATH
    #
    [sound]
        name={PATH}
    [/sound]
#enddef

#define ANIMATE
    #
    [+unit]
        animate=yes
    [/unit]
#enddef

#define ROLE ROLENAME
    #
    [+unit]
        role={ROLENAME}
    [/unit]
#enddef

#define GENDER GEND
    #
    [+unit]
        gender={GEND}
    [/unit]
#enddef

#define GIVE_OBJECT_TO FLT WML
    #
    [modify_unit]
        {FILTER {FLT}}
        [object]
            {WML}
        [/object]
    [/modify_unit]
    #
#enddef

#define ADD_MODIFICATIONS WML
    #
    [+unit]
        [modifications]
            {WML}
        [/modifications]
    [/unit]
#enddef

#define MODIFICATIONS WML
    #
    [modifications]
        {WML}
    [/modifications]
#enddef

# "C" stands for "conditional"
#define GENERIC_UNITC SIDE TYPE X Y WML
    {VARIABLE generic_unitc {TYPE}}
    [if] {VARIABLE_CONDITIONAL generic_unitc not_equals "none"}
        [then]
            {GENERIC_UNIT {SIDE} {TYPE} {X} {Y}} {WML}
        [/then]
    [/if]
    {CLEAR_VARIABLE generic_unitc}
#enddef

#define FORCEMOVE_DO X Y WML
    [store_unit]
        {FILTER x,y={X},{Y}} kill,variable=yes,force_move_stored_unit
    [/store_unit]
    {WML}
    [if] {VARIABLE_CONDITIONAL force_move_stored_unit.length greater_than 0}
        [then]
            [unstore_unit]
                variable,find_vacant=force_move_stored_unit,yes
            [/unstore_unit]
            {CLEAR_VARIABLE force_move_stored_unit}
        [/then]
    [/if]
#enddef

# primitive macros for fading music. Only supports durations in increments of 100ms, and doesn't work with 0 durations
#define FADE_MUSIC_IN DURATION
    #
    {VARIABLE fade_duration_remaining {DURATION}}
    [while] {VARIABLE_CONDITIONAL fade_duration_remaining greater_than 0}
        [do]
            {VARIABLE_OP fade_duration_remaining sub 100}
            {VARIABLE volume 100}
            {VARIABLE_OP volume multiply $fade_duration_remaining}
            {VARIABLE_OP volume divide {DURATION}}
            {VARIABLE volume "$(100-$volume)"}
            [volume]
                music=$volume
            [/volume]
            {DELAY 100}
        [/do]
    [/while]
    {CLEAR_VARIABLE fade_duration_remaining,volume}
    #
#enddef
#define FADE_MUSIC_OUT DURATION
    #
    {VARIABLE fade_duration_remaining {DURATION}}
    [while] {VARIABLE_CONDITIONAL fade_duration_remaining greater_than 0}
        [do]
            {VARIABLE_OP fade_duration_remaining sub 100}
            {VARIABLE volume 100}
            {VARIABLE_OP volume multiply $fade_duration_remaining}
            {VARIABLE_OP volume divide {DURATION}}
            [volume]
                music=$volume
            [/volume]
            {DELAY 100}
        [/do]
    [/while]
    {CLEAR_VARIABLE fade_duration_remaining,volume}
    #
#enddef

#define WML_COMPANION
#arg WML_MARI
#endarg
#arg WML_GERRICK
#endarg
#arg WML_HYLAS
#endarg
    [if] {VARIABLE_CONDITIONAL companion_id equals "Mari"}
        [then]
            {WML_MARI}
        [/then]
    [/if]
    [if] {VARIABLE_CONDITIONAL companion_id equals "Sir Gerrick"}
        [then]
            {WML_GERRICK}
        [/then]
    [/if]
    [if] {VARIABLE_CONDITIONAL companion_id equals "Minister Hylas"}
        [then]
            {WML_HYLAS}
        [/then]
    [/if]
#enddef

#define SAY_IF_HAVE ID1 MESSAGE1 ID2 MESSAGE2
#arg SIDE
1,2,3,4,5,6,7,8,9#endarg
    [if] {HAVE_UNIT( id={ID1} {AND side={SIDE}} )}
        [then]
            [message]
                speaker={ID1}
                message= {MESSAGE1}
            [/message]
        [/then]
        [else]
            [message]
                speaker={ID2}
                message= {MESSAGE2}
            [/message]
        [/else]
    [/if]
#enddef

#define SCREEN_FADER RGB ALPHA DURATION
    [screen_fade]
        red,green,blue={RGB}
        alpha={ALPHA}
        duration={DURATION}
    [/screen_fade]
#enddef

#define PRINT STRING
    [print]
        text={STRING}
        size=18
        duration=unlimited
        color=255,255,255
    [/print]
#enddef

#define CLEAR_PRINT
    [print]
        text="" # wmllint: ignore
    [/print]
#enddef

# Note: we would not like the user to "press any key" (for example, Esc)
#define CONTINUE_MSG
    _"

<big>Click a mouse button or press the spacebar to continue...</big>"
#enddef

#define CUSTOM_SG_FLAG
    flag=flag/SG-flag-[1~4].png:150
    flag_icon=flag/SG-flag-icon.png
#enddef

# Text for storytelling (by narrator and [story]) is shown in a different color
#define NARRATOR_COLOR
    <<#BAAC7D>> #enddef

    # Explanation of the game mechanics and strategic information uses this instead
#define TUTOR_COLOR
    <<#D563D7>> #enddef

    # macro for usage in [message] tags
#define NARRATOR: MESSAGE
    message=<span color='{NARRATOR_COLOR}'> + {MESSAGE} + </span> # wmllint: ignore
#enddef

    # macro for usage in [part] tags
#define STORY: MESSAGE
    story=<span color='{NARRATOR_COLOR}'> + {MESSAGE} + </span> # wmllint: ignore
#enddef

    # macro for usage in [message] tags
    # often combined with an image of the explained object
#define TUTOR: MESSAGE
    message=<span color='{TUTOR_COLOR}'> + {MESSAGE} + </span> # wmllint: ignore
#enddef
