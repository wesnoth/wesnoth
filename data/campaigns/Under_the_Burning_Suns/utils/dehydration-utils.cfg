#textdomain wesnoth-utbs

#define HYDRATING_TILES
Ww*, *^V* #enddef

#define DEHYDRATING_TILES
Hd, Dd*, Dd^E*, Rd #enddef

#define DEHYDRATABLE_UNITS_FILTER
    [not]
        race=undead
    [/not]
    [not]
        type=Giant Scorpion
    [/not]
    [not]
        type=Dust Devil
    [/not]
    [not]
        # traveller's ring
        role=immune
    [/not]
    [and]
        # Prevent unseen AI guardians from being depleted by dehydration
        [filter_vision]
            side=1
        [/filter_vision]
        [or]
            [not]
                ai_special=guardian
            [/not]
        [/or]
    [/and]
#enddef

# This dehydrates the given units. However, if the unit is adjacent to a
# friendly healer, the dehydration will be delayed instead: the unit suffers no
# ill effects, but it cannot receive any healing on this turn either. Basically,
# dehydration works just like poison.
#
# Each turn of dehydration lowers the unitâ€™s attack damage by 1 point and
# decreases hitpoints by -$dehydration_loss.

#define APPLY_DEHYDRATION_EFFECT FILTER
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        kill=no
        variable=dehydrating_units
    [/store_unit]

    [for]
        array=dehydrating_units
        [do]

            [if]
                [have_unit]
                    x,y=$dehydrating_units[$i].x,$dehydrating_units[$i].y

                    [filter_adjacent]
                        is_enemy=no
                        [and]
                            ability=healing
                            [or]
                                ability=curing
                            [/or]
                        [/and]
                    [/filter_adjacent]
                [/have_unit]

                [then]
                    {VARIABLE dehydrating_units[$i].resting no}
                    {VARIABLE dehydrating_units[$i].status.dehydration_slowed_by_healer yes}

                    [unstore_unit]
                        variable=dehydrating_units[$i]
                        find_vacant=no
                    [/unstore_unit]
                [/then]

                [else]
                    [modify_unit]
                        [filter]
                            id=$dehydrating_units[$i].id
                        [/filter]
                        ## this object might be obtained multiple times, but that shouldn't be a problem.
                        [object]
                            duration=scenario
                            id="dehydration_effect"
                            [effect]
                                apply_to=attack
                                formula="damage>1"
                                increase_damage=-1
                            [/effect]
                        [/object]
                        [object]
                            duration=scenario
                            id="dehydration_overlay"
                            [effect]
                                apply_to=overlay
                                add="misc/dehydration-icon.png"
                            [/effect]
                        [/object]
                        hitpoints="$(max(1, $dehydrating_units[$i].hitpoints - $dehydration_loss))"
                        resting=no
                        [status]
                            dehydrated=yes
                        [/status]
                    [/modify_unit]
                    [floating_text]
                        x=$dehydrating_units[$i].x
                        y=$dehydrating_units[$i].y
                        text= _ "thirst"
                        {COLOR_HARM}
                    [/floating_text]
                [/else]
            [/if]
        [/do]
    [/for]

    {CLEAR_VARIABLE dehydrating_units}
#enddef

# This rehydrates the given units. The units gain back their full attack damage.
#define APPLY_HYDRATION_EFFECT FILTER
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        kill=no
        variable=hydrating_units
    [/store_unit]

    [for]
        array=hydrating_units
        [do]
            [if]
                [variable]
                    name=hydrating_units[$i].status.dehydrated
                    equals=yes
                [/variable]

                [then]
                    [remove_object]
                        x,y=$hydrating_units[$i].x,$hydrating_units[$i].y
                        object_id=dehydration_effect
                    [/remove_object]
                [/then]
            [/if]

            [modify_unit]
                [filter]
                    id=$hydrating_units[$i].id
                [/filter]
                [status]
                    dehydrated=no
                [/status]
            [/modify_unit]
            [floating_text]
                x=$hydrating_units[$i].x
                y=$hydrating_units[$i].y
                text= _ "refreshed"
                {COLOR_HEAL}
            [/floating_text]

            [remove_object]
                x,y=$hydrating_units[$i].x,$hydrating_units[$i].y
                object_id=dehydration_overlay
            [/remove_object]
        [/do]
    [/for]

    {CLEAR_VARIABLE hydrating_units}
#enddef

#
# Events
#
#define DEHYDRATION_EVENTS
    [event]
        name=prestart

        # dehydration loss - a variable for the dialogue
        {VARIABLE dehydration_loss 4}
    [/event]

    [event]
        name=side turn
        first_time_only=no

        # dehydration:
        # only at dawn, morning, mid-day, afternoon and dusk
        {APPLY_DEHYDRATION_EFFECT (
            side=$side_number
            {DEHYDRATABLE_UNITS_FILTER}

            [filter_location]
                terrain={DEHYDRATING_TILES}
                [not]
                    time_of_day=chaotic
                [/not]
            [/filter_location]
        )}
    [/event]

    [event]
        name=side turn
        first_time_only=no

        # rehydration in water, villages or when next to healers
        {APPLY_HYDRATION_EFFECT (
            side=$side_number
            status=dehydrated

            [and]
                [filter_location]
                    terrain={HYDRATING_TILES}
                [/filter_location]
            [/and]
        )}
    [/event]

    [event]
        name=turn refresh
        first_time_only=no

        [if]
            [variable]
                name=side_number
                equals=1
            [/variable]

            [then]
                {MODIFY_UNIT (
                    side=1
                    status=dehydration_slowed_by_healer
                ) status.dehydration_slowed_by_healer no}
            [/then]
        [/if]
    [/event]

    [event]
        name=advance
        first_time_only=no

        [filter]
            status=dehydrated
        [/filter]

        {VARIABLE unit.status.dehydrated no}

        [unstore_unit]
            variable=unit
            find_vacant=no
            text= _ "refreshed"
            {COLOR_HEAL}
            advance=no
        [/unstore_unit]

        [remove_object]
            x,y=$unit.x,$unit.y
            object_id=dehydration_overlay
        [/remove_object]
    [/event]
#enddef
