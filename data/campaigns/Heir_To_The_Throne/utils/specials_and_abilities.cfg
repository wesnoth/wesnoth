#textdomain wesnoth-h2tt

#############################
# LISAR
#############################
#define ABILITY_EXACTING
    [dummy] # if you change this ID, also change the unit filter in the implementation
        id=exacting
        name=_"exacting"
        description= _ "Li’sar has drilled her infantry to perfection. Though few in number, each of her soldiers possesses skills not usually seen on others of their type."
    [/dummy]
#enddef

#define MARCH_MOVEMENT
    # also used by Lisar
    forest=1
    cave=1
    frozen=2
    hills=2
    mountains=3
    reef=2
    shallow_water=2
    swamp_water=2
    #     flat,sand,frozen,cave=1,1,2,1
    #     forest,hills,mountains,fungus=1,2,3,2
    #     reef,shallow_water,swamp_water=2,2,2
#enddef
#define MARCH_DEFENSE
    # also used by Lisar
    mountains=60
    #     flat,sand,frozen,cave=60,70,70,60
    #     forest,hills,mountains,fungus=50,50,50,50
    #     reef,shallow_water,swamp_water=70,80,80
    #     village,castle=50,40
#enddef
#define REMOVE_TRAIT TRAIT_ID
    [remove_trait]
        id=$unit.id
        trait_id={TRAIT_ID}
    [/remove_trait]
#enddef
#define ADD_TRAIT INDEX TRAITS
    {IF} {VARIABLE_CONDITIONAL traitname equals {INDEX}} {THEN(
        [modify_unit]
            {FILTER id=$unit.id}
            {TRAITS}
        [/modify_unit]
    )} {/IF}
#enddef
#define GLOBAL__EXACTING_IMPLEMENTATION
    #------------------
    # EXPLAIN EXACTING
    #------------------
    [event]
        name=side 1 turn end
        {FILTER_CONDITION( {HAVE_UNIT id=Lisar} )}
        {FILTER_CONDITION( {VARIABLE_CONDITIONAL exacting_explained not_equals yes} )}
        {FILTER_CONDITION( {VARIABLE_CONDITIONAL status_s18 not_equals in_progress} )} # in s18 we never actually fight Li'sar's troops
        {FILTER_CONDITION( {VARIABLE_CONDITIONAL status_s30 not_equals in_progress} )} # in s30 we do a special explanation with the "sighted" event
        [message]
            speaker=Konrad
            message= _ "I studied Li’sar back in the Aethenwood. Though her personal company is not large in number, they are exactingly trained — each of them possesses one ability not usually seen on others of their type."
        [/message]
        {VARIABLE exacting_explained yes}
    [/event]
    [event]
        name=sighted
        {FILTER({FILTER_SIDE({HAS_UNIT id=Lisar})})}
        {FILTER_SECOND side=1}
        {FILTER_CONDITION( {VARIABLE_CONDITIONAL exacting_explained not_equals yes} )}
        {FILTER_CONDITION( {VARIABLE_CONDITIONAL status_s30 equals in_progress} )} # this is the special explanation for s30
        {SCROLL_TO $unit.x $unit.y}
        {PLACE_IMAGE items/gohere.png $unit.x $unit.y}
        [message]
            speaker=Konrad {KONRAD_VARIATION mad}
            scroll=no
            message= _ "Look there: one of Li’sar’s personal company! I studied them back in the Aethenwood. Though not large in number, they are exactingly trained — each of them possesses one ability not usually seen on others of their type."
        [/message]
        {REMOVE_IMAGE $unit.x $unit.y}
        {VARIABLE exacting_explained yes}
    [/event]

    #------------------
    # HEAVY INFANTRYMAN TRAITS
    #------------------
    # always fearless, never quick.
    # I could add {TRAIT_FEARLESS_MUSTHAVE} via the [unit_type], but AFAIK there's no way to remove {TRAIT_QUICK} from the human race pool
    [event]
        name=unit placed
        first_time_only=no
        {FILTER type_adv_tree="Elite Heavy Infantryman"}
        {FILTER_CONDITION( {HAVE_UNIT side,ability=$unit.side,exacting} )}

        # remove other traits and gurantee we'll always fearless. Important for Sceptre of Fire underground.
        {STORE_UNIT_VAR id=$unit.id hitpoints     exacting_hitpoints}
        {STORE_UNIT_VAR id=$unit.id max_hitpoints exacting_max_hitpoints}
        {REMOVE_TRAIT quick} # don't remove loyal
        {REMOVE_TRAIT strong}
        {REMOVE_TRAIT intelligent}
        {REMOVE_TRAIT resilient}
        {REMOVE_TRAIT fearless}

        # always either strong or resilient. Intelligent isn't very useful for AI and quick+march makes them too fast
        {VARIABLE_OP traitname rand "1,2,3,4"}
        {ADD_TRAIT 1 ({TRAIT_FEARLESS} {TRAIT_STRONG}   )}
        {ADD_TRAIT 2 ({TRAIT_FEARLESS} {TRAIT_RESILIENT})}
        {ADD_TRAIT 3 ({TRAIT_STRONG}   {TRAIT_FEARLESS} )}
        {ADD_TRAIT 4 ({TRAIT_RESILIENT}{TRAIT_FEARLESS} )}

        # if we had max hp before the traits change, make sure we still have max hp after
        {IF} {VARIABLE_CONDITIONAL exacting_hitpoints equals $exacting_max_hitpoints} {THEN(
            {FULL_HEAL id=$unit.id}
        )} {/IF}
        {CLEAR_VARIABLE exacting_hitpoints,exacting_max_hitpoints,traitname}
    [/event]
#enddef

#############################
# MOREMIRMU
#############################
#define ABILITY_REJUVENATE
    # just heals+4 and regenerate+4 jammed together into 1 ability name
    # combine them into 1 ability so that his abilites are legible in the UI
    [dummy]
        id=rejuvenate
        name=_"rejuvenates"
        description= _ "This unit will heal itself and adjacent allied units for 4 HP each turn. This ability cannot cure poison, however, only delay its effect."
    [/dummy]
    [heals]
        value=4
        id=healing
        affect_allies=yes
        affect_self=no
        poison=slowed
        [affect_adjacent]
        [/affect_adjacent]
    [/heals]
    [regenerate]
        value=4
        id=regenerates
        affect_self=yes
        poison=slowed
    [/regenerate]
#enddef

#define USE_SMITE
    {VARIABLE smite_is_active yes} # prevent units dying via smite from triggering more smites
    [lua]
        code=<<
            local attacker = wesnoth.units.find_on_map({ id=wml.variables["second_unit"].id })[1]
            local defenders = wesnoth.units.find_on_map({ 
                wml.tag.filter_adjacent{ id=wml.variables["second_unit"].id },
                wml.tag.filter_side{ wml.tag.enemy_of{ side=wml.variables["second_unit"].side } },
                wml.tag["not"]{ id=wml.variables["unit"].id } -- or else we play $unit.id's death animation twice
            })
            
            -- animate the AOE
            local animator = wesnoth.units.create_animator()
            animator:add(  attacker, "smite", "hit", { with_bars=true }  )
            
            -- animate damage (and deal damage)
            for i,defender in ipairs(defenders) do
                local damage = math.floor( 30 * ( 100 - defender:resistance_against("arcane", false, defender.x, defender.y) )/100 )
                defender.facing = wesnoth.map.get_relative_dir(defender.x, defender.y, attacker.x, attacker.y)
                animator:add(  defender, "defend", "hit", { with_bars=true, text=tostring(damage), color={255,0,0} }  )
                defender.hitpoints = defender.hitpoints - damage
            end
            animator:run()
            animator:clear()
            
            -- animate death
            local animator = wesnoth.units.create_animator()
            for i,defender in ipairs(defenders) do if (defender.hitpoints<=0) then
                animator:add(  defender, "death", "hit", {}  )
            end end
            animator:run()
            animator:clear()
            
            -- kill units
            for i,defender in ipairs(defenders) do if (defender.hitpoints<=0) then
                wesnoth.game_events.fire("die", defender.loc, attacker.loc)
                wesnoth.units.erase(defender)
            end end
        >>
    [/lua]
    {CLEAR_VARIABLE smite_is_active}
#enddef
#define ABILITY_SMITE
    # this ability is REALLY strong - but since the final scenario in this campaign involves fighting against humans,
    # who're both lawful and resist arcane (both of which nerf Moremirmu), I think it's an appropriate amount of power
    [dummy]
        id=smite
        name=_"smite"
        description= _ "Each time this unit strikes a finishing blow, it deals 30 arcane damage to adjacent enemies."
    [/dummy]
#enddef
#define GLOBAL__SMITE_IMPLEMENTATION
    # can't put the implementation inside [dummy], because events inside an ability only get include in a scenario if a *unit type* with that ability is added to the scenario
    # since we give Moremirmu this ability via an [object], his unit type doesn't have the ability, and thus the event would never get included
    [event]
        name=die
        first_time_only=no
        {FILTER_SECOND ability=smite}
        [filter_condition]
            {HAVE_UNIT(
                # don't trigger this ability unless we have someone to hit with it
                {FILTER_ADJACENT id=$second_unit.id}
                {FILTER_SIDE(
                    [enemy_of]
                        side=$second_unit.side
                    [/enemy_of]
                )}
                {NOT id=$unit.id}
            )}
            {VARIABLE_CONDITIONAL smite_is_active not_equals yes}
        [/filter_condition]
        {USE_SMITE}
    [/event]
#enddef

#############################
# ITEMS
#############################
#define OBJECT_SCEPTRE WML
    [object]
        id=sceptre_of_fire
        take_only_once=no
        image="attacks/blank-attack.png~SCALE(72,72)~BLIT(items/sceptre-of-fire.png)"
        name=_"The Sceptre of Fire"
        description=_"Forged by the dwarves of Knalga at the behest of King Haldric II, the magic at the heart of this sceptre dates as far back as the mysterious Old Continent. Among its many powers is the ability to hurl fireballs of great size."

        {EFFECT new_attack (
            {FILTER level=1}
            name=sceptre of fire
            description= _ "sceptre of fire"
            icon=attacks/fireball.png
            type=fire
            range=ranged
            [specials]
                {WEAPON_SPECIAL_MAGICAL}
            [/specials]
            damage=11 # scale this with level, otherwise there's an incentive to keep Konrad at L1 and use leadership to boost his Sceptre
            number=4
        )}

        {EFFECT new_attack (
            {FILTER level=2}
            name=sceptre of fire
            description= _ "sceptre of fire"
            icon=attacks/fireball.png
            type=fire
            range=ranged
            [specials]
                {WEAPON_SPECIAL_MAGICAL}
            [/specials]
            damage=13
            number=4
        )}

        {EFFECT new_attack (
            {FILTER level=3}
            name=sceptre of fire
            description= _ "sceptre of fire"
            icon=attacks/fireball.png
            type=fire
            range=ranged
            [specials]
                {WEAPON_SPECIAL_MAGICAL}
            [/specials]
            damage=16
            number=4
        )}

        {EFFECT new_attack (
            {FILTER level=4}
            name=sceptre of fire
            description= _ "sceptre of fire"
            icon=attacks/fireball.png
            type=fire
            range=ranged
            [specials]
                {WEAPON_SPECIAL_MAGICAL}
            [/specials]
            damage=20 # if I increase this, consider increasing the bridge destruction overkill threshold in S50. We don't want that threshold to be easy to reach, even with the Sceptre.
            number=4  # (remember that daytime boosts this damage by 25%!)
        )}

        {EFFECT variation name=sceptre}
        {WML}
    [/object]
#enddef

#define OBJECT_CHAINMAIL WML
    [object]
        id=royal_chainmail
        take_only_once=no
        image="icons/cuirass_leather_studded.png~GS()"
        name=_"Royal Chainmail"
        description=_"Masterfully crafted by Weldyn smiths, then magically duplicated and enhanced by Delfador, this armor grants Konrad +40% resistance to all damage."
        {EFFECT resistance (replace=no
        [resistance]
            blade=-40
            pierce=-40
            impact=-40
            fire=-40
            cold=-40
            arcane=-40
        [/resistance]
    )}
    {WML}
[/object]
#enddef

#define OBJECT_MOONBOW WML
    # we give this to Konrad before he gets the Sceptre, so that won't be affected
    [object]
        id=moonbow
        take_only_once=no
        {EFFECT attack (
            range=ranged
            set_description=_"moonbow"
            set_icon=attacks/bow-elven-magic.png
            increase_attacks=3
            [set_specials]
                mode=append
                {WEAPON_SPECIAL_ARCANE}
                {WEAPON_SPECIAL_SLOW}
            [/set_specials]
        )}
        {WML}
    [/object]
#enddef

#define OBJECT_SANDALS WML
    [object]
        id=sandals
        take_only_once=no
        {EFFECT movement_costs (
            replace=yes
            [movement_costs]
                deep_water=1
                shallow_water=1
                reef=1
                swamp_water=1
                frozen=1
            [/movement_costs]
        )}
        {EFFECT defense (
            replace=yes
            [defense]
                deep_water=60
                shallow_water=60
                reef=60
                swamp_water=60
                frozen=60
            [/defense]
        )}
        {WML}
    [/object]
#enddef

#define OBJECT_BLOODAXE WML
    [object]
        id=bloodaxe
        take_only_once=no
        {EFFECT attack (
            range=melee
            set_description=_"bloodaxe"
            set_icon=attacks/frenzy.png
            increase_damage=3
            [set_specials]
                mode=append
                {WEAPON_SPECIAL_DRAIN}
            [/set_specials]
        )}
        {WML}
    [/object]
#enddef

#define OBJECT_HORN WML
    [object]
        id=horn
        take_only_once=no
        {EFFECT new_ability (
            [abilities]
                [dummy]
                    id=horn
                    name=_"orc-horn"
                    description= _ "Whenever one living ally dies, all others gain regeneration for one turn."
                [/dummy]
            [/abilities]
        )}
        {WML}
    [/object]
#enddef
#define GLOBAL__HORN_IMPLEMENTATION
    # can't put the implementation inside [dummy], because events inside an ability only get include in a scenario if a *unit type* with that ability is added to the scenario
    # since we give this ability via an [object], unit types don't have the ability, and thus the event would never get included
    [event]
        name=side turn
        first_time_only=no
        {FILTER_CONDITION({HAVE_UNIT side,ability=$side_number,horn})}

        # create the event once each turn, so that we can never blow the horn more than once per turn (doing so wouldn't do anything anyway)
        # also, don't trigger this on leaders, because a dead leader usually ends the scenario
        [event]
            name=die
            id=horn_implementation_$side_number # prevent this event from being duplicated
            {FILTER( {IS_ALLY_OF_UNIT ability=horn} {NOT trait=elemental} )}

            {FIRE_EVENT explain_horn_pre} # also used in S22

            [store_unit]
                [filter]
                    {IS_ALLY_OF_UNIT id=$unit.id}
                    {NOT ability=regenerates}
                    {NOT id=$unit.id}
                [/filter]
                variable=stored_horn_units
            [/store_unit]
            [foreach]
                array=stored_horn_units
                [do]
                    {GIVE_OBJECT_TO id=$this_item.id (
                        id=horn_of_glamdrol_regen
                        {EFFECT new_ability (
                            [abilities]
                                {ABILITY_REGENERATES}
                            [/abilities]
                        )}
                    )}
                    [floating_text]
                        x,y=$this_item.x,$this_item.y
                        #po: this is floating text, to be shown above a unit that's temporarily gained the "regeneration" ability
                        text= "<span color='#00CC00' size='x-small'>" + _"+regen" + "</span>"
                    [/floating_text]

                    # can't use duration=turn, because that expires immediately *before* the regeneration kicks in
                    [event]
                        name=side $this_item.side turn refresh,victory
                        priority=99 # remove before other victory events (like possibly storing this unit)
                        delayed_variable_substitution=no
                        {REMOVE_OBJECT horn_of_glamdrol_regen id=$this_item.id}
                    [/event]
                [/do]
            [/foreach]
            {CLEAR_VARIABLE stored_horn_units}

            {FIRE_EVENT explain_horn_post} # also used in S22
        [/event]
    [/event]
    # in case we somehow don't clear regen when a scenario ends (maybe the unit got stored during an event), clear it at the beginning of the next scenario
    [event]
        name=side 1 turn 1
        {REMOVE_OBJECT horn_of_glamdrol_regen ()}
    [/event]
    # play the sound once per scenario
    [event]
        name=explain_horn_pre
        {SOUND warhorn.wav}
        {DELAY 2000}
    [/event]
    # the first time (ever) that Konrad uses the horn, have him say something speical
    [event]
        name=explain_horn_post
        {FILTER_CONDITION({HAVE_UNIT id,ability=Konrad,horn})}
        {FILTER_CONDITION({VARIABLE_CONDITIONAL konrad_explained_horn not_equals yes})}
        [message]
            speaker=Konrad
            message=_"Take heart, men! Rally and avenge the fallen!"
        [/message]
        {VARIABLE konrad_explained_horn yes}
        [allow_undo]
        [/allow_undo]
    [/event]
#enddef
