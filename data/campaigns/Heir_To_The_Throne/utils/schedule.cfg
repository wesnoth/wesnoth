#textdomain wesnoth-h2tt

#define ILLUMINATED_TZ_DAWN
    {DAWN}
    [+time]
        image=misc/time-schedules/default/schedule-dawn.png~BLIT(misc/tod-bright.png)
        lawful_bonus=25
    [/time]
#enddef
#define ILLUMINATED_TZ_MORNING
    {MORNING}
    [+time]
        image=misc/time-schedules/default/schedule-morning.png~BLIT(misc/tod-bright.png)
        lawful_bonus=25
    [/time]
#enddef
#define ILLUMINATED_TZ_MIDDAY
    {MIDNIGHT}
    [+time]
        image=misc/time-schedules/schedule-midday.png~BLIT(misc/tod-bright.png)
        lawful_bonus=25
    [/time]
#enddef
#define ILLUMINATED_TZ_AFTERNOON
    {AFTERNOON}
    [+time]
        image=misc/time-schedules/default/schedule-afternoon.png~BLIT(misc/tod-bright.png)
        lawful_bonus=25
    [/time]
#enddef
#define ILLUMINATED_TZ_DUSK
    {DUSK}
    [+time]
        image=misc/time-schedules/default/schedule-dusk.png~BLIT(misc/tod-bright.png)
        lawful_bonus=25
    [/time]
#enddef
#define ILLUMINATED_TZ_FIRSTWATCH
    {FIRST_WATCH}
    [+time]
        image=misc/time-schedules/default/schedule-firstwatch.png~BLIT(misc/tod-bright.png)
        lawful_bonus=0
    [/time]
#enddef
#define ILLUMINATED_TZ_MIDNIGHT
    {MIDNIGHT}
    [+time]
        image=misc/time-schedules/schedule-midnight.png~BLIT(misc/tod-bright.png)
        lawful_bonus=0
    [/time]
#enddef
#define ILLUMINATED_TZ_SECONDWATCH
    {SECOND_WATCH}
    [+time]
        image=misc/time-schedules/default/schedule-secondwatch.png~BLIT(misc/tod-bright.png)
        lawful_bonus=0
    [/time]
#enddef

#define ILLUMINATED_TZ_SPRING
    {SPRING}
    [+time]
        image=time-schedules/schedule-spring.png~BLIT(misc/tod-bright.png)
        lawful_bonus=25
    [/time]
#enddef
#define ILLUMINATED_TZ_SUMMER
    {SUMMER}
    [+time]
        image=time-schedules/schedule-summer.png~BLIT(misc/tod-bright.png)
        lawful_bonus=25
    [/time]
#enddef
#define ILLUMINATED_TZ_AUTUMN
    {AUTUMN}
    [+time]
        image=time-schedules/schedule-autumn.png~BLIT(misc/tod-bright.png)
        lawful_bonus=25
    [/time]
#enddef
#define ILLUMINATED_TZ_WINTER
    {WINTER}
    [+time]
        image=time-schedules/schedule-winter.png~BLIT(misc/tod-bright.png)
        lawful_bonus=0
    [/time]
#enddef

#define BRAZIER_DEFAULT X Y CURRENT_TIME
    [item]
        x,y={X},{Y}
        halo=halo/fire-aura-small.png
    [/item]
    [time_area] # illuminate everything in a 1 tile radius, but not the center (because the brazier terrain already illuminates the center)
        {FILTER_ADJACENT_LOCATION( x,y={X},{Y} )}
        current_time={CURRENT_TIME}
        {ILLUMINATED_TZ_DAWN}
        {ILLUMINATED_TZ_MORNING}
        {ILLUMINATED_TZ_AFTERNOON}
        {ILLUMINATED_TZ_DUSK}
        {ILLUMINATED_TZ_FIRSTWATCH}
        {ILLUMINATED_TZ_SECONDWATCH}
    [/time_area]
#enddef
#define BRAZIER_SUMMER X Y CURRENT_TIME
    [item]
        x,y={X},{Y}
        halo=halo/fire-aura-small.png
    [/item]
    [time_area] # illuminate everything in a 1 tile radius, but not the center (because the brazier terrain already illuminates the center)
        {FILTER_ADJACENT_LOCATION( x,y={X},{Y} )}
        current_time={CURRENT_TIME}
        {ILLUMINATED_TZ_DAWN}      {TOD_COLOR_SHIFT 0 -10 -5}
        {ILLUMINATED_TZ_MORNING}   {TOD_COLOR_SHIFT 5 5 0}
        {ILLUMINATED_TZ_MIDDAY}    {TOD_COLOR_SHIFT 5 5 0}
        {ILLUMINATED_TZ_AFTERNOON} {TOD_COLOR_SHIFT 5 5 0}
        {ILLUMINATED_TZ_DUSK}
        {ILLUMINATED_TZ_MIDNIGHT}
    [/time_area]
#enddef
#define BRAZIER_WINTER X Y CURRENT_TIME
    [item]
        x,y={X},{Y}
        halo=halo/fire-aura-small.png
    [/item]
    [time_area] # illuminate everything in a 1 tile radius, but not the center (because the brazier terrain already illuminates the center)
        {FILTER_ADJACENT_LOCATION( x,y={X},{Y} )}
        current_time={CURRENT_TIME}
        {ILLUMINATED_TZ_DAWN}   {TOD_COLOR_SHIFT -30 -15 5}
        {ILLUMINATED_TZ_MIDDAY} {TOD_COLOR_SHIFT -5 -5 5}
        {ILLUMINATED_TZ_DUSK}   {TOD_COLOR_SHIFT 5 -20 -30}
        {ILLUMINATED_TZ_FIRSTWATCH}
        {ILLUMINATED_TZ_MIDNIGHT}
        {ILLUMINATED_TZ_SECONDWATCH}
    [/time_area]
#enddef

#define BRAIZER_DYNAMIC X Y OFFSET
    [event]
        name=start
        [message]
            speaker=narrator
            message="BRAIZER_DYNAMIC is deprecated. Please use either BRAZIER_DYNAMIC_DAY or BRAZIER_DYNAMIC_NIGHT"
        [/message]
    [/event]
    {BRAZIER_DYNAMIC_DAY {X} {Y} OFFSET={OFFSET}}
#enddef
#define BRAZIER_DYNAMIC_DAY X Y
#arg OFFSET
0#endarg
    {IF} {VARIABLE_CONDITIONAL bm_tod.id contains spring} {THEN( {BRAZIER_DEFAULT {X} {Y} "$( (7+{OFFSET})%6 )"} )} {/IF}
    {IF} {VARIABLE_CONDITIONAL bm_tod.id contains summer} {THEN( {BRAZIER_SUMMER  {X} {Y} "$( (7+{OFFSET})%6 )"} )} {/IF}
    {IF} {VARIABLE_CONDITIONAL bm_tod.id contains autumn} {THEN( {BRAZIER_DEFAULT {X} {Y} "$( (7+{OFFSET})%6 )"} )} {/IF}
    {IF} {VARIABLE_CONDITIONAL bm_tod.id contains winter} {THEN( {BRAZIER_WINTER  {X} {Y} "$( (7+{OFFSET})%6 )"} )} {/IF}
#enddef
#define BRAZIER_DYNAMIC_NIGHT X Y
#arg OFFSET
0#endarg
    {IF} {VARIABLE_CONDITIONAL bm_tod.id contains spring} {THEN( {BRAZIER_DEFAULT {X} {Y} "$( (7+3+{OFFSET})%6 )"} )} {/IF}
    {IF} {VARIABLE_CONDITIONAL bm_tod.id contains summer} {THEN( {BRAZIER_SUMMER  {X} {Y} "$( (7+4+{OFFSET})%6 )"} )} {/IF}
    {IF} {VARIABLE_CONDITIONAL bm_tod.id contains autumn} {THEN( {BRAZIER_DEFAULT {X} {Y} "$( (7+3+{OFFSET})%6 )"} )} {/IF}
    {IF} {VARIABLE_CONDITIONAL bm_tod.id contains winter} {THEN( {BRAZIER_WINTER  {X} {Y} "$( (7+2+{OFFSET})%6 )"} )} {/IF}
#enddef

#define BRAZIER_DYNAMIC_OVERWORLD X Y
    # meant to be used on the bigmap
    [item]
        x,y={X},{Y}
        halo=halo/fire-aura-small.png
    [/item]
    [time_area] # illuminate everything in a 1 tile radius
        {FILTER_ADJACENT_LOCATION( x,y={X},{Y} )}
        current_time=$( $bm_turns-1 )
        {ILLUMINATED_TZ_AUTUMN}
        {ILLUMINATED_TZ_WINTER}
        {ILLUMINATED_TZ_SPRING}
        {ILLUMINATED_TZ_SUMMER}
    [/time_area]
#enddef

#define SPRING
#arg NOWEATHER
_noweather#endarg
    [time]
        id=spring{NOWEATHER}
        name=_"Spring"
        image=time-schedules/schedule-spring.png
        red=-10
        green=-5
        blue=0
    [/time]
#enddef
#define SUMMER
#arg NOWEATHER
_noweather#endarg
    [time]
        id=summer{NOWEATHER}
        name=_"Summer"
        image=time-schedules/schedule-summer.png
        red=10
        green=10
        blue=0
        lawful_bonus=25
    [/time]
#enddef
#define AUTUMN
#arg NOWEATHER
_noweather#endarg
    [time]
        id=autumn{NOWEATHER}
        name=_"Autumn"
        image=time-schedules/schedule-autumn.png
        red=0
        green=-5
        blue=-5
    [/time]
#enddef
#define WINTER
#arg NOWEATHER
_noweather#endarg
    [time]
        id=winter{NOWEATHER}
        name=_"Winter"
        image=time-schedules/schedule-winter.png
        red=-10
        green=-10
        blue=5
        lawful_bonus=-25
    [/time]
#enddef
#define SCHEDULE_SEASONS
    {AUTUMN}
    {WINTER}
    {SPRING}
    {SUMMER}
#enddef
#define SCHEDULE_SEASONS_WITH_WEATHER
    {AUTUMN (NOWEATHER=)}
    {WINTER (NOWEATHER=)}
    {SPRING (NOWEATHER=)}
    {SUMMER (NOWEATHER=)}
#enddef

#define REPLACE_SCHEDULE SEASON CURRENT_TIME NEW_SCHEDULE
    [if]
        {VARIABLE_CONDITIONAL bm_tod.id contains {SEASON}}
        [then]
            [replace_schedule]
                current_time={CURRENT_TIME}
                {NEW_SCHEDULE}
            [/replace_schedule]
        [/then]
    [/if]
#enddef

#define SCHEDULE_DYNAMIC_DAY
#arg OFFSET
0#endarg
    # synced so that first morning happens at the same turn, regardless of season
    # "contains" because we might have _noweather suffixes
    [event]
        name=prestart,refresh_schedule
        {REPLACE_SCHEDULE spring "$( (7+{OFFSET})%6 )" {DEFAULT_SCHEDULE}}
        {REPLACE_SCHEDULE summer "$( (7+{OFFSET})%6 )" {SUMMER_SCHEDULE}}
        {REPLACE_SCHEDULE autumn "$( (7+{OFFSET})%6 )" {DEFAULT_SCHEDULE}}
        {REPLACE_SCHEDULE winter "$( (7+{OFFSET})%6 )" {WINTER_SCHEDULE}}
    [/event]
#enddef
#define SCHEDULE_DYNAMIC_NIGHT
#arg OFFSET
0#endarg
    # synced so that first night happens at the same turn, regardless of season
    # "contains" because we might have _noweather suffixes
    [event]
        name=prestart,refresh_schedule
        {REPLACE_SCHEDULE spring "$( (7+3+{OFFSET})%6 )" {DEFAULT_SCHEDULE}}
        {REPLACE_SCHEDULE summer "$( (7+4+{OFFSET})%6 )" {SUMMER_SCHEDULE}}
        {REPLACE_SCHEDULE autumn "$( (7+3+{OFFSET})%6 )" {DEFAULT_SCHEDULE}}
        {REPLACE_SCHEDULE winter "$( (7+2+{OFFSET})%6 )" {WINTER_SCHEDULE}}
    [/event]
#enddef

#define MAP_DYNAMIC BASE_ID
#arg SCENARIO_ID
{BASE_ID}#endarg

    # normally high priority (so we don't overwrite any scenario-specific conditional terrain, like in S07),
    # but let this be overridden for special cases (like S00, so that this happens after we incremenet the time of day)
#arg PRIORITY
99#endarg

    # if a map variant exists (-summer, -autumn, -winter), and bm_tod's season matches, use that variant
    # otherwise, default to the no-variant map. We also consider the no-variant map to be the spring map
    id={SCENARIO_ID}
    map_file={BASE_ID}.map
    [event]
        name=prestart
        priority={PRIORITY}
        [lua]
            [args]
                # macros don't get substitued in the lua code block, so pass {BASE_ID} as an argument instead
                id={BASE_ID}
            [/args]
            code=<<
                local args = ...; 
                -- use `string.find` because `bm_tod` might be like either "summer" or "summer_noweather"
                
                -- spring map
                -- don't check for the spring map; we assume that the regular map is spring, and we use it by default
                
                -- summer map
                if (
                    string.find(wml.variables['bm_tod'].id, 'summer') and
                    filesystem.have_asset(filesystem.asset_type.MAP, args.id..'-summer.map')
                ) then
                    wesnoth.wml_actions.replace_map{ map_file=args.id..'-summer.map' }
                end
                
                -- autumn map
                if (
                    string.find(wml.variables['bm_tod'].id, 'autumn') and
                    filesystem.have_asset(filesystem.asset_type.MAP, args.id..'-autumn.map')
                ) then
                    wesnoth.wml_actions.replace_map{ map_file=args.id..'-autumn.map' }
                end
                
                -- winter map
                if (
                    string.find(wml.variables['bm_tod'].id, 'winter') and
                    filesystem.have_asset(filesystem.asset_type.MAP, args.id..'-winter.map')
                ) then
                    wesnoth.wml_actions.replace_map{ map_file=args.id..'-winter.map' }
                end
            >>
                    [/lua]
                [/event]
#enddef
