#textdomain wesnoth-tutorial

#define PRINT STRING
    [print]
        text={STRING}
        size=18
        duration=unlimited
        red,green,blue=255,255,255
    [/print]
#enddef

#define CLEAR_PRINT
    [print]
        text=""	# wmllint: ignore
    [/print]
#enddef

[resource]
    id=hint_message_support
    # Adds the tag [hint_message] which puts the text at the edge (top or bottom) of the screen.
    # Used in the tutorial for info that can be left for reading until another hint is triggered,
    # and unlike [message] does not block the user until they dismiss the text.
    #
    # There is no interaction between PRINT_STRING and [hint_message] - they don't cancel each
    # other's messages.
    [event]
        name=preload
        first_time_only=no
        [lua]
            # Intended implementation, requires PR 5873's add_overlay_text() function.
            code=<<
                if wesnoth.interface.add_overlay_text == nil then
                    return {}
                end

                hint_label = {valid = false}
                -- Takes 'caption' and 'message' arguments, similar to [message]
                function wesnoth.wml_actions.hint_message(cfg)
                    if hint_label.valid then
                        hint_label:remove()
                    end
                    if cfg.message and cfg.message ~= "" then
                        local text
                        if cfg.caption and cfg.caption ~= "" then
                            text = "<b>" .. cfg.caption .. "</b>\n" .. cfg.message
                        else
                            text = cfg.message
                        end
                        hint_label = wesnoth.interface.add_overlay_text(text, {
                            size = 18,
                            color = {255, 255, 255},
                            duration = "unlimited",
                            valign = "top"
                        })
                    end
                end
            >>
        [/lua]
        [lua]
            # Fallback for discussing tutorial changes separately to the add_overlay_text() feature.
            # Dumps the text into the chat log instead.
            code=<<
                if wesnoth.interface.add_overlay_text ~= nil then
                    return {}
                end

                local _ = wesnoth.textdomain 'wesnoth-tutorial'
                wesnoth.interface.add_chat_message(_("hint_message^Tip"), _("This is meant to be used with PR 5873’s add_overlay_text mechanism. Please imagine that only the most recently added message is shown, but a nice UI and with markup support."))

                -- Takes 'caption' and 'message' arguments, however markup is not supported
                function wesnoth.wml_actions.hint_message(cfg)
                    if cfg.message and cfg.message ~= "" then
                        local text
                        if cfg.caption and cfg.caption ~= "" then
                            text = cfg.caption .. ": " .. cfg.message
                        else
                            text = cfg.message
                        end
                        local _ = wesnoth.textdomain 'wesnoth-tutorial'
                        wesnoth.interface.add_chat_message(_("hint_message^Tip"), text)
                    end
                end
            >>
        [/lua]
    [/event]
[/resource]

#define GENDER MALE_WML FEMALE_WML
    [if]
        [have_unit]
            id=student
            gender=male
        [/have_unit]
        [then]
            {MALE_WML}
        [/then]
        [else]
            {FEMALE_WML}
        [/else]
    [/if]
#enddef

#define ALLOW_END_TURN_AFTER_ATTACK
    # for the case the player disobeys delfador's order and attacks
    [event]
        name=attack_end
        id=prevent deadlock
        [filter]
            id=student
        [/filter]

        [allow_end_turn][/allow_end_turn]
    [/event]

    [event]
        name=turn end

        [remove_event]
            id=prevent deadlock
        [/remove_event]
    [/event]
#enddef

#define UNDO_REMINDER
    [if]
        [variable]
            name=undo_option
            equals=yes
        [/variable]
        [then]
            [message]
                speaker=narrator
                caption= _"Undo"
                image=wesnoth-icon.png
                message= _"Don’t forget, you can press <b>u</b> to undo most things if you make a mistake."
            [/message]

            [cancel_action] [/cancel_action]

            {CLEAR_VARIABLE undo_option}
        [/then]
    [/if]

    [allow_undo][/allow_undo]
#enddef

#define TALK_ABOUT ID_STRING MESSAGE_TEXT
    [scroll_to_unit]
        id={ID_STRING}
        highlight=yes
    [/scroll_to_unit]

    [message]
        speaker=Galdrad
        scroll=no
        highlight=no
        message={MESSAGE_TEXT}
    [/message]
#enddef

#define TALK_ABOUT_LOC POSITION MESSAGE_TEXT
    [scroll_to]
        x,y={POSITION}
        highlight=yes
    [/scroll_to]

    [message]
        speaker=Galdrad
        scroll=no
        highlight=no
        message={MESSAGE_TEXT}
    [/message]
#enddef

#define TALK_ABOUT_LOCS POSITION1 POSITION2 MESSAGE_TEXT
    [scroll_to]
        x,y={POSITION1}
        highlight=yes
    [/scroll_to]

    [scroll_to]
        x,y={POSITION2}
        highlight=yes
    [/scroll_to]

    [message]
        speaker=Galdrad
        scroll=no
        highlight=no
        message={MESSAGE_TEXT}
    [/message]
#enddef

# Note: we would not like the user to "press any key" (for example, Esc)
#define CONTINUE_MSG
    _"

<big>Click a mouse button or press the spacebar to continue...</big>"
#enddef
