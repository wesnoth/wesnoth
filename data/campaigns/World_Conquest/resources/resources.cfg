#textdomain wesnoth-wc
## add subfolders
{./data}
{./strings}

#define WORLD_CONQUEST_II_CAMPAIGN_RESOURCE
    [resource]
        id = "wc2_scenario_res"

        [lua]
            code = " wc2_utils = wesnoth.dofile('campaigns/World_Conquest/lua/game_mechanics/utils.lua') "
        [/lua]

        {WC_REPLACE_FILE campaigns/World_Conquest/lua/game_mechanics/artifacts_updated.lua campaigns/World_Conquest/lua/game_mechanics/artifacts.lua wc2_artifacts}
        {WC_REPLACE_FILE campaigns/World_Conquest/lua/shared_utils/wml_converter_updated.lua campaigns/World_Conquest/lua/shared_utils/wml_converter.lua wc2_convert}

        [lua]
            code = " wesnoth.dofile('campaigns/World_Conquest//lua/campaign_main.lua') "
        [/lua]

        [lua]
            code = <<
            --    for k,v in pairs(wesnoth.package) do
            --        print ("Package '" .. k .. "' loaded.")
            --    end
            >>
        [/lua]

        [lua]
            code = <<
                local on_event = wesnoth.require("on_event")

                -- workaround for custom effects not working for units on the recall list at scenario start.
                -- automatic recall happens at "start" event so it should work for those too.
                on_event("prestart", 1, function(cx)
                    if wml.variables.wc_disable_1_16_8_workaround then
                        return
                    end
                    for i,u in ipairs(wesnoth.units.find_on_recall {  }) do
                        -- u:transform() might change hp, todo: it would be nice to hav a function which rebuilds the unit without changing hp.
                        hp = u.hitpoints
                        u:transform(u.type)
                        u.hitpoints = hp
                    end
                end)
                on_event("prerecall", 1, function(cx)
                    if wml.variables.wc_disable_1_16_8_workaround then
                        return
                    end
                    local u = wesnoth.units.get(cx.x1, cx.y1)
                    if u then
                        -- u:transform() might change hp, todo: it would be nice to hav a function which rebuilds the unit without changing hp.
                        hp = u.hitpoints
                        u:transform(u.type)
                        u.hitpoints = hp
                    end
                end)

                -- set promited commanders id to match the save_id of the next scenario.
                on_event("victory", function(cx)
                    for side_num = 1, wml.variables.wc2_player_count do
                        leaders = wesnoth.units.find_on_map{ side = side_num, canrecruit = true }
                        if #leaders == 1 then
                            leaders[1].id = "wc2_leader" .. side_num
                        end
                    end
                end)
            >>
        [/lua]
        [load_resource]
            id = "wc2_trainer_data"
        [/load_resource]
        [load_resource]
            id = "wc2_artifact_data"
        [/load_resource]
        [load_resource]
            id = "wc2_trait_data"
        [/load_resource]
    [/resource]

    [resource]
        id = "wc2_trait_data"
        [world_conquest_data]
            [trait_heroic]
                {WORLD_CONQUEST_II_TRAIT_HEROIC}
            [/trait_heroic]
            [trait_expert]
                {WORLD_CONQUEST_II_TRAIT_EXPERT}
            [/trait_expert]
        [/world_conquest_data]
    [/resource]

    [resource]
        id = "wc2_trainer_data"
        [world_conquest_data]
            {WORLD_CONQUEST_TEK_TRAINER_DEFINITIONS}
        [/world_conquest_data]
    [/resource]

    [resource]
        id = "wc2_artifact_data"
        [world_conquest_data]
            {WORLD_CONQUEST_TEK_ARTIFACT_DEFINITIONS}
        [/world_conquest_data]
    [/resource]

    [resource]
        id = "wc2_scenario_res_extra"
        ## additional mods that work independent on the wc2 core.
        ## but note that they use our utils.lua and assume it to be present in global namespace.
        [lua]
            code = <<
                local on_event = wesnoth.require("on_event")

                -- increased priority '1' so that it is executed before the event from destruction.lua
                -- to prevent a codepath in there from being reached.
                on_event("die", 1, function(cx)
	                local map = wesnoth.current.map
	                local loc = wesnoth.map.get(cx.x1, cx.y1)
	                if wml.variables.wc2_config_enable_terrain_destruction == false then
		                return
	                end
                    if loc:matches{terrain = "Cv^Fds"} then
		                map[loc] = "Cv^Fdw"
	                end
                end)
            >>
        [/lua]
        [lua]
            code = " wesnoth.dofile('campaigns/World_Conquest//lua/optional_mechanics/destruction.lua') "
        [/lua]
        [lua]
            code = " wesnoth.dofile('campaigns/World_Conquest//lua/optional_mechanics/pick_advance.lua') "
        [/lua]
        [lua]
            code = " wesnoth.dofile('campaigns/World_Conquest//lua/optional_mechanics/unitmarker.lua') "
        [/lua]
    [/resource]

#enddef
