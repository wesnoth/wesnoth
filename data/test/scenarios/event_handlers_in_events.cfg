#####
# API(s) being tested: [event][fire_event]
##
# Actions:
# Define a custom event
# Fire the custom event from within another event with [fire_event] using its name
##
# Expected end state:
# The custom event has executed
#####
{GENERIC_UNIT_TEST "event_handlers_in_events_1" (
    [event]
        name=test
        {VARIABLE pass_test 1}
    [/event]
    [event]
        name=start
        {VARIABLE pass_test 0}
        [fire_event]
            name=test
        [/fire_event]
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][fire_event],[event][event]
##
# Actions:
# Define a custom event nested within another event
# Fire the custom event from within the same event than the custom event was defined in with [fire_event] using its name
##
# Expected end state:
# The custom event has executed
#####
{GENERIC_UNIT_TEST "event_handlers_in_events_2" (
    [event]
        name=start
        {VARIABLE pass_test 0}
        [event]
            name=test
            {VARIABLE pass_test 1}
        [/event]

        [fire_event]
            name=test
        [/fire_event]
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][fire_event],[event][event]
##
# Actions:
# Define a custom event nested within another event
# The nested event is defined first in the WML
# Fire the custom event from within a different event than the custom event was defined in with [fire_event] using its name
##
# Expected end state:
# The custom event has executed
#####
{GENERIC_UNIT_TEST "event_handlers_in_events_3" (
    [event]
        name=start
        [event]
            name=test
            {VARIABLE pass_test 1}
        [/event]
    [/event]
    [event]
        name=start
        {VARIABLE pass_test 0}

        [fire_event]
            name=test
        [/fire_event]
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][fire_event],[event][event]
##
# Actions:
# Attempt to fire a custom event before that custom event has been defined
# Then define the custom event
##
# Expected end state:
# The custom event has not been executed
#####
{GENERIC_UNIT_TEST "event_handlers_in_events_4" (
    [event]
        name=start
        {VARIABLE pass_test 1}

        [fire_event]
            name=test
        [/fire_event]
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
    [event]
        name=start
        [event]
            name=test
            {VARIABLE pass_test 0}
        [/event]
    [/event]
)}

#####
# API(s) being tested: [event][event],[unstore_unit]fire_event
##
# Actions:
# Create a unit
# Store the unit
# Define a nested post_advance event
# Make the unit advance by giving it xp and unstoring with fire_event=yes
##
# Expected end state:
# The nested post_advance event is executed
#####
{GENERIC_UNIT_TEST "event_handlers_in_events_5" (
    [event]
        name=start
        {VARIABLE pass_test 0}
        {UNIT 1 "Orcish Grunt" 1 1 ()}
        [store_unit]
            [filter]
                x=1
                y=1
            [/filter]
            variable=my_unit
            kill=yes
        [/store_unit]
        [event]
            name=post_advance
            {VARIABLE pass_test 1}
        [/event]

        {VARIABLE_OP my_unit.experience add 50}
        [unstore_unit]
            variable=my_unit
            fire_event=yes
        [/unstore_unit]
    [/event]
    [event]
        name=start
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][insert_tag]
##
# Actions:
# Create a unit
# Store the unit
# Define a nested post_advance event using [set_variables] and [insert_tag]
# Make the unit advance by giving it xp and unstoring with fire_event=yes
##
# Expected end state:
# The nested post_advance event is executed
#####
{GENERIC_UNIT_TEST "event_handlers_in_events_6" (
    [event]
        name=start
        {VARIABLE pass_test 0}
        {UNIT 1 "Orcish Grunt" 1 1 ()}
        [store_unit]
            [filter]
                x=1
                y=1
            [/filter]
            variable=my_unit
            kill=yes
        [/store_unit]
        [set_variables]
            name=ev0
            [value]
                name=post_advance
                {VARIABLE pass_test 1}
            [/value]
        [/set_variables]
        [insert_tag]
            name=event
            variable=ev0
        [/insert_tag]

        {VARIABLE_OP my_unit.experience add 50}
        [unstore_unit]
            variable=my_unit
            fire_event=yes
        [/unstore_unit]
    [/event]
    [event]
        name=start
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][event][insert_tag]
##
# Actions:
# Create a unit
# Store the unit
# Define a nested custom event which itself has a nested post_advance event using [set_variables] and [insert_tag]
# Fire the outer, custom event using its name
# Make the unit advance by giving it xp and unstoring with fire_event=yes
##
# Expected end state:
# The nested post_advance event is executed
#####
{GENERIC_UNIT_TEST "event_handlers_in_events_7" (
    [event]
        name=start
        {VARIABLE pass_test 0}
        {UNIT 1 "Orcish Grunt" 1 1 ()}
        [store_unit]
            [filter]
                x=1
                y=1
            [/filter]
            variable=my_unit
            kill=yes
        [/store_unit]
        [set_variables]
            name=ev0
            [value]
                name=post_advance
                {VARIABLE pass_test 1}
            [/value]
        [/set_variables]
        [event]
            name=test
            [insert_tag]
                name=event
                variable=ev0
            [/insert_tag]
        [/event]
        [fire_event]
            name=test
        [/fire_event]

        {VARIABLE_OP my_unit.experience add 50}
        [unstore_unit]
            variable=my_unit
            fire_event=yes
        [/unstore_unit]
    [/event]
    [event]
        name=start
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][insert_tag]
##
# Actions:
# Create a unit
# Store the unit
# Define a nested custom event which itself has a nested post_advance event using the stored unit's [variables] and [insert_tag]
# Make the unit advance by giving it xp and unstoring with fire_event=yes
##
# Expected end state:
# The nested post_advance event is executed
#####
{GENERIC_UNIT_TEST "event_handlers_in_events_8" (
    [event]
        name=start
        {VARIABLE pass_test 0}
        {UNIT 1 "Orcish Grunt" 1 1 (
            [variables]
                [my_event]
                    name=post_advance
                    {VARIABLE pass_test 1}
                [/my_event]
            [/variables]
        )}
        [store_unit]
            [filter]
                x=1
                y=1
            [/filter]
            variable=my_unit
            kill=yes
        [/store_unit]
        [insert_tag]
            name=event
            variable=my_unit.variables.my_event
        [/insert_tag]

        {VARIABLE_OP my_unit.experience add 50}
        [unstore_unit]
            variable=my_unit
            fire_event=yes
        [/unstore_unit]
    [/event]
    [event]
        name=start
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][fire_event]id
##
# Actions:
# Define a custom event
# Fire the custom event from within another event with [fire_event] using its ID
##
# Expected end state:
# The custom event has executed
#####
{GENERIC_UNIT_TEST "event_handlers_in_events_9" (
    [event]
        name=start
        {VARIABLE pass_test 0}
        [event]
            name=foo
            id=test
            {VARIABLE pass_test 1}
        [/event]

        [fire_event]
            id=test
        [/fire_event]
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event]delayed_variable_substitution=yes
##
# Actions:
# Define a nested event with delayed_variable_substitution=yes
##
# Expected end state:
# The nested event delays substituting the variable's value until it executes, rather than when the outer event executes
#####
{GENERIC_UNIT_TEST "event_handlers_in_events__delayed" (
    [event]
        name=prestart
        {VARIABLE pass_test 0}

        [event]
            name=start
            delayed_variable_substitution=yes
            {VARIABLE pass_test "$($pass_test + 1)"}
            {RETURN ({VARIABLE_CONDITIONAL pass_test equals 2})}
        [/event]

        {VARIABLE pass_test 1}
    [/event]
)}

#####
# API(s) being tested: [event]delayed_variable_substitution=yes, name=$variable
##
# Actions:
# Define a nested event with delayed_variable_substitution=yes and a dynamic name
##
# Expected end state:
# The nested event delays substituting the variable's value until it executes, rather than when the outer event executes
# Because of this, the variable in the event name is substituted on the fly, so the event never executes.
#####
{GENERIC_UNIT_TEST "event_handlers_in_events__delayed__dynamic_name" (
    [event]
        name=turn 1
        {VARIABLE pass_test 0}

        [event]
            name="turn $($turn_number + 1)"
            delayed_variable_substitution=yes
            {VARIABLE_OP pass_test add 1}
        [/event]

        {VARIABLE pass_test 1}
        [end_turn][/end_turn]
    [/event]
    [event]
        name=side turn
        first_time_only=no
        [end_turn][/end_turn]
    [/event]
    [event]
        name=turn 2 end
        [end_turn][/end_turn]
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event]delayed_variable_substitution
##
# Actions:
# Define a nested event with delayed_variable_substitution=no
##
# Expected end state:
# The nested event immediately substitutes the variable's value when the outer event executes
#####
{GENERIC_UNIT_TEST "event_handlers_in_events__immediate" (
    [event]
        name=prestart
        {VARIABLE pass_test 0}

        [event]
            name=start
            delayed_variable_substitution=no
            {VARIABLE pass_test "$($pass_test + 1)"}
            {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
        [/event]
        
        {VARIABLE pass_test 1}
    [/event]
)}

#####
# API(s) being tested: [event]delayed_variable_substitution=no, name=$variable
##
# Actions:
# Define a nested event with delayed_variable_substitution=no and a dynamic name
##
# Expected end state:
# The nested event immediately substitutes the variable's value when the outer event executes
# Because of this, the variable in the event name is substituted immediately, so the event executes on the next turn.
{GENERIC_UNIT_TEST "event_handlers_in_events__immediate__dynamic_name" (
    [event]
        name=turn 1
        {VARIABLE pass_test 0}

        [event]
            name="turn $($turn_number + 1)"
            delayed_variable_substitution=no
            {VARIABLE_OP pass_test add 1}
        [/event]

        {VARIABLE pass_test 1}
        [end_turn][/end_turn]
    [/event]
    [event]
        name=side turn
        first_time_only=no
        [end_turn][/end_turn]
    [/event]
    [event]
        name=turn 2 end
        [end_turn][/end_turn]
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 2})}
    [/event]
)}

#####
# API(s) being tested: [event]delayed_variable_substitution=yes[insert_tag]
##
# Actions:
# Define a post_advance event which includes a filter created via [insert_tag]
# Two units are created, exactly one of which matches the filter
# Both units are advanced a level
# The filter variable is changed to a race not present
# Both units are advanced another level
##
# Expected end state:
# The event was triggered exactly once
#####
{GENERIC_UNIT_TEST "event_handlers_in_events__delayed__dynamic_filter" (
    [event]
        name=start
        {VARIABLE pass_test 0}
        [set_variables]
            name=filter
            [value]
                race=elf
            [/value]
        [/set_variables]
        {UNIT 1 "Orcish Grunt" 1 1 ()}
        {UNIT 1 "Elvish Archer" 2 2 ()}
        [event]
            name=post_advance
            first_time_only=no
            delayed_variable_substitution=yes
            [insert_tag]
                name=filter
                variable=filter
            [/insert_tag]
            {VARIABLE_OP pass_test add 1}
        [/event]
        [modify_unit]
            [filter]
                x=1,2
                y=1,2
            [/filter]
            experience=50
        [/modify_unit]
        [set_variables]
            name=filter
            [value]
                race=bat
            [/value]
        [/set_variables]
        [modify_unit]
            [filter]
                x=1,2
                y=1,2
            [/filter]
            experience=100
        [/modify_unit]
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event]delayed_variable_substitution=no[insert_tag]
##
# Actions:
# Define a post_advance event which includes a filter created via [insert_tag]
# Two units are created, exactly one of which matches the filter
# Both units are advanced a level
# The filter variable is changed to a race not present
# Both units are advanced another level
##
# Expected end state:
# The event was triggered twice, because the [insert_tag] is substituted when the event was registered.
#####
{GENERIC_UNIT_TEST "event_handlers_in_events__immediate__dynamic_filter" (
    [event]
        name=start
        {VARIABLE pass_test 0}
        [set_variables]
            name=filter
            [value]
                race=elf
            [/value]
        [/set_variables]
        {UNIT 1 "Orcish Grunt" 1 1 ()}
        {UNIT 1 "Elvish Archer" 2 2 ()}
        [event]
            name=post_advance
            first_time_only=no
            delayed_variable_substitution=no
            [insert_tag]
                name=filter
                variable=filter
            [/insert_tag]
            {VARIABLE_OP pass_test add 1}
        [/event]
        [modify_unit]
            [filter]
                x=1,2
                y=1,2
            [/filter]
            experience=50
        [/modify_unit]
        [set_variables]
            name=filter
            [value]
                race=bat
            [/value]
        [/set_variables]
        [modify_unit]
            [filter]
                x=1,2
                y=1,2
            [/filter]
            experience=100
        [/modify_unit]
        {RETURN ({VARIABLE_CONDITIONAL pass_test equals 2})}
    [/event]
)}

#####
# API(s) being tested: [remove_event]
##
# Actions:
# Define an event with an ID value
# Remove the event
##
# Expected end state:
# The removed event doesn't fire
#####
{GENERIC_UNIT_TEST "event_remove_test" (
    [event]
        name=start
        [remove_event]
            id=fail
        [/remove_event]
    [/event]
    [event]
        id=fail
        name=start
        {FAIL}
    [/event]
    [event]
        name=start
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [event]first_time_only
##
# Actions:
# Define a nested event with first_time_only=no
##
# Expected end state:
# The event executes multiple times
#####
{GENERIC_UNIT_TEST "event_repeat_test" (
    [event]
        name=start
        {VARIABLE trigger_count 0}
    [/event]
    [event]
        name=turn_end
        first_time_only=no
        {VARIABLE_OP trigger_count add 1}
    [/event]
    [event]
        name=side turn
        first_time_only=no
        [end_turn][/end_turn]
    [/event]
    [event]
        name=turn 3
        {RETURN ({VARIABLE_CONDITIONAL trigger_count equals 2})}
    [/event]
)}
