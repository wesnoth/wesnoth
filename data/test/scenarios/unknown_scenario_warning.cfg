# wmllint: no translatables

# Check that the "this will lead to an unknown scenario" warning doesn't get triggered.
{GENERIC_UNIT_TEST "unknown_scenario_false_positives" (
    # Note: the C++ code under test runs after all name=start events have run,
    # so putting the {SUCCEED} in a start event will skip the test.
    [event]
        name = side 1 turn 1
        {SUCCEED}
    [/event]

    # This event doesn't get triggered, but its contents will be checked.
    [event]
        name = turn 2

        # A scenario that exists (has to be a [test], as the current scenario's tagname is used).
        [endlevel]
            next_scenario = "empty_test"
        [/endlevel]

        # Variable interpolation (false negatives are acceptable, but not false positives).
        {VARIABLE chosen_branch empty_test}
        [endlevel]
            next_scenario = "$chosen_branch"
        [/endlevel]

        # Using the scenario's next_scenario instead of overriding it
        [endlevel]
            result=victory
        [/endlevel]

#ifndef SCHEMA_SHOULD_SKIP_THIS
        # Should only check [endlevel] tags, not similarly named attributes in other tags
        [dummy]
            next_scenario = "non_existent_scenario"
        [/dummy]
#endif
    [/event]
)}

# Not a branching scenario, but the only route uses a variable
{GENERIC_UNIT_TEST "unknown_scenario_interpolated" (
    # Note: the C++ code under test runs after all name=start events have run,
    # so putting the {SUCCEED} in a start event will skip the test.
    [event]
        name = side 1 turn 1
        {SUCCEED}
    [/event]

    next_scenario = "$chosen_branch"
)}

# The tests below should all trigger the dialog, thus returning result BROKE_STRICT.
#
# There are variants to trigger all the alternative wordings of the dialog for interactive testing.
#
# For the automated testing, there's value in running exactly one of these, because any of them will
# check that triggering the dialog results in BROKE_STRICT, making the tests above fail.
#
# This is effectively a varargs macro. There's always a branch to "non_existent_scenario", and since
# the code under test combines non-unique ids then any next_scenario that points at the same id
# won't change the warning message.
#define TEST_UNKNOWN_SCENARIO NAME
#arg SCEN2
    "non_existent_scenario"
#endarg
#arg SCEN3
    "non_existent_scenario"
#endarg
#arg SCEN4
    "non_existent_scenario"
#endarg
{GENERIC_UNIT_TEST {NAME} (
    [event]
        name = side 1 turn 1
        {SUCCEED}
    [/event]

    next_scenario = "non_existent_scenario"

    [event]
        name = turn 2

        [endlevel]
            next_scenario = {SCEN2}
        [/endlevel]
        [endlevel]
            next_scenario = {SCEN3}
        [/endlevel]
        [endlevel]
            next_scenario = {SCEN4}
        [/endlevel]
    [/event]
)}
#enddef

# The numbers in the names are (number of broken branches) (number of ok branches) (last scenario)
{TEST_UNKNOWN_SCENARIO "unknown_scenario_1_0"}
{TEST_UNKNOWN_SCENARIO "unknown_scenario_1_0_last" SCEN2=""}
{TEST_UNKNOWN_SCENARIO "unknown_scenario_1_1" SCEN2="test_return"}
{TEST_UNKNOWN_SCENARIO "unknown_scenario_2_0" SCEN2="non_existent_scenario_2"}

# This should give the same message as unknown_scenario_1_1_last, because "" and "null" are equivalent
{TEST_UNKNOWN_SCENARIO "unknown_scenario_1_1_last_null" SCEN2="test_return" SCEN3="" SCEN4="null"}

#undef TEST_UNKNOWN_SCENARIO
