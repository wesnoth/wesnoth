
# This is almost exactly the same as test_version.cpp
{GENERIC_UNIT_TEST test_lua_version_api (
    [event]
        name=start
        [lua]
            code=<<
                local V = wesnoth.version
                local empty = V""
                unit_test.assert_equal(empty, V"0.0.0", 'empty version is 0.0.0')
                
                local dots1 = V"........"
                local dots2 = V"...hullo";
                
                unit_test.assert_equal(dots1, empty, 'run of dots is 0.0.0')
                unit_test.assert_equal(dots2, V"0.0.0hullo", 'dots plus suffix')
                
                local canonical = V"1.2.3"
                local canonical_suffixed = V"1.2.3+dev"

                unit_test.assert(canonical.is_canonical,  'canonical')
                unit_test.assert(canonical_suffixed.is_canonical, 'canonical suffixed')
                unit_test.assert_less(canonical, canonical_suffixed, 'canonical < canonical suffixed')
                unit_test.assert_greater(canonical_suffixed, canonical, 'canonical suffixed > canonical')
                
                local non_canonical = V"1.2.3.4.5.7.8.9"
                local non_canonical_suffixed = V"1.2.3.4.5.7.8.9+dev"
                
                unit_test.assert(not non_canonical.is_canonical, 'non-canonical')
                unit_test.assert(not non_canonical_suffixed.is_canonical, 'canonical suffixed')
                unit_test.assert_less(non_canonical, non_canonical_suffixed, 'non-canonical < canonical suffixed')
                unit_test.assert_greater(non_canonical_suffixed, non_canonical, 'canonical suffixed > canonical')

                local right_zero = V"1.2.0"
                local no_right_zero = V"1.2"
                
                unit_test.assert_equal(right_zero, no_right_zero, 'x.0 == x')

                local left_zero = V"0.1.4"
                local no_left_zero = V"1.4"
                
                unit_test.assert_not_equal(left_zero, no_left_zero, '0.x ~= x')

                local bad_version1 = "Viva la revoluciÃ³n!";
                local bad_version2 = "To infinity and beyond!";
                
                unit_test.assert_equal(V(bad_version1), V("0.0.0" .. bad_version1), 'invalid version is self-equal')
                unit_test.assert_equal(V(bad_version2), V("0.0.0" .. bad_version2), 'invalid version is self-equal')

                local somewhat_complex = V"1.5.10-1.6beta2"
                unit_test.assert_equal(somewhat_complex.major, 1, 'major version')
                unit_test.assert_equal(somewhat_complex.minor, 5, 'minor version')
                unit_test.assert_equal(somewhat_complex.revision, 10, 'revision level')
                unit_test.assert_equal(somewhat_complex.special, "1.6beta2", 'version suffix')
                unit_test.assert_equal(somewhat_complex.sep, '-', 'suffix separator')
            >>
        [/lua]
        [lua]
            code="
                unit_test.assert_equal(wesnoth.current_version(), wesnoth.version'{WESNOTH_VERSION}', 'current version')
                unit_test.assert_equal(wesnoth.current_version()[1], 1, 'current major version equals 1')
                unit_test.assert_greater_equal(wesnoth.current_version()[2], 0, 'current minor version greater than equal to 0')
                unit_test.assert_less_equal(wesnoth.current_version()[2], 100, 'current minor version less than equal to 100')
                unit_test.assert_greater_equal(wesnoth.current_version()[3], 0, 'current revision version greater than equal to 0')
                unit_test.assert_less_equal(wesnoth.current_version()[3], 100, 'current revision version less than equal to 100')
                unit_test.assert_equal(wesnoth.current_version()[4], nil, 'current suffix version blank')
                unit_test.succeed()
            "
        [/lua]
    [/event]
)}
