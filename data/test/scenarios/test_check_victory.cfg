#textdomain wesnoth-test
# This series of tests checks that scenarios are ending as appropriate.

#define TEST_CHECK_VICTORY_SCEN ID DC1 DC2 DC3 DC4 TWO_THREE_CONTROLLER VWED EVENTS
    [test]
        name = _ "Unit Test " + {ID}
        map_file=test/maps/move_skip_sighted.map
        turns = 3
        id = {ID}
        random_start_time = no
        victory_when_enemies_defeated = {VWED}
        is_unit_test = yes

        {DAWN}

        [side]
            side=1
            controller=human
            name = _ "Alice"
            type = Elvish Archer
            id=alice
            fog=no
            team_name=West
            defeat_condition={DC1}
            {UNIT 1 "Elvish Fighter" 1 1 (id=t1)}
        [/side]
        [side]
            side=2
            controller={TWO_THREE_CONTROLLER}
            name = _ "Bob"
            type = Orcish Grunt
            id=bob
            fog=no
            team_name=East
            defeat_condition={DC2}
            {UNIT 2 "Orcish Archer" 1 2 (id=t2)}
        [/side]
        [side]
            side=3
            controller={TWO_THREE_CONTROLLER}
            name = _ "Dave"
            type = Dwarvish Fighter
            id=dave
            fog=no
            team_name=East
            defeat_condition={DC3}
            {UNIT 3 "Dwarvish Thunderer" 1 3 (id=t3)}
        [/side]
        [side]
            side=4
            controller=human
            name= _ "Charlie"
            type = Chocobone
            id=charlie
            fog=no
            team_name=West
            defeat_condition={DC4}
            {UNIT 4 "Dark Adept" 1 4 (id=t4)}
        [/side]

        {EVENTS}
    [/test]
#enddef

#define KILL_SIDE SIDE CR
    [kill]
        side={SIDE}
        canrecruit={CR}
    [/kill]
#enddef

#define FAIL_IF_NO_END ACTIONS
    [event]
        name=start
        {ACTIONS}

        [end_turn]
        [/end_turn]
    [/event]
    [event]
        name=side 2 turn 1
        {FAIL}
    [/event]
#enddef

#####
# API(s) being tested: [side]defeat_condition=
##
# Expected end state:
# The test times out because no sides lose their leader.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_basic_timeout "no_leader_left" "no_leader_left" "no_leader_left" "no_leader_left" "human" "yes" ()}

#####
# API(s) being tested: [side]defeat_condition=
##
# Expected end state:
# The test fails because no sides lose their leader.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_basic_macro_check "no_leader_left" "no_leader_left" "no_leader_left" "no_leader_left" "human" "yes" ({FAIL_IF_NO_END ()})}

#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill the leaders of sides 2 and 3.
##
# Expected end state:
# The match ends with victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_basic "no_leader_left" "no_leader_left" "no_leader_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "2,3" "yes"} #kill leaders of side 2,3
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill the non-leader units of sides 2 and 3.
##
# Expected end state:
# The match does not end with victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_basic_fail "no_leader_left" "no_leader_left" "no_leader_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "2,3" "no"} #kill units but not leaders of side 2,3
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill all units of sides 2 and 3.
##
# Expected end state:
# The match ends with victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_basic_two "no_leader_left" "no_leader_left" "no_leader_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        [kill]
            side=2,3
        [/kill]
    )}
)}

#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Sides 2 and 3 are AI controlled.
# Kill the leaders of sides 2 and 3.
##
# Expected end state:
# The match ends with victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_basic_ai "no_leader_left" "no_leader_left" "no_leader_left" "no_leader_left" "ai" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "2,3" "yes"} #kill leaders of side 2,3
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Sides 2 and 3 are AI controlled.
# Kill the non-leader units of sides 2 and 3.
##
# Expected end state:
# The match does not end with victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_basic_ai_fail "no_leader_left" "no_leader_left" "no_leader_left" "no_leader_left" "ai" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "2,3" "no"} #kill units but not leaders of side 2,3
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Sides 2 and 3 are AI controlled.
# Kill all units of sides 2 and 3.
##
# Expected end state:
# The match ends with victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_basic_ai_two "no_leader_left" "no_leader_left" "no_leader_left" "no_leader_left" "ai" "yes" (
    {FAIL_IF_NO_END (
        [kill]
            side=2,3
        [/kill]
    )}
)}

#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill the leaders of sides 2 and 3.
##
# Expected end state:
# The test fails since to defeat side 2 all units need to be killed.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_one_no_units_fail_one "no_leader_left" "no_units_left" "no_leader_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "2,3" "yes"} #kill leaders of side 2,3
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill the non-leader units of sides 2 and 3.
##
# Expected end state:
# The test fails since side 2 has units left and side 3 has its leader left.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_one_no_units_fail_two "no_leader_left" "no_units_left" "no_leader_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "2,3" "no"} #kill units but not leaders of side 2,3
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill all units of sides 2 and 3.
##
# Expected end state:
# The match ends in victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_one_no_units "no_leader_left" "no_units_left" "no_leader_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        [kill]
            side=2,3
        [/kill]
    )}
)}

#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill the leader units of sides 2 and 3.
##
# Expected end state:
# The test fails since sides 2 and 3 have units left.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_two_no_units_fail_one "no_leader_left" "no_units_left" "no_units_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "2,3" "yes"} #kill leaders of side 2,3
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill the non-leader units of sides 2 and 3.
##
# Expected end state:
# The test fails since sides 2 and 3 have units left.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_two_no_units_fail_two "no_leader_left" "no_units_left" "no_units_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "2,3" "no"} #kill units but not leaders of side 2,3
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill all units of sides 2 and 3.
##
# Expected end state:
# The match ends in victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_two_no_units "no_leader_left" "no_units_left" "no_units_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        [kill]
            side=2,3
        [/kill]
    )}
)}

#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Expected end state:
# The match ends in victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_always_one "always" "no_leader_left" "no_leader_left" "always" "human" "yes" ()}

#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill side 4's leader.
##
# Expected end state:
# The match ends in victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_always_two "always" "no_leader_left" "no_leader_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "4" "yes"}
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill side 4's leader.
##
# Expected end state:
# The test fails since side 4 has units left.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_always_no_units_fail "always" "no_leader_left" "no_leader_left" "no_units_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "4" "yes"}
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill all of side 4's units.
##
# Expected end state:
# The match ends in victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_always_no_units "always" "no_leader_left" "no_leader_left" "no_units_left" "human" "yes" (
    {FAIL_IF_NO_END (
        [kill]
            side=4
        [/kill]
    )}
)}

#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Expected end state:
# The test fails since side 4 has units left.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_always_fail "always" "no_leader_left" "no_leader_left" "no_leader_left" "human" "yes" ({FAIL_IF_NO_END ()})}

#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill the leader of sides 2 and 3.
##
# Expected end state:
# The test fails since side 2 can never be defeated.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_never_fail_one "no_leader_left" "never" "no_leader_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "2,3" "yes"} #kill leaders of side 2,3
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill the non-leader units of sides 2 and 3.
##
# Expected end state:
# The test fails since side 2 can never be defeated and side 3 has its leader.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_never_fail_two "no_leader_left" "never" "no_leader_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "2,3" "no"} #kill units but not leaders of side 2,3
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill all units of sides 2 and 3.
##
# Expected end state:
# The test fails since side 2 can never be defeated.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_never_fail_three "no_leader_left" "never" "no_leader_left" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        [kill]
            side=2,3
        [/kill]
    )}
)}

#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill the leaders of sides 1 and 4.
##
# Expected end state:
# The match ends in victory.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_never_pass "no_leader_left" "always" "never" "no_leader_left" "human" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "1,4" "yes"}
    )}
)}
#####
# API(s) being tested: [side]defeat_condition=,[test]victory_when_enemies_defeated=
##
# Actions:
# Kill the leaders of sides 1 and 4.
##
# Expected end state:
# The test fails by defeat since sides 2 and 3 are controlled by the AI.
#####
{TEST_CHECK_VICTORY_SCEN check_victory_never_ai_fail "no_leader_left" "always" "never" "no_leader_left" "ai" "yes" (
    {FAIL_IF_NO_END (
        {KILL_SIDE "1,4" "yes"}
    )}
)}

# //TODO: Add checks for victory_when_enemies_defeated = no
