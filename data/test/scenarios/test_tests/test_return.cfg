# These are sanity checks of the unit testing mechanisms.

#####
# API(s) being tested: RETURN
##
# Expected end state:
# Return true works.
#####
{GENERIC_UNIT_TEST "test_return" (
    [event]
        name = start
        {RETURN ([true][/true])}
    [/event]
)}

#####
# API(s) being tested: RETURN
##
# Expected end state:
# Return false fails.
#####
{GENERIC_UNIT_TEST "test_return_fail" (
    [event]
        name = start
        {RETURN ([not][true][/true][/not])}
    [/event]
)}

#####
# API(s) being tested: unit_test.succeed()
##
# Expected end state:
# The test succeeds.
#####
{GENERIC_UNIT_TEST "test_lua_return" (
    [event]
        name = start
        [lua]
            code=<<unit_test.succeed()>>
        [/lua]
    [/event]
)}
#####
# API(s) being tested: unit_test.fail()
##
# Expected end state:
# The test fails.
#####
{GENERIC_UNIT_TEST "test_lua_return_fail" (
    [event]
        name = start
        [lua]
            code=<<unit_test.fail()>>
        [/lua]
    [/event]
)}

#####
# API(s) being tested: unit_test.finish
##
# Expected end state:
# The test ends with victory.
#####
{GENERIC_UNIT_TEST "test_lua_return_victory" (
    [event]
        name = start
        [lua]
            code=<<unit_test.finish('victory')>>
        [/lua]
    [/event]
)}
#####
# API(s) being tested: unit_test.finish
##
# Expected end state:
# The test ends with defeat.
#####
{GENERIC_UNIT_TEST "test_lua_return_defeat" (
    [event]
        name = start
        [lua]
            code=<<unit_test.finish('defeat')>>
        [/lua]
    [/event]
)}
