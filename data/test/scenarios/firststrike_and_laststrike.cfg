#textdomain wesnoth-test

#####
# API(s) being tested: [firststrike]
##
# Actions:
# This uses a "common keep" map, with Alice and Bob already in position to attack any of the other units.
# In this test they're all Orcish Grunts.
# Set everyone to 1 hp, so that a single hit will kill.
# Give Alice negatestrike.
# Give Charlie firststrike.
# Give Dave laststrike.
# Simulate various combats to check that negatestrike ignores both firststrike and laststrike.
# Give Alice firststrike.
# Simulate various combats to check that firststrike goes first.
# Finally, give Bob laststrike and simulate combat with Dave.
##
# Expected end state:
# If either unit has negatestrike, the attacker has the advantage.
# Firststrike gives an advantage.
# Laststrike gives a disadvantage.
# Two units that both have firststrike act the same as neither having it.
# Two units that both have laststrike act the same as neither having it.
#####
{COMMON_KEEP_A_B_C_D_UNIT_TEST firststrike_and_laststrike (
    [event]
        name=start

        [object]
            [filter]
                id=alice
            [/filter]
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    [firststrike]
                        id=negatestrike
                        name= _ "negate strike"
                        description= _ "Ignores firststrike - in combats with this unit, the attacker always strikes first."
                        apply_to=both
                    [/firststrike]
                [/set_specials]
            [/effect]
        [/object]

        [object]
            [filter]
                id=charlie
            [/filter]
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    {WEAPON_SPECIAL_FIRSTSTRIKE}
                [/set_specials]
            [/effect]
        [/object]

        [object]
            [filter]
                id=dave
            [/filter]
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    [firststrike]
                        id=laststrike
                        name= _ "last strike"
                        description= _ "Opposite of first strike â€” this unit strikes last, even on offense."
                        apply_to=opponent
                    [/firststrike]
                [/set_specials]
            [/effect]
        [/object]

        [lua]
            code=<<
                local alice = wesnoth.units.find({id="alice"})[1]
                local bob = wesnoth.units.find({id="bob"})[1]
                local charlie = wesnoth.units.find({id="charlie"})[1]
                local dave = wesnoth.units.find({id="dave"})[1]

                alice.hitpoints = 1
                bob.hitpoints = 1
                charlie.hitpoints = 1
                dave.hitpoints = 1

                -- Everybody's an orcish grunt, and they're all on 60% terrain. As they only have 1 hp, the order of attacks is significant.
                -- Whoever strikes first, their chance to survive is the sum of
                -- hit first time
                -- both combatants miss once each, then a hit
                -- four consecutive misses
                local first_survival_chance = 0.4 + (0.6 ^ 2 * 0.4) + 0.6 ^ 4

                -- Whoever strikes second has lower odds. They need:
                -- miss followed by hit
                -- three consecutive misses
                local second_survival_chance = 0.6 * 0.4 + 0.6 ^ 3

                -- The chances calculated above are expected to match the 'unscathed' combat stat,
                -- however bug #6590 is that that stat does not take the expected value when both
                -- units could die in the combat. Instead the 'average_hp' stat is used, because
                -- for a setup where both combatants start with 1hp the average matches the chance
                -- of surviving.

                -- Alice starts with "negate strike", which means all of the combats should be "attacker swings first"
                local att_stats, def_stats = wesnoth.simulate_combat(alice, bob)
                unit_test.assert_approx_equal(att_stats.average_hp, first_survival_chance, 0.01, "negatestrike: Alice v Bob test failed")
                att_stats, def_stats = wesnoth.simulate_combat(alice, charlie)
                unit_test.assert_approx_equal(att_stats.average_hp, first_survival_chance, 0.01, "negatestrike: Alice v Charlie test failed")
                att_stats, def_stats = wesnoth.simulate_combat(alice, dave)
                unit_test.assert_approx_equal(att_stats.average_hp, first_survival_chance, 0.01, "negatestrike: Alice v Dave test failed")
                att_stats, def_stats = wesnoth.simulate_combat(bob, alice)
                unit_test.assert_approx_equal(def_stats.average_hp, second_survival_chance, 0.01, "negatestrike: Bob v Alice test failed")
                att_stats, def_stats = wesnoth.simulate_combat(charlie, alice)
                unit_test.assert_approx_equal(def_stats.average_hp, second_survival_chance, 0.01, "negatestrike: Charlie v Alice test failed")
                att_stats, def_stats = wesnoth.simulate_combat(dave, alice)
                unit_test.assert_approx_equal(def_stats.average_hp, second_survival_chance, 0.01, "negatestrike: Dave v Alice test failed")

                -- Give Alice the normal firststrike ability
                alice.attacks[1] = charlie.attacks[1]

                -- Alice has firststrike, so she should get first strike on any combat where she's the attacker
                att_stats, def_stats = wesnoth.simulate_combat(alice, bob)
                unit_test.assert_approx_equal(att_stats.average_hp, first_survival_chance, 0.01, "Alice v Bob test failed")
                att_stats, def_stats = wesnoth.simulate_combat(alice, charlie)
                unit_test.assert_approx_equal(att_stats.average_hp, first_survival_chance, 0.01, "Alice v Charlie test failed")
                att_stats, def_stats = wesnoth.simulate_combat(alice, dave)
                unit_test.assert_approx_equal(att_stats.average_hp, first_survival_chance, 0.01, "Alice v Dave test failed")

                -- When Alice is the defender, she should still get first strike against anyone except Charlie (who also has firststrike)
                att_stats, def_stats = wesnoth.simulate_combat(bob, alice)
                unit_test.assert_approx_equal(def_stats.average_hp, first_survival_chance, 0.01, "Bob v Alice test failed")
                att_stats, def_stats = wesnoth.simulate_combat(charlie, alice)
                unit_test.assert_approx_equal(def_stats.average_hp, second_survival_chance, 0.01, "Charlie v Alice test failed")
                att_stats, def_stats = wesnoth.simulate_combat(dave, alice)
                unit_test.assert_approx_equal(def_stats.average_hp, first_survival_chance, 0.01, "Dave v Alice test failed")

                -- Attacker or defender, Dave always goes last, even against Bob
                att_stats, def_stats = wesnoth.simulate_combat(bob, dave)
                unit_test.assert_approx_equal(att_stats.average_hp, first_survival_chance, 0.01, "Bob v Dave test failed")
                att_stats, def_stats = wesnoth.simulate_combat(dave, bob)
                unit_test.assert_approx_equal(def_stats.average_hp, first_survival_chance, 0.01, "Dave v Bob test failed")

                -- Final test is two units that both have laststrike
                bob.attacks[1] = dave.attacks[1]
                att_stats, def_stats = wesnoth.simulate_combat(bob, dave)
                unit_test.assert_approx_equal(att_stats.average_hp, first_survival_chance, 0.01, "Both with laststrike: Bob v Dave failed")
                att_stats, def_stats = wesnoth.simulate_combat(dave, bob)
                unit_test.assert_approx_equal(def_stats.average_hp, second_survival_chance, 0.01, "Both with laststrike: Dave v Bob failed")
            >>
        [/lua]

        {SUCCEED}
    [/event]
)}
