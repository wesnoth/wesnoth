# wmllint: no translatables

#####
# API(s) being tested: stringx.parse_range
##
# Actions:
# Directly call this API function, check that it converts strings to the expected numbers.
##
# Expected end state:
# No asserts failed.
#####
{GENERIC_UNIT_TEST "test_parse_range" (
    [event]
        name = start
        [lua]
            code = <<
                local lo,hi = stringx.parse_range("1.5-2.5", false)
                unit_test.assert_equal(lo, 1, "positive int: low number didn't match")
                unit_test.assert_equal(hi, 2, "positive int: high number didn't match")

                lo,hi = stringx.parse_range("1.5-2.5", true)
                unit_test.assert_approx_equal(lo, 1.5, 0.0001, "positive double: low number didn't match")
                unit_test.assert_approx_equal(hi, 2.5, 0.0001, "positive double: high number didn't match")

                lo,hi = stringx.parse_range("-3.5--2.5", true)
                unit_test.assert_approx_equal(lo, -3.5, 0.0001, "negative double: low number didn't match")
                unit_test.assert_approx_equal(hi, -2.5, 0.0001, "negative double: high number didn't match")

                lo,hi = stringx.parse_range("0-infinity", false)
                unit_test.assert_equal(lo, 0, "int to infinity: low number didn't match")
                unit_test.assert_greater(hi, 1000000, "int to infinity: high number didn't match")

                lo,hi = stringx.parse_range("0-infinity", true)
                unit_test.assert_equal(lo, 0, "double to infinity: low number didn't match")
                unit_test.assert_greater(hi, 1000000, "double to infinity: high number didn't match")

                lo,hi = stringx.parse_range("-infinity--1", false)
                unit_test.assert_less(lo, -1000000, "int from infinity: low number didn't match")
                unit_test.assert_equal(hi, -1, "int from infinity: high number didn't match")

                lo,hi = stringx.parse_range("-infinity--1", true)
                unit_test.assert_less(lo, -1000000, "double from infinity: low number didn't match")
                unit_test.assert_approx_equal(hi, -1, 0.0001, "double from infinity: high number didn't match")
            >>
        [/lua]

        {SUCCEED}
    [/event]
)}
