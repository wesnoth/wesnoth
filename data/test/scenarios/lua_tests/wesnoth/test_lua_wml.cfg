# wmllint: no translatables

#####
# API(s) being tested: wesnoth.wml_actions
##
# Actions:
# Register a new WML action tag [foo] with the optional attribute "bar".
##
# Expected end state:
# The custom WML tag sets the result variable if the "bar" attribute is present.
#####
{GENERIC_UNIT_TEST "test_wml_actions" (
    [event]
        name = start
        [lua]
            code = <<
                function wesnoth.wml_actions.foo(cfg)
                    if cfg.bar then
                        wml.variables["result"] = cfg.bar
                    end
                end
            >>
        [/lua]

        {VARIABLE result 0}
        {ASSERT {VARIABLE_CONDITIONAL result equals 0}}

        [foo]
            bar = 1
        [/foo]

        {ASSERT {VARIABLE_CONDITIONAL result equals "1"}}

        [foo]
            baz = 0
        [/foo]

        {ASSERT {VARIABLE_CONDITIONAL result equals "1"}}

        [foo]
            bar = 2
        [/foo]

        {RETURN {VARIABLE_CONDITIONAL result equals "2"}}
    [/event]
)}

#####
# API(s) being tested: wesnoth.wml_conditionals
##
# Actions:
# Register a new WML conditional tag [foo] with the optional attribute "bar".
##
# Expected end state:
# The custom WML tag evaluates as true or false depending on whether the "bar" attribute's value is "baz".
#####
{GENERIC_UNIT_TEST "test_wml_conditionals" (
    [event]
        name = start
        [lua]
            code = <<
                function wesnoth.wml_conditionals.foo(cfg)
                    return (cfg.bar == "baz")
                end
            >>
        [/lua]

        {ASSERT (
            [foo]
                bar = "baz"
            [/foo]
        )}
        {ASSERT (
            [not]
                [foo]
                    bar = "boo"
                [/foo]
            [/not]
        )}
        {ASSERT (
            [foo]
                bar = "baz"
            [/foo]
            [or]
                [foo]
                    bar = "boo"
                [/foo]
            [/or]
        )}
        {ASSERT (
            [not]
                [foo]
                    bar = "baz"
                [/foo]
                [and]
                    [foo]
                        bar = "boo"
                    [/foo]
                [/and]
            [/not]
        )}

        {SUCCEED}
    [/event]
)}
