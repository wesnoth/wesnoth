
# Note: All these loops must be set up to run either 0 or 1 times.
#define FOR_LOOP_TEST_STEP NAME START END STEP CONTENT
	{GENERIC_UNIT_TEST {NAME} (
		[event]
			name=start
			{VARIABLE n 0}
			[for]
				start,end,step={START},{END},{STEP}
				[do]
					{VARIABLE_OP n add 1}
					{ASSERT (
						{VARIABLE_CONDITIONAL i equals {START}}
						[or]
							{VARIABLE_CONDITIONAL i equals {END}}
						[/or]
					)}
				[/do]
			[/for]
			[fire_event]
				name=no_error
			[/fire_event]
		[/event]
		{CONTENT}
	)}
#enddef

{FOR_LOOP_TEST_STEP forloop_all_zero 0 0 0 (
	[event]
		name=no_error
		{FAIL}
	[/event]
	[event]
		name=start
		{SUCCEED}
	[/event]
)}

{FOR_LOOP_TEST_STEP forloop_step_zero 0 1 0 (
	[event]
		name=no_error
		{FAIL}
	[/event]
	[event]
		name=start
		{SUCCEED}
	[/event]
)}

{FOR_LOOP_TEST_STEP forloop_once_positive 0 0 1 (
	[event]
		name=no_error
		{RETURN ({VARIABLE_CONDITIONAL n equals 1})}
	[/event]
	[event]
		name=start
		{FAIL}
	[/event]
)}

{FOR_LOOP_TEST_STEP forloop_once_negative 0 0 -1 (
	[event]
		name=no_error
		{RETURN ({VARIABLE_CONDITIONAL n equals 1})}
	[/event]
	[event]
		name=start
		{FAIL}
	[/event]
)}

{FOR_LOOP_TEST_STEP forloop_twice_matched 0 1 1 (
	[event]
		name=no_error
		{RETURN ({VARIABLE_CONDITIONAL n equals 2})}
	[/event]
	[event]
		name=start
		{FAIL}
	[/event]
)}

{FOR_LOOP_TEST_STEP forloop_twice_unmatched 0 1 -1 (
	[event]
		name=no_error
		{RETURN ({VARIABLE_CONDITIONAL n equals 0})}
	[/event]
	[event]
		name=start
		{FAIL}
	[/event]
)}

{FOR_LOOP_TEST_STEP forloop_step_large_positive 0 10 10 (
	[event]
		name=no_error
		{SUCCEED}
	[/event]
	[event]
		name=start
		{FAIL}
	[/event]
)}

{FOR_LOOP_TEST_STEP forloop_step_large_negative 10 0 -10 (
	[event]
		name=no_error
		{SUCCEED}
	[/event]
	[event]
		name=start
		{FAIL}
	[/event]
)}

#undef FOR_LOOP_TEST_STEP

{GENERIC_UNIT_TEST forloop_empty_array (
	[event]
		name=start
		{VARIABLE n 0}
		[for]
			array=nothing
			[do]
				{VARIABLE_OP n add 1}
			[/do]
		[/for]
		[fire_event]
			name=no_error
		[/fire_event]
	[/event]
	[event]
		name=no_error
		{SUCCEED}
	[/event]
	[event]
		name=start
		{FAIL}
	[/event]
)}

#define FOR_LOOP_ARRAY_TEST NAME FINAL_VALUE REVERSE
	{GENERIC_UNIT_TEST {NAME} (
		[event]
			name=start
			[set_variables]
				name=array
				[value]
					value=10
				[/value]
				[value]
					value=7
				[/value]
				[value]
					value=2
				[/value]
			[/set_variables]
			{VARIABLE n 0}
			[for]
				array=array
				reverse={REVERSE}
				[do]
					{VARIABLE n $array[$i].value}
				[/do]
			[/for]
			[fire_event]
				name=no_error
			[/fire_event]
		[/event]
		[event]
			name=no_error
			{RETURN ({VARIABLE_CONDITIONAL n equals {FINAL_VALUE}})}
		[/event]
		[event]
			name=start
			{FAIL}
		[/event]
	)}
#enddef

{FOR_LOOP_ARRAY_TEST forloop_array 2 no}

{FOR_LOOP_ARRAY_TEST forloop_array_reverse 10 yes}

#undef FOR_LOOP_ARRAY_TEST

{GENERIC_UNIT_TEST forloop_array_mutate (
	[event]
		name=start
		[set_variables]
			name=array
			[value]
				value=10
			[/value]
			[value]
				value=7
			[/value]
			[value]
				value=2
			[/value]
			[value]
				value=37
			[/value]
		[/set_variables]
		{VARIABLE n 0}
		[for]
			array=array
			[do]
				{VARIABLE n $array[$i].value}
				{CLEAR_VARIABLE ("array[$($array.length - 1)]")}
			[/do]
		[/for]
		[fire_event]
			name=no_error
		[/fire_event]
	[/event]
	[event]
		name=no_error
		{RETURN ({VARIABLE_CONDITIONAL n equals 7})}
	[/event]
	[event]
		name=start
		{FAIL}
	[/event]
)}

#define FOR_LOOP_TEST_STEP NAME START END EXTRA CONTENT
	{GENERIC_UNIT_TEST NAME (
		[event]
			name=start
			{VARIABLE n 0}
			[for]
				start,end={START},{END}
				{EXTRA}
				[do]
					{VARIABLE_OP n add 1}
				[/do]
			[/for]
			[fire_event]
				name=no_error
			[/fire_event]
		[/event]
		{CONTENT}
	)}
#enddef

