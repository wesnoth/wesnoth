
# Note: All these loops must be set up to run either 0 or 1 times.
#define FOR_LOOP_TEST_STEP NAME START END STEP CONTENT
    {GENERIC_UNIT_TEST {NAME} (
        [event]
            name=start
            {VARIABLE n 0}
            [for]
                start,end,step={START},{END},{STEP}
                [do]
                    {VARIABLE_OP n add 1}
                    {ASSERT (
                        {VARIABLE_CONDITIONAL i equals {START}}
                        [or]
                            {VARIABLE_CONDITIONAL i equals {END}}
                        [/or]
                    )}
                [/do]
            [/for]
            [fire_event]
                name=no_error
            [/fire_event]
        [/event]
        {CONTENT}
    )}
#enddef

#define FOR_LOOP_ARRAY_TEST NAME FINAL_VALUE REVERSE
    {GENERIC_UNIT_TEST {NAME} (
        [event]
            name=start
            [set_variables]
                name=array
                [value]
                    value=10
                [/value]
                [value]
                    value=7
                [/value]
                [value]
                    value=2
                [/value]
            [/set_variables]
            {VARIABLE n 0}
            [for]
                array=array
                reverse={REVERSE}
                [do]
                    {VARIABLE n $array[$i].value}
                [/do]
            [/for]
            [fire_event]
                name=no_error
            [/fire_event]
        [/event]
        [event]
            name=no_error
            {RETURN ({VARIABLE_CONDITIONAL n equals {FINAL_VALUE}})}
        [/event]
        [event]
            name=start
            {FAIL}
        [/event]
    )}
#enddef

#####
# API(s) being tested: [for]
##
# Actions:
# A for loop using a start, end, and step of 0 is used.
##
# Expected end state:
# An error is logged and the rest of the event is skipped.
#####
{FOR_LOOP_TEST_STEP forloop_all_zero 0 0 0 (
    [event]
        name=no_error
        {FAIL}
    [/event]
    [event]
        name=start
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# A for loop using a step of 0 is used.
##
# Expected end state:
# An error is logged and the rest of the event is skipped.
#####
{FOR_LOOP_TEST_STEP forloop_step_zero 0 1 0 (
    [event]
        name=no_error
        {FAIL}
    [/event]
    [event]
        name=start
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# A for loop with a step of 1 and a start and end of 0 is used.
##
# Expected end state:
# The loop executes once.
#####
{FOR_LOOP_TEST_STEP forloop_once_positive 0 0 1 (
    [event]
        name=no_error
        {RETURN ({VARIABLE_CONDITIONAL n equals 1})}
    [/event]
    [event]
        name=start
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# A for loop with a step of -1 and a start and end of 0 is used.
##
# Expected end state:
# The loop executes once.
#####
{FOR_LOOP_TEST_STEP forloop_once_negative 0 0 -1 (
    [event]
        name=no_error
        {RETURN ({VARIABLE_CONDITIONAL n equals 1})}
    [/event]
    [event]
        name=start
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# A for loop with a start of 0, end of 1, and step of 1 is used.
##
# Expected end state:
# The loop executes twice.
#####
{FOR_LOOP_TEST_STEP forloop_twice_matched 0 1 1 (
    [event]
        name=no_error
        {RETURN ({VARIABLE_CONDITIONAL n equals 2})}
    [/event]
    [event]
        name=start
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# A for loop with a start of 0, end of 1, and step of -1 is used.
##
# Expected end state:
# The loop does not execute.
#####
{FOR_LOOP_TEST_STEP forloop_twice_unmatched 0 1 -1 (
    [event]
        name=no_error
        {RETURN ({VARIABLE_CONDITIONAL n equals 0})}
    [/event]
    [event]
        name=start
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# A for loop with a start of 0, end of 10, and step of 10 is used.
##
# Expected end state:
# The loop executes twice.
#####
{FOR_LOOP_TEST_STEP forloop_step_large_positive 0 10 10 (
    [event]
        name=no_error
        {RETURN ({VARIABLE_CONDITIONAL n equals 2})}
    [/event]
    [event]
        name=start
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# A for loop with a start of 10, end of 0, and step of -10 is used.
##
# Expected end state:
# The loop executes twice.
#####
{FOR_LOOP_TEST_STEP forloop_step_large_negative 10 0 -10 (
    [event]
        name=no_error
        {RETURN ({VARIABLE_CONDITIONAL n equals 2})}
    [/event]
    [event]
        name=start
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# A for loop is used on a non-existent array.
##
# Expected end state:
# It successfully does nothing.
#####
{GENERIC_UNIT_TEST forloop_empty_array (
    [event]
        name=start
        {VARIABLE n 0}
        [for]
            array=nothing
            [do]
                {VARIABLE_OP n add 1}
            [/do]
        [/for]
        [fire_event]
            name=no_error
        [/fire_event]
    [/event]
    [event]
        name=no_error
        {RETURN ({VARIABLE_CONDITIONAL n equals 0})}
    [/event]
    [event]
        name=start
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# Loop over an array forwards.
##
# Expected end state:
# The value retreived during the final loop is 2.
#####
{FOR_LOOP_ARRAY_TEST forloop_array 2 no}

#####
# API(s) being tested: [for]
##
# Actions:
# Loop over an array backwards.
##
# Expected end state:
# The value retrieved from the final loop is 10.
#####
{FOR_LOOP_ARRAY_TEST forloop_array_reverse 10 yes}

#####
# API(s) being tested: [for]
##
# Actions:
# Loop over a 4 element array.
# Each loop, remove an element from the end. First loop removes element 4. Second loop removes element 3.
##
# Expected end state:
# It correctly ends after two loops.
#####
{GENERIC_UNIT_TEST forloop_array_mutate (
    [event]
        name=start
        [set_variables]
            name=array
            [value]
                value=10
            [/value]
            [value]
                value=7
            [/value]
            [value]
                value=2
            [/value]
            [value]
                value=37
            [/value]
        [/set_variables]
        {VARIABLE n 0}
        [for]
            array=array
            [do]
                {VARIABLE n $array[$i].value}
                {CLEAR_VARIABLE ("array[$($array.length - 1)]")}
            [/do]
        [/for]
        [fire_event]
            name=no_error
        [/fire_event]
    [/event]
    [event]
        name=no_error
        {RETURN ({VARIABLE_CONDITIONAL n equals 7})}
    [/event]
    [event]
        name=start
        {FAIL}
    [/event]
)}
