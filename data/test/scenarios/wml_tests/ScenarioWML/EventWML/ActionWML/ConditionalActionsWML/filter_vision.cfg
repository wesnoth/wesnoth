#textdomain wesnoth-test
# This test scenario checks unit filter [filter_vision],
# and terrain_filter [filter_vision]. It tests what happens
# when there is a single, there are multiple, or there are
# no matches to the standard side filter contained.

#define TEST_FILTER_VISION_SCEN ID EVENTS
    [test]
        name = _ "Unit Test " + {ID}
        map_file=test/maps/move_skip_sighted.map
        turns = 3
        id = {ID}
        random_start_time = no
        is_unit_test = yes

        {DAWN}

        [side]
            side=1
            controller=human
            name = _ "Alice"
            type = Elvish Archer
            id=alice
            fog=yes
            team_name=West
            share_vision=shroud
        [/side]
        [side]
            side=2
            controller=human
            name = _ "Bob"
            type = Orcish Grunt
            id=bob
            fog=yes
            team_name=East
            share_vision=shroud
        [/side]
        [side]
            side=3
            controller=human
            name = _ "Dave"
            type = Dwarvish Fighter
            id=dave
            fog=yes
            team_name=East
            share_vision=shroud
        [/side]
        [side]
            side=4
            controller=human
            name = _ "Charlie"
            type = Chocobone
            id=charlie
            fog=yes
            team_name=West
            share_vision=shroud
        [/side]

        {EVENTS}
    [/test]
#enddef

#define ASSERT_CAN_SEE X Y
    {ASSERT (
        [have_unit]
            {X}
            [filter_vision]
                {Y}
            [/filter_vision]
        [/have_unit]
    )}
    {ASSERT (
        [have_unit]
            {X}
            [filter_location]
                [filter_vision]
                    {Y}
                [/filter_vision]
            [/filter_location]
        [/have_unit]
    )}
#enddef

#define ASSERT_CANNOT_SEE X Y
    {ASSERT (
        [not]
            [have_unit]
                {X}
                [filter_vision]
                    {Y}
                [/filter_vision]
            [/have_unit]
        [/not]
    )}
    {ASSERT (
        [not]
            [have_unit]
                {X}
                [filter_location]
                    [filter_vision]
                        {Y}
                    [/filter_vision]
                [/filter_location]
            [/have_unit]
        [/not]
    )}
#enddef

#####
# API(s) being tested: [filter_vision],[filter_location][filter_vision]
##
# Expected end state:
# That any side sees each other.
#####
{TEST_FILTER_VISION_SCEN "filter_vision_all_no_side" (
    [event]
        name=start

        {ASSERT_CAN_SEE () (side=1,2,3,4)}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [filter_vision],[filter_location][filter_vision]
##
# Expected end state:
# That side 2 sees any side.
#####
{TEST_FILTER_VISION_SCEN "filter_vision_all_side_2" (
    [event]
        name=start

        {ASSERT_CAN_SEE (side=2) (side=1,2,3,4)}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [filter_vision],[filter_location][filter_vision]
##
# Expected end state:
# That side 4 sees any side.
#####
{TEST_FILTER_VISION_SCEN "filter_vision_all_side_4" (
    [event]
        name=start

        {ASSERT_CAN_SEE (side=4) (side=1,2,3,4)}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [filter_vision],[filter_location][filter_vision]
##
# Expected end state:
# That side 1 sees side 4.
#####
{TEST_FILTER_VISION_SCEN "filter_vision_side_1_side_4" (
    [event]
        name=start

        {ASSERT_CAN_SEE (side=1) (side=4)}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [filter_vision],[filter_location][filter_vision]
##
# Expected end state:
# That side 2 sees side 4.
#####
{TEST_FILTER_VISION_SCEN "filter_vision_side_2_side_4" (
    [event]
        name=start

        {ASSERT_CAN_SEE (side=2) (side=4)}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [filter_vision],[filter_location][filter_vision]
##
# Expected end state:
# That side 3 sees side 4.
#####
{TEST_FILTER_VISION_SCEN "filter_vision_side_3_side_4" (
    [event]
        name=start

        {ASSERT_CAN_SEE (side=3) (side=4)}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [filter_vision],[filter_location][filter_vision]
##
# Expected end state:
# That side side 4 sees side 1.
#####
{TEST_FILTER_VISION_SCEN "filter_vision_side_4_side_1" (
    [event]
        name=start

        {ASSERT_CAN_SEE (side=4) (side=1)}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [filter_vision],[filter_location][filter_vision]
##
# Expected end state:
# That side 4 sees side 3.
#####
{TEST_FILTER_VISION_SCEN "filter_vision_side_4_side_3" (
    [event]
        name=start

        {ASSERT_CAN_SEE (side=4) (side=3)}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [filter_vision],[filter_location][filter_vision]
##
# Expected end state:
# That side 4 does not see side 2.
#####
{TEST_FILTER_VISION_SCEN "filter_vision_side_4_not_side_2" (
    [event]
        name=start

        {ASSERT_CANNOT_SEE (side=4) (side=2)}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [filter_vision],[filter_location][filter_vision]
##
# Expected end state:
# That no side sees a non-existent side.
#####
{TEST_FILTER_VISION_SCEN "filter_vision_not_side_5" (
    [event]
        name=start

        {ASSERT_CANNOT_SEE () (side=5)}
        {SUCCEED}
    [/event]
)}

#undef ASSERT_CAN_SEE
#undef ASSERT_CANNOT_SEE
