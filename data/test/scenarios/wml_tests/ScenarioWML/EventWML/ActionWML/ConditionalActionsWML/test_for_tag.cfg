# [for] executes once with all for_defaults

#####
# API(s) being tested: [for]
##
# Actions:
# Use the [for] tag with no attributes.
##
# Expected end state:
# The contents of the loop executes once.
#####
{GENERIC_UNIT_TEST "for_defaults" (
    [event]
        name=start
        {VARIABLE count 0}
        [for]
            [do]
                {VARIABLE_OP count add 1}
            [/do]
        [/for]
        {RETURN {VARIABLE_CONDITIONAL count equals 1}}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# Use the [for] tag with only start=2.
##
# Expected end state:
# The contents of the loop executes once.
#####
{GENERIC_UNIT_TEST "for_start2" (
    [event]
        name=start
        {VARIABLE count 0}
        [for]
            start=2
            [do]
                {VARIABLE_OP count add 1}
            [/do]
        [/for]
        {RETURN {VARIABLE_CONDITIONAL count equals 1}}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# Use the [for] tag with only end=2.
##
# Expected end state:
# The contents of the loop executes three times.
#####
{GENERIC_UNIT_TEST "for_end2" (
    [event]
        name=start
        {VARIABLE count 0}
        [for]
            end=2
            [do]
                {VARIABLE_OP count add 1}
            [/do]
        [/for]
        {RETURN {VARIABLE_CONDITIONAL count equals 3}}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# Use the [for] tag with only end=2 and step=2.
##
# Expected end state:
# The contents of the loop executes twice.
#####
{GENERIC_UNIT_TEST "for_end2_step2" (
    [event]
        name=start
        {VARIABLE count 0}
        [for]
            end=2
            step=2
            [do]
                {VARIABLE_OP count add 1}
            [/do]
        [/for]
        {RETURN {VARIABLE_CONDITIONAL count equals 2}}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# Use the [for] tag with only end=-2.
##
# Expected end state:
# The contents of the loop is not executed.
#####
{GENERIC_UNIT_TEST "for_end-2" (
    [event]
        name=start
        {VARIABLE count 0}
        [for]
            end=-2
            [do]
                {VARIABLE_OP count add 1}
            [/do]
        [/for]
        {RETURN {VARIABLE_CONDITIONAL count equals 0}}
    [/event]
)}

#####
# API(s) being tested: [for]
##
# Actions:
# Use the [for] tag with only end=-2 and step=-2.
##
# Expected end state:
# The contents of the loop executes twice.
#####
{GENERIC_UNIT_TEST "for_end-2_step-2" (
    [event]
        name=start
        {VARIABLE count 0}
        [for]
            end=-2
            step=-2
            [do]
                {VARIABLE_OP count add 1}
            [/do]
        [/for]
        {RETURN {VARIABLE_CONDITIONAL count equals 2}}
    [/event]
)}
