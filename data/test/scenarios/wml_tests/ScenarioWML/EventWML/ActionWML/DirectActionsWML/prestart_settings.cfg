#####
# API(s) being tested: [modify_side]gold=
##
# Actions:
# Give side 1 666 gold in a prestart event.
##
# Expected end state:
# Side 1 has 666 gold when checked in a side 1 turn 1 event.
#####
{GENERIC_UNIT_TEST "set_gold_in_prestart_one" (
    [event]
        name=prestart
        [modify_side]
            side=1
            gold=666
        [/modify_side]
    [/event]
    [event]
        name=side 1 turn 1
        [store_side]
            side=1
            variable=temp
        [/store_side]
        {RETURN ({VARIABLE_CONDITIONAL temp.gold equals 666})}
    [/event]
)}

#####
# API(s) being tested: [gold]amount=
##
# Actions:
# Give side 1 an additional 566 gold in a prestart event.
##
# Expected end state:
# Side 1 has 666 gold when checked in a side 1 turn 1 event.
#####
{GENERIC_UNIT_TEST "set_gold_in_prestart_two" (
    [event]
        name=prestart
        [gold]
            amount=566
        [/gold]
    [/event]
    [event]
        name=side 1 turn 1
        [store_side]
            side=1
            variable=temp
        [/store_side]
        {RETURN ({VARIABLE_CONDITIONAL temp.gold equals 666})}
    [/event]
)}

#####
# API(s) being tested: [modify_turns]value=
##
# Actions:
# Set the turn limit to 42 in a prestart event.
##
# Expected end state:
# The turn limit is 42 when checked in a side 1 turn 1 event.
#####
{GENERIC_UNIT_TEST "modify_turns_one" (
    [event]
        name=prestart
        [modify_turns]
            value=42
        [/modify_turns]
    [/event]
    [event]
        name=side 1 turn 1
        [store_turns]
            variable=temp
        [/store_turns]
        {RETURN ({VARIABLE_CONDITIONAL temp equals 42})}
    [/event]
)}

#####
# API(s) being tested: [modify_turns]current=
##
# Actions:
# Set the current turn to 42 in a prestart event.
##
# Expected end state:
# The next event to trigger is the side 1 turn 42 event.
#####
{GENERIC_UNIT_TEST "modify_turns_two" (
    [event]
        name=prestart
        [modify_turns]
            current=42
        [/modify_turns]
    [/event]
    [event]
        name=side 1 turn 1
        {FAIL}
    [/event]
    [event]
        name=side 1 turn 42
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [modify_turns]current=
##
# Actions:
# Set the current turn to 42 in a side 1 turn 1 event.
##
# Expected end state:
# The next event to trigger is the side 1 turn 1 refresh event.
#####
{GENERIC_UNIT_TEST "modify_turns_three" (
    [event]
        name=side 1 turn 1
        [modify_turns]
            current=42
        [/modify_turns]
    [/event]
    [event]
        name=side 1 turn 1 refresh
        {SUCCEED}
    [/event]
    [event]
        name=side 1 turn 42
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [modify_turns]current=
##
# Actions:
# Set the current turn to 42 in a side 1 turn 1 event.
# End the turn
##
# Expected end state:
# The next event to trigger is the side 2 turn 42 event.
#####
{GENERIC_UNIT_TEST "modify_turns_four" (
    [event]
        name=side 1 turn 1
        [modify_turns]
            current=42
        [/modify_turns]
    [/event]
    [event]
        name=side 1 turn 1 refresh
        [end_turn]
        [/end_turn]
    [/event]
    [event]
        name=side 1 turn 1 end
        {FAIL}
    [/event]
    [event]
        name=side 2 turn 42
        {SUCCEED}
    [/event]
    [event]
        name=side 1 turn 43
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [replace_schedule]
##
# Actions:
# Replace the current time schedule with only dusk in a prestart event.
##
# Expected end state:
# The current time is dusk when checked from a side 1 turn 1 event.
#####
{GENERIC_UNIT_TEST "replace_schedule_prestart" (
    [event]
        name=prestart
        [replace_schedule]
            {DUSK}
        [/replace_schedule]
    [/event]
    [event]
        name=side 1 turn 1
        [store_time_of_day]
            x,y=1,1
        [/store_time_of_day]
        {RETURN ({VARIABLE_CONDITIONAL time_of_day.id equals "dusk"})}
    [/event]
)}
