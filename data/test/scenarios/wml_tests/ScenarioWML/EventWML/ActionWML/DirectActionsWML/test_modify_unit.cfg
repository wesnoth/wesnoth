#textdomain wesnoth-test

# In 1.14 and before, the implementation of [modify_unit] always stored and
# unstored the unit. 1.15.0 introduced a "fast-path" which optimised setting
# some attributes, but which changed the behavior of the API in some edge
# cases; 1.16.0 disabled that fast-path.
#
# The store and unstore also ensured that the animation code noticed the
# change, and the fast path meant that changes for facing or low hitpoints
# failed to change the animation (issue 4978). However, that's a UI issue which
# doesn't affect the API, can't be automatically tested via the WML test
# framework, and which could be fixed during a stable branch.

# In this test, changing the side of a unit on a side's recall list needs to
# have the side-effect of moving it to the correct side's recall list.

#####
# API(s) being tested: [modify_unit]
##
# Actions:
# Create Charlie, belonging to side 1, on the recall list.
# Assign Charlie to side 2.
# Recall Charlie next to his side's leader.
##
# Expected end state:
# Charlie is on the map next to side 2's leader.
#####
{GENERIC_UNIT_TEST "modify_unit_which_recall_list" (
    [event]
        name = start

        # Create a unit on the recall list of side 1
        [unit]
            x=recall
            y=recall
            type=Orcish Grunt
            side=1
            id=Charlie
            name=_"Charlie"
            role=TestSubject
            canrecruit=no
        [/unit]

        [modify_unit]
            side=2
            [filter]
                id=Charlie
            [/filter]
        [/modify_unit]

        # Check that Charlie is still on the recall list, that modifying him
        # hasn't moved him back to the map.
        {ASSERT (
            [not]
                [have_unit]
                    id=Charlie
                    search_recall_list=no
                [/have_unit]
            [/not]
        )}

        [role]
            role=TestSubject
            reassign=no
            [auto_recall][/auto_recall]
        [/role]

        # Check that Charlie has been recalled next to side 2's leader
        #
        # Currently [role][auto-recall] uses the recall list (not the side attribute)
        # to determine where on the map to recall the unit; if this changes then this
        # test could pass with a false positive.
        {ASSERT (
            [have_unit]
                id=Charlie
                [filter_location]
                    location_id=2
                    radius=1
                [/filter_location]
            [/have_unit]
        )}

        {SUCCEED}
    [/event]
)}
