#####
# API(s) being tested: [move_unit]
##
# Actions:
# Move a unit to various coordinates and in various directions.
##
# Expected end state:
# The unit moves to the expected hex.
#####
{GENERIC_UNIT_TEST "test_move_unit" (
    [event]
        name=start
        {ASSERT (
            [have_unit]
                id=alice
                x=7
                y=3
            [/have_unit]
            [have_unit]
                id=bob
                x=13
                y=3
            [/have_unit]
        )}

        {MOVE_UNIT id=alice 10 5}

        {ASSERT (
            [have_unit]
                id=alice
                x=10
                y=5
            [/have_unit]
            [have_unit]
                id=bob
                x=13
                y=3
            [/have_unit]
        )}

        {MOVE_UNIT id=bob 10 7}

        {ASSERT (
            [have_unit]
                id=alice
                x=10
                y=5
            [/have_unit]
            [have_unit]
                id=bob
                x=10
                y=7
            [/have_unit]
        )}

        {MOVE_UNIT id=alice 10 7}

        {ASSERT (
            [have_unit]
                id=alice
                x=9
                y=7
            [/have_unit]
            [have_unit]
                id=bob
                x=10
                y=7
            [/have_unit]
        )}

        {MOVE_UNIT id=bob 10 4}

        {ASSERT (
            [have_unit]
                id=alice
                x=9
                y=7
            [/have_unit]
            [have_unit]
                id=bob
                x=10
                y=4
            [/have_unit]
        )}

        {MOVE_UNIT id=bob 10 4}

        {ASSERT (
            [have_unit]
                id=alice
                x=9
                y=7
            [/have_unit]
            [have_unit]
                id=bob
                x=10
                y=4
            [/have_unit]
        )}

        {UNIT 1 "Spearman" 13 5 (id=steve)}

        {MOVE_UNIT id=alice 13 5}

        {ASSERT (
            [have_unit]
                id=alice
                x=12
                y=4
            [/have_unit]
            [have_unit]
                id=bob
                x=10
                y=4
            [/have_unit]
            [have_unit]
                id=steve
                x=13
                y=5
            [/have_unit]
        )}

        # check that comma-separated lists move the unit to the expected final hex
        {MOVE_UNIT id=alice (12,12) (5,6)}

        {ASSERT (
            [have_unit]
                id=alice
                x=12
                y=6
            [/have_unit]
            [have_unit]
                id=bob
                x=10
                y=4
            [/have_unit]
            [have_unit]
                id=steve
                x=13
                y=5
            [/have_unit]
        )}

        # test dir
        [move_unit]
            id=alice
            dir=s,se
        [/move_unit]

        {ASSERT (
            [have_unit]
                id=alice
                x=13
                y=8
            [/have_unit]
            [have_unit]
                id=bob
                x=10
                y=4
            [/have_unit]
            [have_unit]
                id=steve
                x=13
                y=5
            [/have_unit]
        )}

        # test dir with duplication
        # Note: this is intended to be "test dir with count", but that needs the count syntax
        # to be added to the schema validation.
        [move_unit]
            id=bob
            dir=sw:3,s:2
        [/move_unit]

        {ASSERT (
            [have_unit]
                id=alice
                x=13
                y=8
            [/have_unit]
            [have_unit]
                id=bob
                x=7
                y=8
            [/have_unit]
            [have_unit]
                id=steve
                x=13
                y=5
            [/have_unit]
        )}

        # test dir with duplication
        [move_unit]
            id=steve
            dir=n,n,n
        [/move_unit]

        {ASSERT (
            [have_unit]
                id=alice
                x=13
                y=8
            [/have_unit]
            [have_unit]
                id=bob
                x=7
                y=8
            [/have_unit]
            [have_unit]
                id=steve
                x=13
                y=2
            [/have_unit]
        )}

        # test to_location
        [move_unit]
            id=alice
            to_location=1
        [/move_unit]

        {ASSERT (
            [have_unit]
                id=alice
                x=7
                y=3
            [/have_unit]
            [have_unit]
                id=bob
                x=7
                y=8
            [/have_unit]
            [have_unit]
                id=steve
                x=13
                y=2
            [/have_unit]
        )}

        # test to_location with list
        [move_unit]
            id=bob
            to_location=left,right,2
        [/move_unit]

        {ASSERT (
            [have_unit]
                id=alice
                x=7
                y=3
            [/have_unit]
            [have_unit]
                id=bob
                x=13
                y=3
            [/have_unit]
            [have_unit]
                id=steve
                x=13
                y=2
            [/have_unit]
        )}

        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [move_unit]
##
# Actions:
# Move alice in a circle, returning to his starting hex in a single move.
##
# Expected end state:
# alice moves in a circle.
#####
{GENERIC_UNIT_TEST "test_move_unit_in_circle" (
    [event]
        name=start
        {ASSERT (
            [have_unit]
                id=alice
                x=7
                y=3
            [/have_unit]
            [have_unit]
                id=bob
                x=13
                y=3
            [/have_unit]
        )}

        # Move Alice in a circle, ending on the hex that she started on.
        [move_unit]
            id=alice
            dir=sw,s,se,ne,n,nw
        [/move_unit]

        # The assert can't check that Alice moved, but it does check that the implementation of
        # [move_unit] didn't choose an unoccupied hex next to the (initially-occupied) starting hex.
        {ASSERT (
            [have_unit]
                id=alice
                x=7
                y=3
            [/have_unit]
            [have_unit]
                id=bob
                x=13
                y=3
            [/have_unit]
        )}

        {SUCCEED}
    [/event]
)}
