#textdomain wesnoth-test

#####
# API(s) being tested: [set_menu_item][filter_location]
##
# Actions:
# Define a menu_item that will spawn a unit at the provided coordinates if no unit already exists there.
# Fire the menu_item at two coordinates, two times each.
##
# Expected end state:
# Side 2 will have 2 units spawned for it not 4 units, since the location filter fails to be matched twice.
# Firing a menu item returns true, regardless of whether its filter matched.
#####
{GENERIC_UNIT_TEST "test_wml_menu_items_2" (
    [event]
        name = start

        [set_menu_item]
            id=test2
            description=_"spawn a unit"
            [filter_location]
                [not]
                    [filter]
                        x=$x1
                        y=$y1
                    [/filter]
                [/not]
            [/filter_location]
            [command]
                {UNIT 2 "Orcish Grunt" $x1 $y1 ()}
            [/command]
        [/set_menu_item]

        # just the leader
        {ASSERT (
            [have_unit]
                side=2
                count=1
            [/have_unit]
        )}

        [lua]
            code = <<
                unit_test.assert(unit_test.fire_wml_menu_item("test2", 3, 3), "menu test2 3,3 failed")
                unit_test.assert(unit_test.fire_wml_menu_item("test2", 3, 3), "menu test2 3,3 failed, no unit should spawn")
                unit_test.assert(unit_test.fire_wml_menu_item("test2", 4, 4), "menu test2 4,4 failed")
                unit_test.assert(unit_test.fire_wml_menu_item("test2", 4, 4), "menu test2 4,4 failed, no unit should spawn")
            >>
        [/lua]

        # leader plus two spawned units
        {ASSERT (
            [have_unit]
                side=2
                count=3
            [/have_unit]
        )}

        {SUCCEED}
    [/event]
)}

#
# An amended form of the above test, which checks a menu item which creates a unit, being fired twice.
#

#####
# API(s) being tested: [set_menu_item][show_if]
##
# Actions:
# Define a menu_item that is not shown if a unit exists at the provided coordinates and which spawns a unit at those coordinates when fired.
# Fire the menu_item at 2 coordinates, twice each.
##
# Expected end state:
# Side 1 will have 2 units spawned for it not 4 units, since the [show_if] fails to be matched twice.
#####
{GENERIC_UNIT_TEST "test_wml_menu_items_3" (
    [event]
        name = start

        [set_menu_item]
            id=test3
            description=_"Summon Troll"
            [show_if]
                [not]
                    [have_unit]
                        x,y=$x1,$y1
                    [/have_unit]
                [/not]
            [/show_if]
            [command]
                {NAMED_LOYAL_UNIT $side_number (Troll) $x1 $y1 (MagicTroll) (_"Magic Troll")}
            [/command]
        [/set_menu_item]

        [lua]
            code = <<
                unit_test.assert(unit_test.fire_wml_menu_item("test3", 3, 3), "failed spawning magic troll at 3,3")
                unit_test.assert(unit_test.fire_wml_menu_item("test3", 3, 3), "failed spawning magic troll at 3,3 - second")
            >>
        [/lua]
        {ASSERT (
            [have_unit]
                x,y = 3,3
            [/have_unit]
            [have_unit]
                side = 1
                count = 2
            [/have_unit]
        )}

        [lua]
            code = <<
                unit_test.assert(unit_test.fire_wml_menu_item("test3", 4, 4), "failed spawning magic troll at 4,4")
                unit_test.assert(unit_test.fire_wml_menu_item("test3", 4, 4), "failed spawning magic troll at 4,4 - second")
            >>
        [/lua]
        {ASSERT (
            [have_unit]
                x,y = 4,4
            [/have_unit]
            [have_unit]
                side = 1
                count = 3
            [/have_unit]
        )}

        {SUCCEED}
    [/event]
)}
