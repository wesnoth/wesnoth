# wmllint: no translatables

#####
# API(s) being tested: [event][filter_condition][variable]
##
# Actions:
# Define three moveto events that only trigger if the [filter_condition] matches.
# The first moveto event's condition is enabled by the start event.
# The second moveto event's condition is enabled by the first moveto event.
# The third moveto event's condition is enabled by the second moveto event.
##
# Expected end state:
# All three moveto events each trigger once when the first move happens.
# A second move (without resetting the condition) triggers the third moveto again.
#####
{GENERIC_UNIT_TEST event_test_filter_condition (
    [event]
        name=start
        {VARIABLE var 1}
        {VARIABLE triggers_first 0}
        {VARIABLE triggers_second 0}
        {VARIABLE triggers_third 0}

        # A single move triggers all three events, because the filter for the second
        # event is tested after the first event has already run.
        [do_command]
            [move]
                x=7,8
                y=3,3
            [/move]
        [/do_command]
        {ASSERT ({VARIABLE_CONDITIONAL triggers_first equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers_second equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers_third equals 1})}

        # At this point var equals 3, so only the third event triggers.
        [do_command]
            [move]
                x=8,9
                y=3,4
            [/move]
        [/do_command]
        {ASSERT ({VARIABLE_CONDITIONAL triggers_first equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers_second equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers_third equals 2})}

        {SUCCEED}
    [/event]
    [event]
        name=moveto
        first_time_only=no
        [filter_condition]
            {VARIABLE_CONDITIONAL var equals 1}
        [/filter_condition]
        {ASSERT ({VARIABLE_CONDITIONAL var equals 1})}
        {VARIABLE var 2}
        {VARIABLE_OP triggers_first add 1}
    [/event]
    [event]
        name=moveto
        first_time_only=no
        [filter_condition]
            {VARIABLE_CONDITIONAL var equals 2}
        [/filter_condition]
        {ASSERT ({VARIABLE_CONDITIONAL var equals 2})}
        {VARIABLE var 3}
        {VARIABLE_OP triggers_second add 1}
    [/event]
    [event]
        name=moveto
        first_time_only=no
        [filter_condition]
            {VARIABLE_CONDITIONAL var equals 3}
        [/filter_condition]
        {ASSERT ({VARIABLE_CONDITIONAL var equals 3})}
        {VARIABLE_OP triggers_third add 1}
    [/event]
)}

#####
# API(s) being tested: [event][filter_side]
##
# Actions:
# Define two moveto events that will only trigger if the [filter_side] matches.
# Move side 1's unit to trigger the first event, then end turn.
# Move side s's unit to trigger the second event, then end turn.
##
# Expected end state:
# Both events trigger once.
#####
{GENERIC_UNIT_TEST event_test_filter_side (
    [event]
        name=start
        {VARIABLE triggers 0}
        [do_command]
            [move]
                x=7,11
                y=3,4
            [/move]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
    [event]
        name=side 2 turn
        [do_command]
            [move]
                x=13,10
                y=3,2
            [/move]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
    [event]
        name=moveto
        [filter_side]
            side=1
        [/filter_side]
        {ASSERT ({VARIABLE_CONDITIONAL unit.race equals elf})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=moveto
        [filter_side]
            side=2
        [/filter_side]
        {ASSERT ({VARIABLE_CONDITIONAL unit.race equals orc})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 2})}
    [/event]
)}

#####
# API(s) being tested: [event][filter],[event][filter_second]
##
# Actions:
# Define three recruit events, two filtering on the recruit unit type and another on the race with [filter_second]
##
# Expected end state:
# The two events filtering on type trigger once each.
# The event using [filter_second] on race triggers twice.
#####
{GENERIC_UNIT_TEST event_test_filter_unit (
    [event]
        name=start
        {VARIABLE triggers 0}
        [do_command]
            [recruit]
                type=Peasant
                x,y=3,6
                [from]
                    x,y=7,3
                [/from]
            [/recruit]
        [/do_command]
        [do_command]
            [recruit]
                type=Woodsman
                x,y=15,8
                [from]
                    x,y=7,3
                [/from]
            [/recruit]
        [/do_command]
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 4})}
    [/event]
    [event]
        name=recruit
        first_time_only=no
        [filter_second]
            race=elf
        [/filter_second]
        {ASSERT ({VARIABLE_CONDITIONAL unit.level equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=recruit
        [filter]
            type=Peasant
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL second_unit.race equals elf})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=recruit
        [filter]
            type=Woodsman
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL second_unit.race equals elf})}
        {VARIABLE_OP triggers add 1}
    [/event]
) (SIDE1_RECRUIT=Peasant,Woodsman)}

#####
# API(s) being tested: [event][filter_attack],[event][filter_second_attack]
##
# Actions:
# Define events filtering on the damage dealt by the attacker or defender.
# Have side 1's unit attack side 2's unit.
# Have side 2's unit attack side 1's unit.
##
# Expected end state:
# All four events trigger once (side 1's unit's damage when attacking and defending, side 2's unit's damage when attacking and defending).
#####
{GENERIC_UNIT_TEST event_test_filter_attack (
    [event]
        name=turn 1
        # Make sure the attacks hit
        {FORCE_CHANCE_TO_HIT (id=bob) (id=alice) 100 ()}
        {FORCE_CHANCE_TO_HIT (id=alice) (id=bob) 100 ()}
        [modify_unit]
            [filter]
            [/filter]
            # Make sure they don't die during the attacks
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        [do_command]
            [move]
                x=7,13
                y=3,4
            [/move]
            [attack]
                [source]
                    x,y=13,4
                [/source]
                [destination]
                    x,y=13,3
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
    [event]
        name=side 2 turn
        [do_command]
            [attack]
                [source]
                    x,y=13,3
                [/source]
                [destination]
                    x,y=13,4
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            damage=5
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers_on_alice_attack add 1}
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            damage=9
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 2})}
        {VARIABLE_OP triggers_on_bob_attack add 1}
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter_second_attack]
            damage=5
        [/filter_second_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 2})}
        {VARIABLE_OP triggers_on_alice_defense add 1}
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter_second_attack]
            damage=9
        [/filter_second_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers_on_bob_defense add 1}
    [/event]
    [event]
        name=turn 2
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_alice_attack equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_alice_defense equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_bob_attack equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_bob_defense equals 1})}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [event][filter_attack],[event][filter_second_attack]
##
# Actions:
# Define events filtering based on weapon specials.
# Give Bob a poison special iff the opponent has a specific drain special.
# Give Alice a drain special iff the opponent has a specific poison special.
# Have side 1's unit attack side 2's unit.
# Have side 2's unit attack side 1's unit.
##
# Expected end state:
# Both events that should trigger for Bob do trigger.
#####
{GENERIC_UNIT_TEST event_test_filter_attack_opponent_weapon_condition (
    [event]
        name=turn 1
        # Make sure the attacks hit
        {FORCE_CHANCE_TO_HIT (id=bob) (id=alice) 100 ()}
        {FORCE_CHANCE_TO_HIT (id=alice) (id=bob) 100 ()}
        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [poison]
                        id=ability_poison_blade
                        [filter_opponent]
                            [filter_weapon]
                                special_id_active=ability_drain_blade
                            [/filter_weapon]
                        [/filter_opponent]
                    [/poison]
                [/abilities]
            [/effect]
            [filter]
                id=bob
            [/filter]
        [/object]
        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [drains]
                        id=ability_drain_blade
                        [filter_student]
                            [filter_weapon]
                                type=blade
                            [/filter_weapon]
                        [/filter_student]
                    [/drains]
                [/abilities]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]
        [modify_unit]
            [filter]
            [/filter]
            # Make sure they don't die during the attacks
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        {VARIABLE triggers 0}
        [do_command]
            [move]
                x=7,13
                y=3,4
            [/move]
            [attack]
                [source]
                    x,y=13,4
                [/source]
                [destination]
                    x,y=13,3
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
    [event]
        name=side 2 turn
        [do_command]
            [attack]
                [source]
                    x,y=13,3
                [/source]
                [destination]
                    x,y=13,4
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            special_id_active=ability_poison_blade
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 2})}
        {VARIABLE_OP triggers_on_attack add 1}
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter_second_attack]
            special_id_active=ability_poison_blade
        [/filter_second_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers_on_defense add 1}
    [/event]
    [event]
        name=turn 2
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_attack equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_defense equals 1})}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [event][filter_attack],[event][filter_second_attack]
##
# Actions:
# Define events filtering based on weapon specials.
# Give Bob a poison special that only applies to bladed weapons.
# Have side 1's unit attack side 2's unit.
# Have side 2's unit attack side 1's unit.
##
# Expected end state:
# Both events that should trigger for Bob do trigger.
#####
{GENERIC_UNIT_TEST event_test_filter_attack_specials (
    [event]
        name=turn 1
        # Make sure the attacks hit
        {FORCE_CHANCE_TO_HIT (id=bob) (id=alice) 100 ()}
        {FORCE_CHANCE_TO_HIT (id=alice) (id=bob) 100 ()}
        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [poison]
                        id=ability_poison_blade
                        [filter_student]
                            [filter_weapon]
                                type=blade
                            [/filter_weapon]
                        [/filter_student]
                    [/poison]
                [/abilities]
            [/effect]
            [filter]
                id=bob
            [/filter]
        [/object]
        [modify_unit]
            [filter]
            [/filter]
            # Make sure they don't die during the attacks
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        [do_command]
            [move]
                x=7,13
                y=3,4
            [/move]
            [attack]
                [source]
                    x,y=13,4
                [/source]
                [destination]
                    x,y=13,3
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
    [event]
        name=side 2 turn
        [do_command]
            [attack]
                [source]
                    x,y=13,3
                [/source]
                [destination]
                    x,y=13,4
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            special_id_active=ability_poison_blade
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 2})}
        {VARIABLE_OP triggers_on_attack add 1}
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter_second_attack]
            special_id_active=ability_poison_blade
        [/filter_second_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers_on_defense add 1}
    [/event]
    [event]
        name=turn 2
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_attack equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_defense equals 1})}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [event]filter_formula=
##
# Actions:
# Define an event that triggers when the turn number equals the side number.
##
# Expected end state:
# At the start of turn 3, that event has triggered twice.
#####
{GENERIC_UNIT_TEST event_test_filter_wfl (
    [event]
        name=start
        {VARIABLE triggers 0}
    [/event]
    [event]
        name=side turn
        first_time_only=no
        filter_formula="turn_number = side_number"
        {VARIABLE_OP triggers add 1}
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals $turn_number})}
    [/event]
    [event]
        name=turn 3
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 2})}
    [/event]
    [event]
        name=side turn
        first_time_only=no
        [end_turn][/end_turn]
    [/event]
)}

#####
# API(s) being tested: [event]filter_formula=
##
# Actions:
# Define an event that triggers when a unit enters a hex where the x coordinate is the same as the y coordinate.
# Move a unit to a series of hexes.
##
# Expected end state:
# The event triggers three times.
#####
{GENERIC_UNIT_TEST event_test_filter_wfl2 (
    [event]
        name=start
        {VARIABLE triggers 0}
        [do_command]
            [move]
                x=7,7,6,5,4,3,3,3
                y=3,4,4,5,4,4,3,2
            [/move]
        [/do_command]
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 3})}
    [/event]
    [event]
        name=enter hex
        first_time_only=no
        filter_formula="loc.x = loc.y"
        {VARIABLE_OP triggers add 1}
    [/event]
)}

#####
# API(s) being tested: [event][filter_condition][lua]
##
# Actions:
# Define an event using lua in [filter_condition] to only fire when the current turn equals the current side.
##
# Expected end state:
# The event fires twice.
#####
{GENERIC_UNIT_TEST event_test_filter_lua_serializable (
    [event]
        name=start
        {VARIABLE triggers 0}
    [/event]
    [event]
        name=side turn
        first_time_only=no
        [filter_condition]
            [lua]
                code=<<return wesnoth.current.turn == wesnoth.current.side>>
            [/lua]
        [/filter_condition]
        {VARIABLE_OP triggers add 1}
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals $turn_number})}
    [/event]
    [event]
        name=turn 3
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 2})}
    [/event]
    [event]
        name=side turn
        first_time_only=no
        [end_turn][/end_turn]
    [/event]
)}

#####
# API(s) being tested: wesnoth.game_events.add{filter,wesnoth.game_events.add{action
##
# Actions:
# Define an event via lua which uses both the filter and action attributes.
# This event is triggered when the current turn equals the current side.
##
# Expected end state:
# The event triggers twice.
#####
{GENERIC_UNIT_TEST event_test_filter_lua_dynamic (
    [event]
        name=preload
        [lua]
            code=<<
                wml.variables.triggers = 0
                wesnoth.game_events.add{
                    name = 'side turn',
                    first_time_only = false,
                    filter = function()
                        return wesnoth.current.turn == wesnoth.current.side
                    end,
                    action = function()
                        wml.variables.triggers = wml.variables.triggers + 1
                        unit_test.assert_equal(wesnoth.current.turn, wesnoth.current.side, 'filter correctly passed')
                    end
                }
            >>
        [/lua]
    [/event]
    [event]
        name=side 2 turn 3
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 2})}
    [/event]
    [event]
        name=side turn
        first_time_only=no
        [end_turn][/end_turn]
    [/event]
)}

#####
# API(s) being tested: N/A
##
# Actions:
# Use lua to add an event that will break replays and save games using the 'filter' attribute.
##
# Expected end state:
# A warning is logged stating that this will break save games.
#####
{GENERIC_UNIT_TEST event_test_filter_lua_dynamic_break_save (
    [event]
        name=start
        [lua]
            code=<<
                wesnoth.game_events.add{
                    name = 'new turn',
                    filter = function() end
                }
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}
