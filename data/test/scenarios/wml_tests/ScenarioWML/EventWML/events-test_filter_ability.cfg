# wmllint: no translatables

##
# Common code for the tests in this file.
##
# Actions:
# Give both Alice and Bob 100% chance to hit.
# Give Alice a drains ability which is only active during liminal times of day.
# During Alice's turn, move Alice next to Bob, and have Alice attack Bob.
# During Bob's turn, have Bob attack Alice.
##
#define FILTER_ABILITY_TEST
#arg DRAINS_VALUE
25#endarg
    [event]
        name=start
        # Make sure the attacks hit
        {FORCE_CHANCE_TO_HIT (id=bob) (id=alice) 100 ()}
        {FORCE_CHANCE_TO_HIT (id=alice) (id=bob) 100 ()}
        [modify_unit]
            [filter]
            [/filter]
            # Make sure they don't die during the attacks
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [drains]
                        value={DRAINS_VALUE}
                        [filter]
                            [filter_location]
                                time_of_day=neutral
                            [/filter_location]
                        [/filter]
                    [/drains]
                [/abilities]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]
        {VARIABLE triggers 0}
    [/event]

    [event]
        name=side 1 turn 1
        [do_command]
            [move]
                x=7,13
                y=3,4
            [/move]
            [attack]
                [source]
                    x,y=13,4
                [/source]
                [destination]
                    x,y=13,3
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]

    [event]
        name=side 2 turn
        [do_command]
            [attack]
                [source]
                    x,y=13,3
                [/source]
                [destination]
                    x,y=13,4
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
#enddef

#####
# API(s) being tested: [event][filter][experimental_filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter matching Alice's drains ability.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{GENERIC_UNIT_TEST event_test_filter_ability (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [experimental_filter_ability]
                tag_name=drains
                value=25
            [/experimental_filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

{GENERIC_UNIT_TEST event_test_filter_ability_interval_number (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [experimental_filter_ability]
                tag_name=drains
                value=10-30
            [/experimental_filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

# API(s) being tested: [event][filter][experimental_filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter matching Alice's drains ability.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{GENERIC_UNIT_TEST event_test_filter_ability_neg_value (
    {FILTER_ABILITY_TEST DRAINS_VALUE=-25}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [experimental_filter_ability]
                tag_name=drains
                value=-25--10
            [/experimental_filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][filter][experimental_filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter for a drains ability, but a different value to Alice's ability.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is never triggered.
#####
{GENERIC_UNIT_TEST event_test_filter_ability_no_match (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [experimental_filter_ability]
                tag_name=drains
                value=45
            [/experimental_filter_ability]
        [/filter]
        {FAIL}
    [/event]
    [event]
        name=turn 2
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [event][filter][experimental_filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter for a drains ability, but a different value to Alice's ability.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is never triggered.
#####
{GENERIC_UNIT_TEST event_test_filter_ability_no_match_neg_prefix (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [experimental_filter_ability]
                tag_name=drains
                value=-45-10
            [/experimental_filter_ability]
        [/filter]
        {FAIL}
    [/event]
    [event]
        name=turn 2
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [event][filter][experimental_filter_ability_active]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter matching Alice's drains ability, but only when it's active.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{GENERIC_UNIT_TEST event_test_filter_ability_active (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [experimental_filter_ability_active]
                tag_name=drains
                value=25
            [/experimental_filter_ability_active]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][filter][experimental_filter_ability_active]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter matching Alice's drains ability, but only when it's active.
# Give Alice the Illuminates ability, which makes it the wrong time of day for her drains ability.
# The events in FILTER_ABILITY_TEST make Alice attacks Bob and then Bob attack Alice.
##
# Expected end state:
# The filtered event is never triggered.
#####
{GENERIC_UNIT_TEST event_test_filter_ability_active_inactive (
    {FILTER_ABILITY_TEST}
    [event]
        name=start
        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_ILLUMINATES}
                [/abilities]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]
    [/event]

    [event]
        name=attack
        first_time_only=no
        [filter]
            [experimental_filter_ability_active]
                tag_name=drains
                value=25
            [/experimental_filter_ability_active]
        [/filter]
        {FAIL}
    [/event]

    [event]
        name=turn 2
        {SUCCEED}
    [/event]
)}

#undef FILTER_ABILITY_TEST

##
# Common code for the tests in this file.
##
# Actions:
# Give both Alice and Bob 100% chance to hit.
# Give Alice a drains ability to value 50(defined in hardcoding by default).
# During Alice's turn, move Alice next to Bob, and have Alice attack Bob.
# During Bob's turn, have Bob attack Alice.
##
#define FILTER_ABILITY_TEST_WITHOUT_VALUE
    [event]
        name=start
        # Make sure the attacks hit
        {FORCE_CHANCE_TO_HIT (id=bob) (id=alice) 100 ()}
        {FORCE_CHANCE_TO_HIT (id=alice) (id=bob) 100 ()}
        [modify_unit]
            [filter]
            [/filter]
            # Make sure they don't die during the attacks
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [drains]
                    [/drains]
                [/abilities]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]
        {VARIABLE triggers 0}
    [/event]

    [event]
        name=side 1 turn 1
        [do_command]
            [move]
                x=7,13
                y=3,4
            [/move]
            [attack]
                [source]
                    x,y=13,4
                [/source]
                [destination]
                    x,y=13,3
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]

    [event]
        name=side 2 turn
        [do_command]
            [attack]
                [source]
                    x,y=13,3
                [/source]
                [destination]
                    x,y=13,4
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
#enddef

#####
# API(s) being tested: [event][filter][experimental_filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST_WITHOUT_VALUE.
# Add an event with a filter matching Alice's drains ability who had no value specified.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST_WITHOUT_VALUE.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{GENERIC_UNIT_TEST event_test_filter_ability_with_value_by_default (
    {FILTER_ABILITY_TEST_WITHOUT_VALUE}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [experimental_filter_ability]
                tag_name=drains
                value=50
            [/experimental_filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][filter][experimental_filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST_WITHOUT_VALUE.
# Add an event with a filter matching Alice's drains ability who had no value specified.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST_WITHOUT_VALUE.
##
# Expected end state:
# The filtered event is never triggered.
#####
{GENERIC_UNIT_TEST event_test_filter_ability_no_match_by_default (
    {FILTER_ABILITY_TEST_WITHOUT_VALUE}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [experimental_filter_ability]
                tag_name=drains
                value=35
            [/experimental_filter_ability]
        [/filter]
        {FAIL}
    [/event]
    [event]
        name=turn 2
        {SUCCEED}
    [/event]
)}

#undef FILTER_ABILITY_TEST_WITHOUT_VALUE
