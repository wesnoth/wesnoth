# wmllint: no translatables

##
# Common code for the tests in this file.
##
# Actions:
# Give both Alice and Bob 100% chance to hit.
# Give Alice a drains ability which is only active during liminal times of day.
# During Alice's turn, move Alice next to Bob, and have Alice attack Bob.
# During Bob's turn, have Bob attack Alice.
##
#define FILTER_ABILITY_TEST
#arg DRAINS_VALUE
25#endarg
    [event]
        name=start
        # Make sure the attacks hit
        {FORCE_CHANCE_TO_HIT (id=bob) (id=alice) 100 ()}
        {FORCE_CHANCE_TO_HIT (id=alice) (id=bob) 100 ()}
        [modify_unit]
            [filter]
            [/filter]
            # Make sure they don't die during the attacks
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [drains]
                        value={DRAINS_VALUE}
                        [filter]
                            [filter_location]
                                time_of_day=neutral
                            [/filter_location]
                        [/filter]
                    [/drains]
                [/abilities]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]
        {VARIABLE triggers 0}
    [/event]

    [event]
        name=side 1 turn 1
        [test_do_attack_by_id]
            attacker=alice
            defender=bob
            weapon=0
        [/test_do_attack_by_id]
        [end_turn][/end_turn]
    [/event]

    [event]
        name=side 2 turn
        [test_do_attack_by_id]
            attacker=bob
            defender=alice
            weapon=0
        [/test_do_attack_by_id]
        [end_turn][/end_turn]
    [/event]
#enddef

#####
# API(s) being tested: [event][filter][filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter matching Alice's drains ability.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                tag_name=drains
                value=25
            [/filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_interval_number (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                tag_name=drains
                value=10-30
            [/filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

# API(s) being tested: [event][filter][filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter matching Alice's drains ability.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_neg_value (
    {FILTER_ABILITY_TEST DRAINS_VALUE=-25}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                tag_name=drains
                value=-25--10
            [/filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][filter][filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter for a drains ability, but a different value to Alice's ability.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is never triggered.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_no_match (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                tag_name=drains
                value=45
            [/filter_ability]
        [/filter]
        {FAIL}
    [/event]
    [event]
        name=turn 2
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [event][filter][filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter for a drains ability, but a different value to Alice's ability.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is never triggered.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_no_match_neg_prefix (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                tag_name=drains
                value=-45-10
            [/filter_ability]
        [/filter]
        {FAIL}
    [/event]
    [event]
        name=turn 2
        {SUCCEED}
    [/event]
)}

##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter_wml matching Alice's drains ability.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_wml (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                tag_name=drains
                [filter_wml]
                    [filter]
                        [filter_location]
                            time_of_day=neutral
                        [/filter_location]
                    [/filter]
                [/filter_wml]
            [/filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter_wml not matching Alice's drains ability.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is never triggered.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_wml_no_match (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                tag_name=drains
                [filter_wml]
                    [filter]
                        [filter_location]
                            time_of_day=lawful
                        [/filter_location]
                    [/filter]
                [/filter_wml]
            [/filter_ability]
        [/filter]
        {FAIL}
    [/event]
    [event]
        name=turn 2
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [event][filter][filter_ability]active=yes

##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter matching Alice's drains ability, but only when it's active.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_active (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                active=yes
                tag_name=drains
                value=25
            [/filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][filter][filter_ability]active=yes
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter matching Alice's drains ability, but only when it's active.
# Time of day for test is lawful, which makes it the wrong time of day for her drains ability.
# The events in FILTER_ABILITY_TEST make Alice attacks Bob and then Bob attack Alice.
##
# Expected end state:
# The filtered event is never triggered.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_active_inactive (
    {FILTER_ABILITY_TEST}

    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                active=yes
                tag_name=drains
                value=25
            [/filter_ability]
        [/filter]
        {FAIL}
    [/event]

    [event]
        name=turn 2
        {SUCCEED}
    [/event]
) TIME=AFTERNOON}

#####
# API(s) being tested: [event][filter_attack][filter_special]active=yes
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter matching Alice's drains ability, but only when it's active.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_special_active (
    {FILTER_ABILITY_TEST}
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            [filter_special]
                active=yes
                tag_name=drains
                value=25
            [/filter_special]
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][filter_attack][filter_special]active=yes
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST.
# Add an event with a filter matching Alice's drains ability, but only when it's active.
# Time of day for test is lawful,  which makes it the wrong time of day for her drains ability.
# The events in FILTER_ABILITY_TEST make Alice attacks Bob and then Bob attack Alice.
##
# Expected end state:
# The filtered event is never triggered.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_special_active_inactive (
    {FILTER_ABILITY_TEST}

    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            [filter_special]
                active=yes
                tag_name=drains
                value=25
            [/filter_special]
        [/filter_attack]
        {FAIL}
    [/event]

    [event]
        name=turn 2
        {SUCCEED}
    [/event]
) TIME=AFTERNOON}

#undef FILTER_ABILITY_TEST

#####
# API(s) being tested: [event][filter_attack][filter_special]
##
# Actions:
# Give to alice drains special.
# Add an event with a filter matching Alice's drains special.
# Time of day for test is lawful,  which makes it the wrong time of day for her drains ability.
# The start events make Alice attacks Bob and then Bob attack Alice.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_special_simple_check (
    [event]
        name=start
        # Make sure the attacks hit
        {FORCE_CHANCE_TO_HIT (id=bob) (id=alice) 100 ()}
        {FORCE_CHANCE_TO_HIT (id=alice) (id=bob) 100 ()}
        [modify_unit]
            [filter]
            [/filter]
            # Make sure they don't die during the attacks
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        [object]
            silent=yes
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    [drains]
                        value=25
                        [filter_self]
                            [filter_location]
                                time_of_day=neutral
                            [/filter_location]
                        [/filter_self]
                    [/drains]
                [/set_specials]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]
        {VARIABLE triggers 0}
    [/event]

    [event]
        name=side 1 turn 1
        [test_do_attack_by_id]
            attacker=alice
            defender=bob
            weapon=0
        [/test_do_attack_by_id]
        [end_turn][/end_turn]
    [/event]

    [event]
        name=side 2 turn
        [test_do_attack_by_id]
            attacker=bob
            defender=alice
            weapon=0
        [/test_do_attack_by_id]
        [end_turn][/end_turn]
    [/event]

    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            [filter_special]
                tag_name=drains
                value=25
            [/filter_special]
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
) TIME=AFTERNOON}

##
# Common code for the tests in this file.
##
# Actions:
# Give both Alice and Bob 100% chance to hit.
# Give Alice a drains ability to value 50(defined in hardcoding by default).
# During Alice's turn, move Alice next to Bob, and have Alice attack Bob.
# During Bob's turn, have Bob attack Alice.
##
#define FILTER_ABILITY_TEST_WITHOUT_VALUE
    [event]
        name=start
        # Make sure the attacks hit
        {FORCE_CHANCE_TO_HIT (id=bob) (id=alice) 100 ()}
        {FORCE_CHANCE_TO_HIT (id=alice) (id=bob) 100 ()}
        [modify_unit]
            [filter]
            [/filter]
            # Make sure they don't die during the attacks
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [drains]
                    [/drains]
                [/abilities]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]
        {VARIABLE triggers 0}
    [/event]

    [event]
        name=side 1 turn 1
        [test_do_attack_by_id]
            attacker=alice
            defender=bob
            weapon=0
        [/test_do_attack_by_id]
        [end_turn][/end_turn]
    [/event]

    [event]
        name=side 2 turn
        [test_do_attack_by_id]
            attacker=bob
            defender=alice
            weapon=0
        [/test_do_attack_by_id]
        [end_turn][/end_turn]
    [/event]
#enddef

#####
# API(s) being tested: [event][filter][filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST_WITHOUT_VALUE.
# Add an event with a filter matching Alice's drains ability who had no value specified.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST_WITHOUT_VALUE.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_with_value_by_default (
    {FILTER_ABILITY_TEST_WITHOUT_VALUE}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                tag_name=drains
                value=50
            [/filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}

#####
# API(s) being tested: [event][filter][filter_ability]
##
# Actions:
# Use the common setup from FILTER_ABILITY_TEST_WITHOUT_VALUE.
# Add an event with a filter matching Alice's drains ability who had no value specified.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_TEST_WITHOUT_VALUE.
##
# Expected end state:
# The filtered event is never triggered.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_no_match_by_default (
    {FILTER_ABILITY_TEST_WITHOUT_VALUE}
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                tag_name=drains
                value=35
            [/filter_ability]
        [/filter]
        {FAIL}
    [/event]
    [event]
        name=turn 2
        {SUCCEED}
    [/event]
)}

#undef FILTER_ABILITY_TEST_WITHOUT_VALUE

#####
# API(s) being tested: [event][filter][filter_ability]apply_to= when ability checked is [resistance]
##
# Actions:
# Use the common setup from FILTER_ABILITY_RESISTANCE_TEST.
# Add an event with a filter matching Alice's resistance ability applied to arcane, cold and fire damage.
# Alice attacks Bob and then Bob attacks Alice, as defined in FILTER_ABILITY_RESISTANCE_TEST.
##
# Expected end state:
# The filtered event is triggered exactly once.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_ability_apply_to_resistance (
    [event]
        name=start
        # Make sure the attacks hit
        {FORCE_CHANCE_TO_HIT (id=bob) (id=alice) 100 ()}
        {FORCE_CHANCE_TO_HIT (id=alice) (id=bob) 100 ()}
        [modify_unit]
            [filter]
            [/filter]
            # Make sure they don't die during the attacks
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [resistance]
                        value=50
                        apply_to=arcane,cold,fire
                    [/resistance]
                [/abilities]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]
        {VARIABLE triggers 0}
    [/event]

    [event]
        name=side 1 turn 1
        [test_do_attack_by_id]
            attacker=alice
            defender=bob
            weapon=0
        [/test_do_attack_by_id]
        [end_turn][/end_turn]
    [/event]

    [event]
        name=side 2 turn
        [test_do_attack_by_id]
            attacker=bob
            defender=alice
            weapon=0
        [/test_do_attack_by_id]
        [end_turn][/end_turn]
    [/event]
    [event]
        name=attack
        first_time_only=no
        [filter]
            [filter_ability]
                tag_name=resistance
                apply_to=arcane,fire
            [/filter_ability]
        [/filter]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}
