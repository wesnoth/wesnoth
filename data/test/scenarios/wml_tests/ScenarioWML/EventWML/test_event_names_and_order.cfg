# wmllint: no translatables

#####
# API(s) being tested: [event]
##
# Actions:
# Define an event using a variable in its name attribute.
##
# Expected end state:
# The variable is interpolated and the event executes.
#####
{GENERIC_UNIT_TEST "event_name_variable_substitution" (
    [event]
        name=start
        {VARIABLE t 1}
    [/event]
    [event]
        name="turn 1"
        [end_turn][/end_turn]
    [/event]
    [event]
        name="side $t turn $t end"
        {SUCCEED}
    [/event]
    [event]
        name="side 2 turn"
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [event]
##
# Actions:
# Define an event using a variable in its name attribute.
##
# Expected end state:
# The events execute in the order that they were defined.
# The variable is interpolated and the "turn $t" event executes first.
# The "turn 1" event executes afterwards.
#####
{GENERIC_UNIT_TEST "order_of_variable_events1" (
    [event]
        name=start
        {VARIABLE t 1}
    [/event]
    [event]
        name="turn $t"
        first_time_only=no
        {VARIABLE_OP t add 1}
    [/event]
    [event]
        name=turn 1
        {RETURN ({VARIABLE_CONDITIONAL t equals 2})}
    [/event]
)}

#####
# API(s) being tested: [event]
##
# Actions:
# Define an event using a variable in its name attribute.
##
# Expected end state:
# The events execute in the order that they were defined.
# The "turn 1" event executes first, and ends the test.
# The "turn $t" does not execute, because the test has already ended.
#####
{GENERIC_UNIT_TEST "order_of_variable_events2" (
    [event]
        name=start
        {VARIABLE t 1}
    [/event]
    [event]
        name=turn 1
        {SUCCEED}
    [/event]
    [event]
        name="turn $t"
        {FAIL}
    [/event]
)}

#####
# API(s) being tested: [event]
##
# Actions:
# Define an event using a variable in its name attribute.
##
# Expected end state:
# The variable is interpolated and the event executes twice - once as "turn 1" and once as "turn 2".
#####
{GENERIC_UNIT_TEST "order_of_variable_events3" (
    [event]
        name=start
        {VARIABLE t 1}
    [/event]
    [event]
        name="turn $t"
        first_time_only=no
        {VARIABLE_OP t add 1}
    [/event]
    [event]
        name="side turn"
        first_time_only=no
        [end_turn][/end_turn]
    [/event]
    [event]
        name=side 1 turn 2
        {RETURN ({VARIABLE_CONDITIONAL t equals 3})}
    [/event]
)}
