# wmllint: no translatables

#define EXPECT_HITPOINTS leader1 healer1 leader2 healer2
    [store_unit]
        [filter]
            side=1
            canrecruit=yes
        [/filter]
        variable=leader1
        kill=no
    [/store_unit]
    [store_unit]
        [filter]
            side=2
            canrecruit=yes
        [/filter]
        variable=leader2
        kill=no
    [/store_unit]
    [store_unit]
        [filter]
            side=1
            canrecruit=no
        [/filter]
        variable=healer1
        kill=no
    [/store_unit]
    [store_unit]
        [filter]
            side=2
            canrecruit=no
        [/filter]
        variable=healer2
        kill=no
    [/store_unit]
    {ASSERT {VARIABLE_CONDITIONAL leader1.hitpoints numerical_equals {leader1}}}
    {ASSERT {VARIABLE_CONDITIONAL leader2.hitpoints numerical_equals {leader2}}}
    {ASSERT {VARIABLE_CONDITIONAL healer1.hitpoints numerical_equals {healer1}}}
    {ASSERT {VARIABLE_CONDITIONAL healer2.hitpoints numerical_equals {healer2}}}
#enddef

#####
# API(s) being tested: [heals]
##
# Actions:
# Spawn a healer next to each leader.
# Set all four units (two healers, two leaders) to 1 current hp and 999 max hp.
# End turns and let healing be done.
##
# Expected end state:
# Healing from the healer units as well as rest healing are applied correctly.
#####
{GENERIC_UNIT_TEST "heal" (
    [event]
        name = start
        # Create two healers adjacent to the leaders
        {UNIT 1 (Elvish Shyde) 7 4 (id=healer1)}
        {UNIT 2 (Saurian Soothsayer) 13 4 (id=healer2)}
        [modify_unit]
            [filter][/filter]
            # Ensure we can heal as much as we may need to
            hitpoints=1
            max_hitpoints=999
        [/modify_unit]
    [/event]

    # Baseline: as defined in the scenario
    [event]
        name=side 1 turn 1 refresh
        {EXPECT_HITPOINTS  1  1  1  1}
        [end_turn][/end_turn]
    [/event]

    # side 2 gets healing but no rest healing
    [event]
        name=side 2 turn 1 refresh
        {EXPECT_HITPOINTS  1  1  9  1}
        [end_turn][/end_turn]
    [/event]

    # side 1 gets healing and rest healing
    [event]
        name=side 1 turn 2 refresh
        {EXPECT_HITPOINTS 11  3  9  1}
        [end_turn][/end_turn]
    [/event]

    # side 2 gets healing and rest healing
    [event]
        name=side 2 turn 2 refresh
        {EXPECT_HITPOINTS 11  3 19  3}
        [end_turn][/end_turn]
    [/event]

    # side 1 gets healing and rest healing
    [event]
        name=side 1 turn 3 refresh
        {EXPECT_HITPOINTS 21  5 19  3}
        [move_unit]
            side=1
            canrecruit=yes
            to_x,to_y=8,1
        [/move_unit]
        [move_unit]
            side=1
            canrecruit=no
            to_x,to_y=8,2
        [/move_unit]
        [modify_unit]
            [filter]
                side=1
            [/filter]
            moves=0
        [/modify_unit]
        [end_turn][/end_turn]
    [/event]

    # side 2 gets healing and rest healing
    [event]
        name=side 2 turn 3 refresh
        {EXPECT_HITPOINTS 21  5 29  5}
        [move_unit]
            side=2
            canrecruit=yes
            to_x,to_y=15,1
        [/move_unit]
        [move_unit]
            side=2
            canrecruit=no
            to_x,to_y=15,2
        [/move_unit]
        [modify_unit]
            [filter]
                side=2
            [/filter]
            moves=0
        [/modify_unit]
        [end_turn][/end_turn]
    [/event]

    # side 1 gets healing but not rest healing
    [event]
        name=side 1 turn 4 refresh
        {EXPECT_HITPOINTS 29  5 29  5}
        [end_turn][/end_turn]
    [/event]

    # side 2 gets healing but not rest healing
    [event]
        name=side 2 turn 4 refresh
        {EXPECT_HITPOINTS 29  5 37  5}
        [end_turn][/end_turn]
    [/event]

    [event]
        name=turn 5
        {SUCCEED}
    [/event]
)}

#undef EXPECT_HITPOINTS
