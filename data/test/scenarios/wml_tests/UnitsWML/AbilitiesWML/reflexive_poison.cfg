#textdomain wesnoth-test

#####
# API(s) being tested: [poison]apply_to=opponent
##
# Actions:
# This uses a "common keep" map, so Alice and Bob are already in position to attack.
# Give Alice a weapon that does reverse-poison (Alice gets poisoned if Bob hits her).
# Simulate various combats using melee weapons.
##
# Expected end state:
# Normal combat can poison Alice.
# Making Alice unpoisonable works.
# Making Bob unpoisonable does not affect Alice.
# Making Bob poisoned before combat starts does not affect Alice.
#####
{COMMON_KEEP_A_B_UNIT_TEST reflexive_poison (
    [event]
        name=start

        [object]
            [filter]
                id=alice
            [/filter]
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    [poison]
                        id="reflexive_poison"
                        name=_ "reflexive_poison"
                        description=_ "When Alice attacks, her opponentâ€™s weapons get the <i>poison</i> special."
                        apply_to=opponent
                    [/poison]
                [/set_specials]
            [/effect]
        [/object]

        [lua]
            code=<<
                local alice = wesnoth.units.find({id="alice"})[1]
                local bob = wesnoth.units.find({id="bob"})[1]

                -- Alice attacks with her sword, so Bob can counterattack. They're both on keeps, so 60% defense, and Bob gets 2 swings.
                local expected_chance = 1.0 - 0.6 ^ 2

                -- Test that the weapon special works, before adding any complications about status conditions
                local att_stats, def_stats = wesnoth.simulate_combat(alice, 1, bob)
                unit_test.assert_approx_equal(att_stats.untouched, 1.0 - expected_chance, 0.01, "Test setup failed - Alice should be at risk of getting hit")
                unit_test.assert_approx_equal(att_stats.poisoned, expected_chance, 0.01, "Alice should be at risk of poisoning")

                -- Test the "unpoisonable" status on Alice (this works correctly, even in 1.16.x)
                local immune_alice = alice:clone()
                immune_alice.status.unpoisonable = true
                att_stats, def_stats = wesnoth.simulate_combat(immune_alice, 1, bob)
                unit_test.assert_approx_equal(att_stats.untouched, 1.0 - expected_chance, 0.01, "Test setup failed - Alice should be at risk of getting hit")
                unit_test.assert_approx_equal(att_stats.poisoned, 0.0, 0.01, "Immune Alice should be unpoisonable")

                -- Test the "unpoisonable" status on Bob
                local immune_bob = bob:clone()
                immune_bob.status.unpoisonable = true
                att_stats, def_stats = wesnoth.simulate_combat(alice, 1, immune_bob)
                unit_test.assert_approx_equal(att_stats.untouched, 1.0 - expected_chance, 0.01, "Test setup failed - Alice should be at risk of getting hit")
                unit_test.assert_approx_equal(att_stats.poisoned, expected_chance, 0.01, "Alice should be at risk of poisoning when attacking Immune Bob")

                -- Test that Bob already being poisoned before combat starts doesn't affect the stats
                local affected_bob = bob:clone()
                affected_bob.status.poisoned = true
                att_stats, def_stats = wesnoth.simulate_combat(alice, 1, affected_bob)
                unit_test.assert_approx_equal(att_stats.untouched, 1.0 - expected_chance, 0.01, "Test setup failed - Alice should be at risk of getting hit")
                unit_test.assert_approx_equal(att_stats.poisoned, expected_chance, 0.01, "Alice should be at risk of poisoning when attacking Affected Bob")
            >>
        [/lua]

        {SUCCEED}
    [/event]
)}
