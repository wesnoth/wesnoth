#####
# API(s) being tested: [abilities][overwrite_specials][overwrite_filter]
##
# Actions:
# Bob is given three [damage] abilities, one with value=5, other with add=11 and the last with multiply=2.
# The one with multiply=2 has overwrite_specials=both_sides and [overwrite_filter] to overwrite [damage]add=11 but not to overwrite [damage]value=5.
# Have bob attack alice.
##
# Expected end state:
# Bob's attack does 10 damage per hit, because the add=11 was overwritten but the value=5 and multiply=2 are still active.
#####
{COMMON_KEEP_A_B_UNIT_TEST "test_overwrite_specials_ability" (
    [event]
        name=start

        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [damage]
                        id=test_dmg
                        value=5
                    [/damage]
                    [attacks]
                        id=test_att
                        value=1
                    [/attacks]
                    [damage]
                        id=test_overwrite
                        add=11
                    [/damage]
                    [damage]
                        id=test_overwrite_specials
                        multiply=2
                    [/damage]
                    [overwrite_specials]
                        id=test_ability
                        [overwrite_filter]
                            tag_name=damage
                            type_value=add
                        [/overwrite_filter]
                    [/overwrite_specials]
                    [chance_to_hit]
                        value=100
                    [/chance_to_hit]
                [/abilities]
            [/effect]
            [filter]
                id=bob
            [/filter]
        [/object]

        [lua]
            code=<<
                local alice = wesnoth.units.find({id="alice"})[1]
                local bob = wesnoth.units.find({id="bob"})[1]

                -- Bob attacks Alice, doing it this way round ensures that it's melee rather than ranged combat.
                _, _, att_weapon, _ = wesnoth.simulate_combat(bob, alice)
                unit_test.assert_equal(att_weapon.num_blows, 1, "Bob’s weapon should only have 1 attack")
                unit_test.assert_equal(att_weapon.damage, 10, "Bob’s weapon should do 10 damage per hit")
            >>
        [/lua]

        {SUCCEED}
    [/event]
)}
