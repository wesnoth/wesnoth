#textdomain wesnoth-test

#####
# API(s) being tested: [drains]
##
# Actions:
# This uses a "common keep" map, with Alice and Bob already in position to attack any of the other units.
# In this test they're all Orcish Grunts, so the all have 9x2 melee attacks.
# Set everyone to 20 hp, so that drains will show but no-one will die.
# Give Alice drains.
# Give Bob reflexive drains.
# Give Dave the undrainable trait.
# Simulate various combats and check the results.
##
# Expected end state:
# Alice drains Bob and Charlie
# Charlie drains when attacking Bob
# Dave drains in the Bob v Dave fight
#####
[test]
    name = _ "Unit Test reflexive_drains"
    map_file=test/maps/4p_single_castle.map
    turns = unlimited
    id = reflexive_drains
    is_unit_test = yes

    {DAWN}

    [side]
        side=1
        controller=human
        [leader]
            name = _ "Alice"
            type = Orcish Grunt
            id=alice
        [/leader]
    [/side]
    [side]
        side=2
        controller=human
        [leader]
            name = _ "Bob"
            type = Orcish Grunt
            id=bob
        [/leader]
    [/side]
    [side]
        side=3
        controller=human
        [leader]
            name = _ "Charlie"
            type = Orcish Grunt
            id=charlie
        [/leader]
    [/side]
    [side]
        side=4
        controller=human
        [leader]
            name = _ "Dave"
            type = Orcish Grunt
            id=dave
        [/leader]
    [/side]

    [event]
        name=start

        [object]
            [filter]
                id=alice
            [/filter]
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    {WEAPON_SPECIAL_DRAIN}
                [/set_specials]
            [/effect]
        [/object]

        [object]
            [filter]
                id=bob
            [/filter]
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    [drains]
                        id=drains
                        name= _ "drains"
                        description= _ "Reverse drains, gives the drain ability to the opponent."
                        apply_to=opponent
                    [/drains]
                [/set_specials]
            [/effect]
        [/object]

        [object]
            [filter]
                id=dave
            [/filter]
            [effect]
                apply_to=status
                add=undrainable
            [/effect]
        [/object]

        [lua]
            code=<<
                local alice = wesnoth.units.find({id="alice"})[1]
                local bob = wesnoth.units.find({id="bob"})[1]
                local charlie = wesnoth.units.find({id="charlie"})[1]
                local dave = wesnoth.units.find({id="dave"})[1]

                alice.hitpoints = 20
                bob.hitpoints = 20
                charlie.hitpoints = 20
                dave.hitpoints = 20

                -- Everybody's an orcish grunt, and they're all on 60% terrain. The chance of {0,1,2} strikes hitting is:
                local hit_distribution = {}
                hit_distribution[0] = 0.6 ^ 2
                hit_distribution[1] = 0.4 * 0.6 + 0.6 * 0.4
                hit_distribution[2] = 0.4 ^ 2
                -- Strikes do 9 damage each, and therefore drain heals 4 hp. Starting with 20 hp, each combination of getting
                -- hit i times and healing j times leads to a unique amount of hp after the fight.
                local expected_no_drain = {}
                local expected_with_drain = {}
                for i, i_chance in pairs(hit_distribution) do
                    expected_no_drain[20 - 9 * i] = i_chance
                    for j, j_chance in pairs(hit_distribution) do
                        expected_with_drain[20 - 9 * i + 4 * j] = i_chance * j_chance
                    end
                end

                function check_results(stats, expectation, log_message)
                    for i,i_chance in pairs(expectation) do
                        unit_test.assert_approx_equal(stats[i], i_chance, 0.001, log_message .. " expectation for " .. i .. " hp")
                    end
                end

                -- Alice has drain, Bob has reflexive drain, Dave is undrainable
                local att_stats, def_stats = wesnoth.simulate_combat(alice, bob)
                check_results(att_stats.hp_chance, expected_with_drain, "Alice v Bob att_stats")
                check_results(def_stats.hp_chance, expected_no_drain, "Alice v Bob def_stats")
                att_stats, def_stats = wesnoth.simulate_combat(alice, charlie)
                check_results(att_stats.hp_chance, expected_with_drain, "Alice v Charlie att_stats")
                check_results(def_stats.hp_chance, expected_no_drain, "Alice v Charlie def_stats")
                att_stats, def_stats = wesnoth.simulate_combat(alice, dave)
                check_results(att_stats.hp_chance, expected_no_drain, "Alice v Dave att_stats")
                check_results(def_stats.hp_chance, expected_no_drain, "Alice v Dave def_stats")
                att_stats, def_stats = wesnoth.simulate_combat(bob, charlie)
                check_results(att_stats.hp_chance, expected_no_drain, "Bob v Charlie att_stats")
                check_results(def_stats.hp_chance, expected_with_drain, "Bob v Charlie def_stats")
                att_stats, def_stats = wesnoth.simulate_combat(bob, dave)
                check_results(att_stats.hp_chance, expected_no_drain, "Bob v Dave att_stats")
                check_results(def_stats.hp_chance, expected_with_drain, "Bob v Dave def_stats")
            >>
        [/lua]

        {SUCCEED}
    [/event]
[/test]
