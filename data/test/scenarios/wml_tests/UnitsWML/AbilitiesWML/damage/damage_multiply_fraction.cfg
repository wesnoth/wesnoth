# wmllint: no translatables

#####
# API(s) being tested: [damage]value=
##
# Actions:
# Give the leaders a damage ability with both the value and multiply attributes
# Have the side 1 leader attack the side 2 leader with both its weapons
##
# Expected end state:
# The side 1 leader has 2 weapons both of which have 8 damage (4*2, the .5 is rounded up)
#####
#ifndef SCHEMA_VALIDATION
{COMMON_KEEP_A_B_UNIT_TEST "damage_multiply_fraction" (
    [event]
        name = start

        [modify_unit]
            [filter]
            [/filter]
            [effect]
                apply_to = new_ability
                [abilities]
                    {TEST_ABILITY damage 3.5 (multiply=2) SELF=yes}
                [/abilities]
            [/effect]
        [/modify_unit]

        {ATTACK_AND_VALIDATE 8 (DAMAGE_VALUE=) WEAPON_COUNT=2}
        {SUCCEED}
    [/event]
) SIDE2_LEADER="Elvish Archer"}
#endif

#define TEST_DAMAGE_MULTIPLY_FRACTION TEST_CASE_INDEX BASE_VALUE MULTIPLIER EXPECTED
    {COMMON_KEEP_A_B_UNIT_TEST "damage_multiply_fraction_{TEST_CASE_INDEX}" (
        [event]
            name = start

            [modify_unit]
                [filter]
                [/filter]
                [effect]
                    apply_to = attack
                    set_damage={BASE_VALUE}
                [/effect]
                [effect]
                    apply_to = new_ability
                    [abilities]
                        {TEST_ABILITY_NO_VALUE damage (multiply={MULTIPLIER}) SELF=yes}
                    [/abilities]
                [/effect]
            [/modify_unit]

            {ATTACK_AND_VALIDATE {EXPECTED} (DAMAGE_VALUE=) WEAPON_COUNT=2}
            {SUCCEED}
        [/event]
    ) SIDE2_LEADER="Elvish Archer"}
#enddef

{TEST_DAMAGE_MULTIPLY_FRACTION 2 2 0.75 2}
{TEST_DAMAGE_MULTIPLY_FRACTION 3 2 0.74 1}
{TEST_DAMAGE_MULTIPLY_FRACTION 4 2 1.75 4}

#undef TEST_DAMAGE_MULTIPLY_FRACTION
