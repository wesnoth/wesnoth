#textdomain wesnoth-test

# macro used for two tests below
#define FILTER_TYPE_BLADE
    [filter_self]
        [filter_weapon]
            type=blade
        [/filter_weapon]
    [/filter_self]
#enddef

#define DAMAGE_TYPE_TEST FILTER_WEAPON
    [event]
        name=start
        [modify_unit]
            [filter]
            [/filter]
            max_hitpoints=100
            hitpoints=100
            attacks_left=1
        [/modify_unit]
        [object]
            silent=yes
            [effect]
                apply_to=resistance
                replace=yes
                [resistance]
                    arcane=50
                    fire=200
                [/resistance]
            [/effect]
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    [attacks]
                        value=1
                    [/attacks]
                    [damage]
                        value=12
                    [/damage]
                    [damage_type]
                        replacement_type=fire
                        {FILTER_WEAPON}
                    [/damage_type]
                    [damage_type]
                        replacement_type=cold
                        {FILTER_WEAPON}
                    [/damage_type]
                    [damage_type]
                        replacement_type=cold
                        {FILTER_WEAPON}
                    [/damage_type]
                    [chance_to_hit]
                        value=100
                    [/chance_to_hit]
                [/set_specials]
            [/effect]
            [filter]
                id=bob
            [/filter]
        [/object]
        [object]
            silent=yes
            [effect]
                apply_to=resistance
                replace=yes
                [resistance]
                    cold=200
                    fire=50
                [/resistance]
            [/effect]
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    [attacks]
                        value=1
                    [/attacks]
                    [damage]
                        value=12
                    [/damage]
                    [damage_type]
                        replacement_type=cold
                    [/damage_type]
                    [damage_type]
                        replacement_type=arcane
                    [/damage_type]
                    [damage_type]
                        replacement_type=arcane
                    [/damage_type]
                    [damage_type]
                        replacement_type=fire
                    [/damage_type]
                    [damage_type]
                        replacement_type=fire
                    [/damage_type]
                    [damage_type]
                        replacement_type=fire
                    [/damage_type]
                    [chance_to_hit]
                        value=100
                    [/chance_to_hit]
                [/set_specials]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]

        [store_unit]
            [filter]
                id=alice
            [/filter]
            variable=a
            kill=yes
        [/store_unit]
        [store_unit]
            [filter]
                id=bob
            [/filter]
            variable=b
        [/store_unit]
        [unstore_unit]
            variable=a
            find_vacant=yes
            x,y=$b.x,$b.y
        [/unstore_unit]
        [store_unit]
            [filter]
                id=alice
            [/filter]
            variable=a
        [/store_unit]

        [do_command]
            [attack]
                weapon=0
                defender_weapon=0
                [source]
                    x,y=$a.x,$a.y
                [/source]
                [destination]
                    x,y=$b.x,$b.y
                [/destination]
            [/attack]
        [/do_command]
        [store_unit]
            [filter]
                id=alice
            [/filter]
            variable=a
        [/store_unit]
        [store_unit]
            [filter]
                id=bob
            [/filter]
            variable=b
        [/store_unit]
        #damage without modification are 12, if test fail hitpoints !=76
        #if succed then damage by alice 24(bob vulnerable to fire and fire prioritized)
        #if succed then damage by bob 24(alice vulnerable to cold, cold priority is 1)
        {ASSERT ({VARIABLE_CONDITIONAL a.hitpoints equals 76})}
        {ASSERT ({VARIABLE_CONDITIONAL b.hitpoints equals 76})}
        {SUCCEED}
    [/event]
#enddef

#####
# API(s) being tested: [damage]replacement_type=
##
# Actions:
# Give both Alice and Bob 100% chance to hit.
# Give Bob one [damage] with replacement_type=fire and two [damage] with replacement_type=cold
# change resistance of Bob to arcane to 50% and fire to -100%.
# Give Alice one [damage] with replacement_type=cold, two [damage] with replacement_type=arcane and three with replacement_type=fire
# and change Alice resistance to cold to -100% and fire to 50%.
# Move Alice next to Bob, and have Alice attack Bob.
##
# Expected end state:
# Alice attack with fire and Bob use cold.
#####
{GENERIC_UNIT_TEST "damage_type_test" (
    {DAMAGE_TYPE_TEST ()}
)}

#####
# API(s) being tested: [damage]replacement_type=[filter_self][filter_weapon]type=blade
##
# Actions:
# Give both Alice and Bob 100% chance to hit.
# Give Bob one [damage] with replacement_type=fire and two [damage] with replacement_type=cold and filter by type=blade
# change resistance of Bob to arcane to 50% and fire to -100%.
# Give Alice one [damage] with replacement_type=cold, two [damage] with replacement_type=arcane and three with replacement_type=fire
# and change Alice resistance to cold to -100% and fire to 50%.
# Move Alice next to Bob, and have Alice attack Bob.
##
# Expected end state:
# Alice attacks with fire and Bob uses cold because Bob's [damage] filter must check type=blade and not the replacement type. That's partly because it could otherwise cause infinite recursion, and partly because having a set limit to the number of recursions would make it unpredictable which specials are active.
#####
{GENERIC_UNIT_TEST "damage_type_with_filter_test" (
    {DAMAGE_TYPE_TEST {FILTER_TYPE_BLADE}}
)}

#undef FILTER_TYPE_BLADE

#####
# API(s) being tested: [damage]alternative_type=
##
# Actions:
# Give both Alice and Bob 100% chance to hit.
# Give Bob one [damage] with alternative_type=cold
# change resistance Bob to blade to -100% and fire to 0%.
# Give Alice one [damage] with alternative_type=fire
# and change resistance to cold to -100% and blade to 0%.
# Move Alice next to Bob, and have Alice attack Bob.
##
# Expected end state:
# Alice attack with blade and Bob use cold.
#####
{COMMON_KEEP_A_B_UNIT_TEST "damage_secondary_type_test" (
    [event]
        name=start

        [object]
            silent=yes
            [effect]
                apply_to=resistance
                replace=yes
                [resistance]
                    blade=200
                    fire=100
                [/resistance]
            [/effect]
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    [damage_type]
                        alternative_type=cold
                    [/damage_type]
                [/set_specials]
            [/effect]
            [filter]
                id=bob
            [/filter]
        [/object]

        [object]
            silent=yes
            [effect]
                apply_to=resistance
                replace=yes
                [resistance]
                    cold=200
                    blade=100
                [/resistance]
            [/effect]
            [effect]
                apply_to=attack
                [set_specials]
                    mode=append
                    [damage_type]
                        alternative_type=fire
                    [/damage_type]
                [/set_specials]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]

        # damage without modification is 100
        # expected damage by alice is 200 (bob is vulnerable to blade, so the alternative isn't used)
        # expected damage by bob is 200 (alice is most vulnerable to cold, so that alternative is used)
        {ATTACK_AND_VALIDATE 200}
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [filter_self][has_attack]type= in [damage_type]
##
# Actions:
# Give Alice an ability that changes all damage types to arcane if Alice has a blade attack
# Define events that use filter_attack matching Alice's arcane type.
# Have Alice attack Bob during side 1's turn
# Have Bob attack Alice during side 2's turn
##
# Expected end state:
# BROKE STRICT due to infinite recursion.
# The test reaches turn 2 without crashing; this tests for a C++ crash due to infinite recursion in the filters.
#####
{COMMON_KEEP_A_B_UNIT_TEST event_test_filter_damage_type_recursion (
    [event]
        name=start
        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [damage_type]
                        id=test_arcane_damage
                        replacement_type=arcane
                        [filter_student]
                            [has_attack]
                                type=blade
                            [/has_attack]
                        [/filter_student]
                    [/damage_type]
                [/abilities]
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]
        [modify_unit]
            [filter]
            [/filter]
            # Make sure they don't die during the attacks
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        {VARIABLE triggers 0}
    [/event]
    [event]
        name=side 1 turn 1
        [test_do_attack_by_id]
            attacker=alice
            defender=bob
        [/test_do_attack_by_id]
        [end_turn][/end_turn]
    [/event]

    [event]
        name=side 2 turn
        [test_do_attack_by_id]
            attacker=bob
            defender=alice
        [/test_do_attack_by_id]
        [end_turn][/end_turn]
    [/event]

    # Event when Alice attacks
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            type=arcane
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {ASSERT ({VARIABLE_CONDITIONAL triggers equals 0})}
        {VARIABLE_OP triggers add 1}
    [/event]
    [event]
        name=turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 1})}
    [/event]
)}
