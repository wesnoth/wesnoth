#textdomain wesnoth-test
#####
# API(s) being tested: [attack]alignment=
##
# Actions:
# Give a lawful time of day.
# Give the leaders an alignment of lawful.
# Have the leaders fight each other.
##
# Expected end state:
# The attacker inflicted 25% more damage because the weapon alignment is lawful at a lawful time of day.
#####
{COMMON_KEEP_A_B_UNIT_TEST "attack_alignment_test" (
    [event]
        name=start
        [modify_unit]
            [filter]
            [/filter]
            [effect]
                apply_to=attack
                set_alignment=lawful
            [/effect]
        [/modify_unit]

        {ATTACK_AND_VALIDATE 125}
        {SUCCEED}
    [/event]
) TIME=MORNING}

#####
# API(s) being tested: [attack]alignment=
##
# Actions:
# Give an illumination ability to leaders.
# Give the leaders an alignment of lawful.
# Have the leaders fight each other.
##
# Expected end state:
# The attacker inflicted 25% more damage because the weapon alignment is lawful and illumination provides a lawful time of day.
#####
{COMMON_KEEP_A_B_UNIT_TEST "attack_alignment_test_with_illuminates" (
    [event]
        name=start
        [modify_unit]
            [filter]
            [/filter]
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_ILLUMINATES}
                [/abilities]
            [/effect]
            [effect]
                apply_to=attack
                set_alignment=lawful
            [/effect]
        [/modify_unit]

        {ATTACK_AND_VALIDATE 125}
        {SUCCEED}
    [/event]
)}

#define FILTER_ATTACK_ALIGNMENT_TEST
    [event]
        name=start
        [modify_unit]
            [filter]
            [/filter]
            [status]
                invulnerable=yes
            [/status]
        [/modify_unit]
        [object]
            silent=yes
            [effect]
                apply_to=attack
                set_alignment=lawful
            [/effect]
            [filter]
                id=alice
            [/filter]
        [/object]
        {VARIABLE triggers_on_attack 0}
    [/event]
    [event]
        name=side 1 turn 1
        [do_command]
            [move]
                x=7,13
                y=3,4
            [/move]
            [attack]
                [source]
                    x,y=13,4
                [/source]
                [destination]
                    x,y=13,3
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]

    [event]
        name=side 2 turn
        [do_command]
            [attack]
                [source]
                    x,y=13,3
                [/source]
                [destination]
                    x,y=13,4
                [/destination]
            [/attack]
        [/do_command]
        [end_turn][/end_turn]
    [/event]
#enddef

# API(s) being tested: [event][filter_attack]alignment=
##
# Actions:
# Give Alice alignment=lawful.
# Define events that use filter_attack matching Alice's alignment.
# Have Alice attack bob.
##
# Expected end state:
# An event triggers when Alice attacks during side 1's turn.
#####
{GENERIC_UNIT_TEST event_test_filter_attack_attack_alignment (
    {FILTER_ATTACK_ALIGNMENT_TEST}

    # Event when Alice attacks
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            alignment=lawful
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers_on_attack add 1}
    [/event]

    [event]
        name=turn 2
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_attack equals 1})}
        {SUCCEED}
    [/event]
)}

# API(s) being tested: [event][filter_attack]alignment=
##
# Actions:
# Give Alice alignment=lawful.
# Define events that use filter_attack not matching Alice's alignment.
# Have Alice attack bob.
##
# Expected end state:
# No event triggers when Alice attacks during side 1's turn.
#####
{GENERIC_UNIT_TEST event_test_filter_attack_attack_alignment_no_match (
    {FILTER_ATTACK_ALIGNMENT_TEST}

    # Event when Alice attacks
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            alignment=neutral
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers_on_attack add 1}
    [/event]

    [event]
        name=turn 2
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_attack equals 0})}
        {SUCCEED}
    [/event]
)}

# API(s) being tested: [event][filter_attack]formula="alignment="
##
# Actions:
# Give Alice alignment=lawful.
# Define events that use filter_attack matching Alice's alignment.
# Have Alice attack bob.
##
# Expected end state:
# An event triggers when Alice attacks during side 1's turn.
#####
{GENERIC_UNIT_TEST event_test_filter_attack_formula_attack_alignment (
    {FILTER_ATTACK_ALIGNMENT_TEST}

    # Event when Alice attacks
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            formula="alignment='lawful'"
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers_on_attack add 1}
    [/event]

    [event]
        name=turn 2
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_attack equals 1})}
        {SUCCEED}
    [/event]
)}

# API(s) being tested: [event][filter_attack]formula="alignment="
##
# Actions:
# Give Alice alignment=lawful.
# Define events that use filter_attack no matching Alice's alignment.
# Have Alice attack bob.
##
# Expected end state:
# No event triggers when Alice attacks during side 1's turn.
#####
{GENERIC_UNIT_TEST event_test_filter_attack_formula_attack_alignment_no_match (
    {FILTER_ATTACK_ALIGNMENT_TEST}

    # Event when Alice attacks
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            formula="alignment='neutral'"
        [/filter_attack]
        {ASSERT ({VARIABLE_CONDITIONAL side_number equals 1})}
        {VARIABLE_OP triggers_on_attack add 1}
    [/event]

    [event]
        name=turn 2
        {ASSERT ({VARIABLE_CONDITIONAL triggers_on_attack equals 0})}
        {SUCCEED}
    [/event]
)}

#undef FILTER_ATTACK_ALIGNMENT_TEST
