# wmllint: no translatables

#####
# API(s) being tested: [trait]exclude_traits=
##
# Actions:
# Bob is told to generate special random traits.
##
# Expected end state:
# One of the two special traits excludes another trait to be already had by Bob.
# Bob should either not have the trait or have only the excluded one.
#####
{GENERIC_UNIT_TEST "trait_exclusion_test" (
    [event]
        name=start
        {UNIT 1 (Test Unit Exclude) 1 1 (id=excluder1)}
    [/event]
    [event]
        name=side 1 turn 1
        [store_unit]
            [filter]
                side=1
                id=excluder1
            [/filter]
            variable=excluded
            kill=no
        [/store_unit]
        [if]
            # Check if the first randomly generated trait is the excluded one, then the
            # next trait slot should be empty
            {VARIABLE_CONDITIONAL excluded.modifications.trait[0].id equals "test_excluded"}
            [then]
                {ASSERT ({VARIABLE_CONDITIONAL excluded.modifications.trait[1].id equals $nil})}
            [/then]
            [else]
                # Otherwise if it is "test_exclude" then the next slot should be empty as well
                {ASSERT ({VARIABLE_CONDITIONAL excluded.modifications.trait[0].id equals "test_exclude"})}
                {ASSERT ({VARIABLE_CONDITIONAL excluded.modifications.trait[1].id equals $nil})}
            [/else]
        [/if]
        {SUCCEED}
    [/event]
)}

#####
# API(s) being tested: [trait]require_traits=
##
# Actions:
# Bob is told to generate special random traits.
##
# Expected end state:
# One of the two special traits needs another trait to be already had by Bob.
# Bob only have the trait if it also has the one it requires one.
#####
{GENERIC_UNIT_TEST "trait_requirement_test" (
    [event]
        name=start
        {UNIT 1 (Test Unit Require) 1 1 (id=requirer1)}
    [/event]
    [event]
        name=side 1 turn 1
        [store_unit]
            [filter]
                side=1
                id=requirer1
            [/filter]
            variable=required
            kill=no
        [/store_unit]
        # Check if the second randomly generated trait is the one requiring the other one
        {ASSERT ({VARIABLE_CONDITIONAL required.modifications.trait[1].id equals "test_require"})}
        {SUCCEED}
    [/event]
)}
