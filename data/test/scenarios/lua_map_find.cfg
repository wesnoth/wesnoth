#textdomain wesnoth-test

#####
# API(s) being tested: wesnoth.map.find()
##
# Expected end state:
# The expected plain terrain is found.
# The expected terrain with an overlay is found.
# The expected terrain is found using wildcards.
# The expected width and height is returned.
#####
{GENERIC_UNIT_TEST "lua_map_find" (
    [event]
        name = start
        [lua]
            code = <<
                local gg_locs = wesnoth.map.find({terrain = "Gg"})
                unit_test.assert_equal(#gg_locs, 13, "unexpected number of 'Gg' terrains found")

                local gg_kov_locs = wesnoth.map.find({terrain = "Gg^Kov"})
                unit_test.assert_equal(#gg_kov_locs, 149, "unexpected number of 'Gg^Kov' terrains found")

                -- "keep_locs" and "castle_locs", ignoring that the whole map has the keep overlay
                local castle_locs = wesnoth.map.find({terrain = "C*^*"})
                unit_test.assert_equal(#castle_locs, 16, "unexpected number of castle terrains found")

                local keep_locs = wesnoth.map.find({terrain = "K*^*"})
                unit_test.assert_equal(#keep_locs, 2, "unexpected number of keep terrains found")

                local column_one = wesnoth.map.find({x = 1})
                unit_test.assert_equal(#column_one, 10, "unexpected map height on odd columns")

                local column_two = wesnoth.map.find({x = 2})
                unit_test.assert_equal(#column_two, 10, "unexpected map height on even columns")

                local row_one = wesnoth.map.find({y = 1})
                unit_test.assert_equal(#row_one, 18, "unexpected map width")

                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}
