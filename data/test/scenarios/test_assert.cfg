# Tests that "assert true, return true" works.
# This is a sanity check of the unit testing mechanism.
{GENERIC_UNIT_TEST "test_assert" (
    [event]
        name = start
        {ASSERT ([true][/true])}
        {RETURN ([true][/true])}
    [/event]
)}

# Tests that "assert false, return true" fails.
# This is a sanity check of the unit testing mechanism.
{GENERIC_UNIT_TEST "test_assert_fail" (
    [event]
        name = start
        {ASSERT ([not][true][/true][/not])}
        {RETURN ([true][/true])}
    [/event]
)}

# Tests that "assert true, return false" fails.
# This is a sanity check of the unit testing mechanism.
{GENERIC_UNIT_TEST "test_assert_fail_two" (
    [event]
        name = start
        {ASSERT ([true][/true])}
        {RETURN ([not][true][/true][/not])}
    [/event]
)}

# Tests that "assert true, pass" works.
# This is a sanity check of the unit testing mechanism.
{GENERIC_UNIT_TEST "test_lua_assert" (
    [event]
        name = start
        [lua]
            code=<<
                unit_test.assert(true, 'assert true')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

# Tests that "assert false, return true" works.
# This is a sanity check of the unit testing mechanism.
{GENERIC_UNIT_TEST "test_lua_assert_fail" (
    [event]
        name = start
        [lua]
            code=<<
                unit_test.assert(false, 'assert false')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

# Sanity check that a fail() in a fired event causes the test to fail
{GENERIC_UNIT_TEST "test_lua_assert_fail_in_fired_event" (
    [event]
        id = fail_event
        [lua]
            code=<<
                unit_test.fail()
            >>
        [/lua]
    [/event]
    [event]
        name = start
        [fire_event]
            id = fail_event
        [/fire_event]
        [lua]
            code=<<
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

# Test the comparison assertions from the Lua unit_test module
{GENERIC_UNIT_TEST "test_lua_assert_compare" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_equal('foo', 'foo', 'string equality')
                unit_test.assert_not_equal('foo', 'bar', 'string inequality')
                unit_test.assert_greater('foo', 'bar', 'string ordering')
                unit_test.assert_equal(1, 1, 'numeric equality')
                unit_test.assert_not_equal(1, 2, 'numeric inequality')
                unit_test.assert_greater(2, 1, 'numeric greater-than')
                unit_test.assert_less(1, 2, 'numeric less-than')
                unit_test.assert_in_range(1, 0, 2, 'numeric in-range')
                unit_test.assert_approx_equal(1, 1.0001, 0.001, 'numeric approx-equal')
                unit_test.assert_contains('abcdef', 'bc', 'substring')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_compare_fail1" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_equal('foo', 'bar', 'string equality')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_compare_fail2" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_not_equal('foo', 'foo', 'string inequality')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_compare_fail3" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_less('foo', 'bar', 'string ordering')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_compare_fail4" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_equal(1, 2, 'numeric equality')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_compare_fail5" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_not_equal(1, 1, 'numeric inequality')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_compare_fail6" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_greater(1, 2, 'numeric greater-than')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_compare_fail7" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_less(2, 1, 'numeric less-than')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_compare_fail8" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_in_range(1, 2, 5, 'numeric in-range')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_compare_fail9" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_approx_equal(1, 1.001, 0.0001, 'numeric approx-equal')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_errors1" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_nothrow(function() end, 'no error')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_errors2" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_nothrow(function() error('error') end, 'no error')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_errors3" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_throws(function() end, 'any error')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_errors4" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_throws(function() error('error') end, 'any error')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_errors5" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_throws_with('error', function() end, 'specific error')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_errors6" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_throws_with('error', function() error('error', 0) end, 'specific error')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_errors7" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_throws_with('error', function() error('foo', 0) end, 'specific error')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_errors8" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_throws_with('error', function() error('error') end, 'specific error')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}

{GENERIC_UNIT_TEST "test_lua_assert_errors9" (
    [event]
        name=start
        [lua]
            code=<<
                unit_test.assert_throws_with('error', function() error('foo') end, 'specific error')
                unit_test.succeed()
            >>
        [/lua]
    [/event]
)}
