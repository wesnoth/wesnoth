# wmllint: no translatables

#####
# API(s) being tested: wml_utils.scoped_var
##
# Actions:
# Create a WML container array called test_var.
# Using Lua, run a block of WML with a scoped var shadowing test_var.
# Check that the shadow is initialized to an empty array.
# Check that the reading non-existent elements of the shadow does not access the original.
# Write to the shadow.
# Check that the shadow contains the new values.
# Exit the scope of the temporary shadow.
##
# Expected end state:
# Changes to the shadow did not change the original.
#####
{GENERIC_UNIT_TEST "test_scoped_array" (
    [event]
        name = prestart

        {VARIABLE test_var[0].value 2}
        {VARIABLE test_var[1].value 3}

        {ASSERT {VARIABLE_CONDITIONAL test_var[0].value equals 2}}
        {ASSERT {VARIABLE_CONDITIONAL test_var[1].value equals 3}}

        [lua]
            code = <<
                local wml_utils = wesnoth.require "wml-utils"
                local shadow_var <close> = wml_utils.scoped_var("test_var")
                -- This runs the contents of [args] as WML actions
                wml_utils.handle_event_commands(...)
            >>
            [args]
                {ASSERT {VARIABLE_CONDITIONAL test_var.length equals 0}}

                {ASSERT {VARIABLE_CONDITIONAL test_var[0].value equals ""}}
                {ASSERT {VARIABLE_CONDITIONAL test_var[1].value equals ""}}

                {VARIABLE test_var[0].value 6}
                {VARIABLE test_var[1].value 7}

                {ASSERT {VARIABLE_CONDITIONAL test_var[0].value equals 6}}
                {ASSERT {VARIABLE_CONDITIONAL test_var[1].value equals 7}}
            [/args]
        [/lua]

        {ASSERT {VARIABLE_CONDITIONAL test_var[0].value equals 2}}
        {ASSERT {VARIABLE_CONDITIONAL test_var[1].value equals 3}}

        {SUCCEED}
    [/event]
)}
