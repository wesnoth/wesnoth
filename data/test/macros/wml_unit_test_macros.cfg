#textdomain wesnoth-test
#define RETURN X
    [if]
        [variable]
            name=ended
            boolean_not_equals=yes
        [/variable]
        [then]
            [if]
                {X}
                [then]
                    {VARIABLE ended yes}
                    [endlevel]
                        test_result=pass
                        linger_mode = yes
                    [/endlevel]
                [/then]
                [else]
                    [test_condition]
                        result=no
                        {X}
                    [/test_condition]
                    {VARIABLE ended yes}
                    [endlevel]
                        test_result=fail
                        linger_mode = yes
                    [/endlevel]
                [/else]
            [/if]
        [/then]
    [/if]
#enddef

#define ASSERT X
    [if]
        [variable]
            name=ended
            boolean_not_equals=yes
        [/variable]
        [then]
            [if]
                {X}
                [else]
                    [test_condition]
                        result=no
                        {X}
                    [/test_condition]
                    {VARIABLE ended yes}
                    [endlevel]
                        test_result=fail
                        linger_mode = yes
                    [/endlevel]
                [/else]
            [/if]
        [/then]
    [/if]
#enddef

#define FAIL
    {RETURN ([false][/false])}
#enddef

#define SUCCEED
    {RETURN ([true][/true])}
#enddef

#define FAIL_IF_NOT FLAG NOT_EQUALS
    [if]
        [variable]
            name={FLAG}
            not_equals={NOT_EQUALS}
        [/variable]
        [then]
            {FAIL}
        [/then]
    [/if]
#enddef

#define ATTACK_AND_VALIDATE STARTX STARTY X1 Y1 X2 Y2 DAMAGE1

#arg DAMAGE2
{DAMAGE1}#endarg

    [modify_unit]
        [filter]
        [/filter]
        [effect]
            apply_to=attack
            [set_specials]
                mode=append
                [attacks]
                    value=1
                [/attacks]
                [damage]
                    value=100
                [/damage]
                [chance_to_hit]
                    value=100
                [/chance_to_hit]
            [/set_specials]
        [/effect]
        hitpoints = 1000
        max_hitpoints = 1000
    [/modify_unit]

    {VARIABLE a {STARTX}}
    {VARIABLE b {STARTY}}

    # avoid a warning if start and end are the same coordinates
    [if]
        [variable]
            name=a
            not_equals={X1}
        [/variable]
        [or]
            [variable]
                name=b
                not_equals={Y1}
            [/variable]
        [/or]
        [then]
            [do_command]
                [move]
                    x={STARTX},{X1}
                    y={STARTY},{Y1}
                [/move]
            [/do_command]
        [/then]
    [/if]

    [do_command]
        [attack]
            weapon=0
            defender_weapon=0
            [source]
                x,y={X1},{Y1}
            [/source]
            [destination]
                x,y={X2},{Y2}
            [/destination]
        [/attack]
    [/do_command]

    [store_unit]
        [filter]
            x,y={X1},{Y1}
        [/filter]
        variable=temp1
    [/store_unit]
    [store_unit]
        [filter]
            x,y={X2},{Y2}
        [/filter]
        variable=temp2
    [/store_unit]

    {ASSERT {VARIABLE_CONDITIONAL temp1.hitpoints numerical_equals "$($temp1.max_hitpoints-{DAMAGE1})"}}
    {ASSERT {VARIABLE_CONDITIONAL temp2.hitpoints numerical_equals "$($temp2.max_hitpoints-{DAMAGE2})"}}

    {CLEAR_VARIABLE temp1}
    {CLEAR_VARIABLE temp2}
    {CLEAR_VARIABLE a}
    {CLEAR_VARIABLE b}
#enddef
